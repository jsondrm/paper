%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: zhuzhuangtu1.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: I333624
%%CreationDate: 2017/4/20, 19:41:58
%%BoundingBox: -1 0 700 423
%%HiResBoundingBox: 0 0 699.3106 422.9770
%%CropBox: 0 0 699.3106 422.9770
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 800 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-04-20T19:39:15+08:00"
   xmp:ModifyDate="2017-04-20T19:39:15+08:00"
   pdf:Producer="Microsoft: Print To PDF">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>I333624</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">å·¥ä½œç°¿1.xlsx</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -422.977 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-3.05176e-5 0 mo
-3.05176e-5 422.977 li
699.311 422.977 li
699.311 0 li
cp
clp
3.77161 4.3009 mo
693.412 4.3009 li
693.412 418.541 li
3.77161 418.541 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
46.6116 270.221 mo
673.732 270.221 li
673.732 271.541 li
46.6116 271.541 li
46.6116 270.221 li
cp
46.6116 220.901 mo
673.732 220.901 li
673.732 222.221 li
46.6116 222.221 li
46.6116 220.901 li
cp
46.6116 171.461 mo
673.732 171.461 li
673.732 172.901 li
46.6116 172.901 li
46.6116 171.461 li
cp
46.6116 121.901 mo
673.732 121.901 li
673.732 123.341 li
46.6116 123.341 li
46.6116 121.901 li
cp
46.6116 72.5809 mo
673.732 72.5809 li
673.732 73.9009 li
46.6116 73.9009 li
46.6116 72.5809 li
cp
46.6116 23.2609 mo
673.732 23.2609 li
673.732 24.5809 li
46.6116 24.5809 li
46.6116 23.2609 li
cp
.152804 .110048 .088716 0 cmyk
f
45.7716 23.9809 mo
45.7716 23.5009 46.1316 23.0209 46.6116 23.0209 cv
673.732 23.0209 li
674.332 23.0209 674.692 23.5009 674.692 23.9809 cv
674.692 320.261 li
674.692 320.741 674.332 321.101 673.732 321.101 cv
46.6116 321.101 li
46.1316 321.101 45.7716 320.741 45.7716 320.261 cv
cp
47.4516 320.261 mo
46.6116 319.301 li
673.732 319.301 li
672.892 320.261 li
672.892 23.9809 li
673.732 24.8209 li
46.6116 24.8209 li
47.4516 23.9809 li
cp
.750179 .679652 .670192 .901488 cmyk
f
68.0916 211.661 mo
87.8916 211.661 li
87.8916 320.261 li
68.0916 320.261 li
68.0916 211.661 li
cp
130.972 260.981 mo
150.532 260.981 li
150.532 320.261 li
130.972 320.261 li
130.972 260.981 li
cp
193.612 260.981 mo
213.172 260.981 li
213.172 320.261 li
193.612 320.261 li
193.612 260.981 li
cp
256.252 211.661 mo
276.052 211.661 li
276.052 320.261 li
256.252 320.261 li
256.252 211.661 li
cp
318.892 231.461 mo
338.692 231.461 li
338.692 320.261 li
318.892 320.261 li
318.892 231.461 li
cp
381.772 310.421 mo
401.332 310.421 li
401.332 320.261 li
381.772 320.261 li
381.772 310.421 li
cp
444.532 300.461 mo
463.972 300.461 li
463.972 320.261 li
444.532 320.261 li
444.532 300.461 li
cp
507.172 290.621 mo
526.852 290.621 li
526.852 320.261 li
507.172 320.261 li
507.172 290.621 li
cp
569.812 231.461 mo
589.492 231.461 li
589.492 320.261 li
569.812 320.261 li
569.812 231.461 li
cp
632.692 73.3009 mo
652.252 73.3009 li
652.252 320.261 li
632.692 320.261 li
632.692 73.3009 li
cp
.795987 .556786 0 0 cmyk
f
46.6116 319.541 mo
673.732 319.541 li
673.732 320.861 li
46.6116 320.861 li
cp
.750179 .679652 .670192 .901488 cmyk
f
.677577 .617609 .597345 .495003 cmyk
%ADOBeginSubsetFont: PBAAAA+CIDFont+F1 Initial
ct_T42Dict begin
-0.516 -0.305 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CIDFont+F1
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0ada9d000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79668154ad40000085c400003e0268656164f3195718000010480000
0036686865610dbb0be90000108000000024686d74781e1d1752000010a4
000031c26c6f63613948468b00004268000020406d6178701cfd16860000
62a8000000206e616d65de3e5087000062c800000d5c7072657028b9ff7e
00007024000015a0676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
20890600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
000000061eb86ef7d7365f0f3cf50019080000000000bbeb7ccc00000000
d20670b9fbdafd8d0a1a0850000100090002000000000000000100000600
fe0001c40aa0fbdafa860a1a0001000000000000000000000000000008c2
040e00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000491008600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
064800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000425
008600000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5003a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000200005a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000004a8004e02de001903f2004f03f000430000000003e9004f
04420066000000000000000004420047040e0039040e0094040e0058040e
005500000000040e0060040e00540000000000000000040e004204740058
02ad001c03a000510385004d00000000038a005f03ce0058000000000000
000003dc0046039f0037039f0079039f0050039f005300000000039f0062
039f00450000000000000000039f003804a8004e02de001903f2004f03f0
00430000000003e9004f04420066000000000000000004420047040e0039
040e0094040e0058040e005500000000040e0060040e0054000000000000
0000040e0042032f003d0205001d02b4003e02b000380000000002b20043
02e4004b000000000000000002e400360000000000000000000000000000
000000000000032f003d0205001d02b4003e02b000380000000002b20043
02e4004b000000000000000002e400360000000000000000000000000000
00000000000002b5002f02050025027000300274002300000000026a0031
027a002a0000000000000000026e001b02b5002f02050025027000300274
002300000000026a0031027a002a0000000000000000026e001b00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000049a007800000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000049a0078000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e01620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
01620162016201620162016201620162016201620162016201a701a701a7
01a701a701a701a701a701a701a701a701a701a701a701a701a701a701a7
01a701a701a701a701a701a701a701a701a701a701a701a701a701a701a7
01a701a701a701a701a701a701a701a701a701a701a7021d021d021d021d
021d021d021d021d021d021d021d021d021d021d021d021d021d021d021d
021d021d021d029a029a029a029a029a029a029a029a029a029a029a029a
029a029a029a029a029a029a029a029a029a029a029a029a029a029a029a
029a029a029a029a029a029a029a029a029a029a029a029a029a029a029a
029a029a029a029a029a029a029a029a029a029a029a029a029a029a029a
029a029a029a029a029a029a029a029a0336033603360336033603360336
033603360336033603360336033603360336033603360336033603360336
033603360336033603360336033603360336033603360336033603360336
033603360336033603360336033603360336033603360336033603360336
033603360336033603360336033603360336033603360336033603360336
033603360336033603360336033603360336033603360336033603360336
033603360336033603360336033603360336033603360336033603360336
033603360336033603360336033603360336033603360336033603360336
0336033603b503b503b503b503b503b503b503b503b503b503b503b503b5
03b503b503b503b503b503b503b503b503b503b503b503b503b503b503b5
03b503b503b503b503b503b503b503b503b503b503b503b503b503b503b5
03b503b503b503b503b503b503b503b503b503b503b503b503b503b503b5
03b503b503b503b503b503b503b503b503b503b503b503b503b503b503b5
03b5041b041b041b041b041b041b041b041b041b041b041b041b041b041b
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
046e046e046e046e046e046e046e046e046e046e046e046e046e046e046e
04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd
04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd04bd
04bd04bd04bd04bd04bd050b054e05c7066f066f06e607640764076407dc
082a088608f7099909990a100ae40ae40ae40b630bb10bf40c690d150d15
0d960e150e150e150e950ee50f3f0f470f4f0f4f0fd1104c104c104c10c4
1113115511d01276127612f212fa12fa12fa136a140c14aa1588169a169a
1763176b176b176b1832183b1844184d18561856185f1868186818681871
1871187118711871187118bc18fe196519f519f51a721ae41ae41ae41b57
1b571b571b571b571b571ba21be51c471ceb1ceb1d631ddd1ddd1ddd1e58
1e611e6a1e731e7c1e7c1e851e8e1e8e1e8e1e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e971e971e971e971e971e97
1e971e971e971e971e971e971e971e971e971e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f1e9f
1e9f1f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f011f011f01
1f011f011f011f011f011f011f011f011f011f011f011f011f0100010000
101f005b00050059000200020010002f006000000c6515a0000100010000
002d02220000000300000000006400000000000300000001000e00640000
0003000000020008032a0000000300000003002e03040000000300000004
0018031a00000003000000050018033200000003000000060018034a0000
000300000007007603620000000300000008002a000e0000000300000009
002003d8000000030000000a02a00064000000030000000b005603f80000
00030000000c002a044e000000030000000d02980478000000030000000e
006c071000010000000000000032077c0001000000000001000707ae0001
000000000002000409110001000000000003001708fe0001000000000004
000c09090001000000000005000c09150001000000000006000c09210001
000000000007003b092d0001000000000008001507830001000000000009
00100968000100000000000a015007ae000100000000000b002b09780001
00000000000c001509a3000100000000000d014c09b8000100000000000e
00360b040003000104090000006400000003000104090001000e00640003
0001040900020008032a0003000104090003002e03040003000104090004
0018031a00030001040900050018033200030001040900060018034a0003
000104090007007603620003000104090008002a000e0003000104090009
002003d8000300010409000a02a00064000300010409000b005603f80003
00010409000c002a044e000300010409000d02980478000300010409000e
006c071000a9002000320030003100350020004d006900630072006f0073
006f0066007400200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e00430061006c00690062007200690020
00690073002000610020006d006f006400650072006e002000730061006e
0073002000730065007200690066002000660061006d0069006c00790020
007700690074006800200073007500620074006c006500200072006f0075
006e00640069006e006700730020006f006e0020007300740065006d0073
00200061006e006400200063006f0072006e006500720073002e00200049
00740020006600650061007400750072006500730020007200650061006c
0020006900740061006c006900630073002c00200073006d0061006c006c
00200063006100700073002c00200061006e00640020006d0075006c0074
00690070006c00650020006e0075006d006500720061006c002000730065
00740073002e0020004900740073002000700072006f0070006f00720074
0069006f006e007300200061006c006c006f007700200068006900670068
00200069006d007000610063007400200069006e00200074006900670068
0074006c007900200073006500740020006c0069006e006500730020006f
0066002000620069006700200061006e006400200073006d0061006c006c
0020007400650078007400200061006c0069006b0065002e002000430061
006c0069006200720069002700730020006d0061006e0079002000630075
007200760065007300200061006e006400200074006800650020006e0065
007700200072006100730074006500720069007300650072002000740065
0061006d00200075007000200069006e0020006200690067006700650072
002000730069007a0065007300200074006f002000720065007600650061
006c002000610020007700610072006d00200061006e006400200073006f
006600740020006300680061007200610063007400650072002e004d0069
00630072006f0073006f00660074003a002000430061006c006900620072
006900200042006f006c006400560065007200730069006f006e00200036
002e0031003200430061006c0069006200720069002d0042006f006c0064
00430061006c006900620072006900200069007300200061002000740072
006100640065006d00610072006b0020006f006600200074006800650020
004d006900630072006f0073006f00660074002000670072006f00750070
0020006f006600200063006f006d00700061006e006900650073002e004c
007500630028006100730029002000640065002000470072006f006f0074
0068007400740070003a002f002f007700770077002e006d006900630072
006f0073006f00660074002e0063006f006d002f007400790070006f0067
00720061007000680079002f006300740066006f006e0074007300680074
00740070003a002f002f0066006f006e007400660061006200720069006b
002e0063006f006d0059006f00750020006d006100790020007500730065
0020007400680069007300200066006f006e007400200061007300200070
00650072006d006900740074006500640020006200790020007400680065
002000450055004c004100200066006f0072002000740068006500200070
0072006f006400750063007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200069007300200069
006e0063006c007500640065006400200074006f00200064006900730070
006c0061007900200061006e00640020007000720069006e007400200063
006f006e00740065006e0074002e00200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002e0068007400740070003a002f002f00770077
0077002e006d006900630072006f0073006f00660074002e0063006f006d
002f007400790070006f006700720061007000680079002f0066006f006e
00740073002f00640065006600610075006c0074002e0061007300700078
a92032303135204d6963726f736f667420436f72706f726174696f6e2e20
416c6c205269676874732052657365727665642e43616c69627269206973
2061206d6f6465726e2073616e732073657269662066616d696c79207769
746820737562746c6520726f756e64696e6773206f6e207374656d732061
6e6420636f726e6572732e204974206665617475726573207265616c2069
74616c6963732c20736d616c6c20636170732c20616e64206d756c746970
6c65206e756d6572616c20736574732e204974732070726f706f7274696f
6e7320616c6c6f77206869676820696d7061637420696e2074696768746c
7920736574206c696e6573206f662062696720616e6420736d616c6c2074
65787420616c696b652e2043616c696272692773206d616e792063757276
657320616e6420746865206e65772072617374657269736572207465616d
20757020696e206269676765722073697a657320746f2072657665616c20
61207761726d20616e6420736f6674206368617261637465722e4d696372
6f736f66743a2043616c6962726920426f6c6456657273696f6e20362e31
3243616c696272692d426f6c6443616c6962726920697320612074726164
656d61726b206f6620746865204d6963726f736f66742067726f7570206f
6620636f6d70616e6965732e4c7563286173292064652047726f6f746874
74703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f677261
7068792f6374666f6e7473687474703a2f2f666f6e7466616272696b2e63
6f6d596f75206d617920757365207468697320666f6e7420617320706572
6d6974746564206279207468652045554c4120666f72207468652070726f
6475637420696e207768696368207468697320666f6e7420697320696e63
6c7564656420746f20646973706c617920616e64207072696e7420636f6e
74656e742e20596f75206d6179206f6e6c792028692920656d6265642074
68697320666f6e7420696e20636f6e74656e74206173207065726d697474
65642062792074686520656d62656464696e67207265737472696374696f
6e7320696e636c7564656420696e207468697320666f6e743b20616e6420
286969292074656d706f726172696c7920646f776e6c6f61642074686973
20666f6e7420746f2061207072696e746572206f72206f74686572206f75
747075742064657669636520746f2068656c70207072696e7420636f6e74
656e742e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f74
79706f6772617068792f666f6e74732f64656661756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b401151f4603bd01000100000500010190
00542b4bb807ff524bb008505bb00188b02553b00188b040515ab00688b0
00555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d00
1d424bb01d5358b203a0a01d42594bb0805358b20340401d42594bb0ff53
58b20300001d42592b5e73757373742b732b73742b2b73745e732b5e7374
757374755e73747573015e7374737475757473745e737473002b2b732b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b73
74752b2b732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b
5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[15875 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 10264 1005 <00010094000003b00517002e00b5b10102435558400d0929010928010827
0101120130b8ffc040090f024d403001030029b80292b31e180b11b8ffde
b50f024d111312b8017d40092352290f10010b0510b8012bb24006540018
3f1a4ded5f5e5d323ffdcd012f2bcdc433fdcd31305f5d2b005d015d5d5d
1b4018292801292901092901092801082701011201403001031312b8017d
40092352290f10010b0510b8012bb240065400183f1a4ded5f5e5d323ffd
cd3130015f5d005d015d5d5d5d5d5925140e022321222e0235343e023333
11070606262635343e0237253e0333321e02151133321e0203b0060b0e09
fd36080e0b06050b0e09f1d0171d110602080e0c0116050f18271f262f18
08d3090f0b05641c27170a0a17271c1d27180b034a730b05112a26181f16
0e08b40405030103070c09fbd30b1827>PBAAAA+CIDFont+F1 AddT42Char 
2 10580 1006 <00010058000003bc0525003e0112b10102435558400e042c01042b01093a
010939010b40b8ffc0b60f024d00400116b802eeb633253325330039ba02
ee000bffea400a0f024d000b010f030b2ab80169b61138392020391bb8ff
e8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e531039180b0f
014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f1239
39ed012f5f5e5d2bedcd39392f2f10ed31305d2b005e5d5d015d5d1b4013
042c01042b01093a010939010b0040010f032ab80169b61138392020391b
b8ffe8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e53103918
0b0f014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f
123939ed3130015f5e5d005e5d5d015d5d5925140e022321222e0235343e
0237373e0335342e0223220e0223222e0235343e0633321e0215140e0207
0721321e0203bc050a100afd181620140906101914e043522e1115293e2a
3b5b452e0d090d080503060a194362764065976431184c8a729701fe0a11
0c066b1d291a0b08172c23212f252315f046735f5024213b2c191e251f0c
1c2f22171f171118252318335b7d483f7a8dab719b0c1929>PBAAAA+CIDFont+F1 AddT42Char 
2 11024 1007 <00010055ffe903b6052500580141b10102435558b70847010a46010b5ab8
ffc0b60f024d005a0131b802c9400d4e53264e40264e4e2640030e1bba02
e90000ffe8b40f024d000eb8ffe8400a0f024d000e010f030e45bb015600
3b0009015eb6113b113b111636b8ffe8b30b014d36b8ffe8b40b0f014c36
b80155b249532cb801044011202005495316180b014d16180b0f014c16b8
0156b240055600183f1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10
ed10ed012f5f5e5d2bd42bed1217392f2f2f11123910ed31305d2b005e5d
5d1b400d0847010a46010b005a010f0345bb0156003b0009015eb6113b11
3b111636b8ffe8b30b014d36b8ffe8b40b0f014c36b80155b249532cb801
044011202005495316180b014d16180b0f014c16b80156b240055600183f
1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10ed10ed3130015f5e5d
005e5d5d5901140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303b64a84b86d4274593a1209070310100a314c66
4137543b1d23456947700d120c05050b110c713a5a3d20162b442e345c49
330c080c0804020609143e5e7b485e9163331e3a5739446c4b28017b6196
6635131c1e10141b291d30251b1f1b1a2f43292d48331c0716271f1d2514
081b32472b213b2b191f25200714261e19211610132624192c53794c3b66
50380e0308355065>PBAAAA+CIDFont+F1 AddT42Char 
2 11572 1009 <00010060ffe903b0050e003e00e8b10102435558b70536010535010b40b8
ffc0b60f024d00400137b8020cb5283228320e1dba02c40000ffe0400b0f
024d00000e010f030e3ab80125b322220536b8ffe8b40b0f014c36b80164
b22c5109b80162b71318180b0f014c18b80156b240055600183f1a4dfd2b
d4ed3fed2b12392fed012f5f5e5dd42bed1239392f2fed31305d2b005e5d
5d1b40132a36012a37010536010535010b0040010f033ab80125b3222205
36b8ffe8b40b0f014c36b80164b22c5109b80162b71318180b0f014c18b8
0156b240055600183f1a4dfd2bd4ed3fed2b12392fed3130015f5e5d005e
5d5d015d5d5901140e0223222e0635343e0233321e0233323e0235342e02
232206232226351134363321321e02151406232111363633321e0203b049
85bb723c6c56371108050204090c080a294360433a5f42241e4066493a5f
2a1d191f22026509100b051514fe3423452669a36f3a01a469a5713c0f17
170f1219261a1c27180a171c1718355038304b341a0c1d27023228230c1a
2b1e3c36feeb0402315f8d00>PBAAAA+CIDFont+F1 AddT42Char 
2 5152 970 <00020054ffe903d005240034004800e4b10102435558b9004affc0b70f02
4d004a012b3fb802abb40c1c1c0c35ba02810000ffe0400e0f024d000001
00000c010f030c3ab8ffe8b40b0f014c3ab8013eb330300526b8fff0b30b
014d26b8ffe8b40b0f014c26b8013f4009135944180b0f014c44b80140b2
40055f00183f1a4ded2b3fed2b2b12392fed2b012f5f5e5dd45d2bed1239
2f10ed3231305d2b1bb5004a010f033ab8ffe8b40b0f014c3ab8013eb330
300526b8fff0b30b014d26b8ffe8b40b0f014c26b8013f4009135944180b
0f014c44b80140b240055f00183f1a4ded2b3fed2b2b12392fed2b313001
5f5e5d5901140e0223222e0435343e0433321e0615140e0223222e022322
0e02073e0333321e0205342e0223220e0207141e0233323e0203d03c74aa
6f5a86623e250e0f2b4e7baf78264d422e0f08050203080e0a0c26364930
51704620011639434e2c628c592afefe1228422f1c36343015182f472f2e
452e1801b062a77945294d6e8aa25b4ca6a0916d40090e120d10131c141f
29170a0d100c3c67884c0e1c140d36648e70334d351b0a12190e6b8f5423
223e5300>PBAAAA+CIDFont+F1 AddT42Char 
2 11974 1010 <ffff0054ffe903d00524020603ca0000>PBAAAA+CIDFont+F1 AddT42Char 
2 11990 1013 <00020042ffe903bf05250030004200d8b10102435558b90044ffc0b70f02
4d0044011d31b80291b3000e0e00b8ffe0400a0f024d0000010f03003bb8
0279b72540180b0f014c40b80128b320200736b8ffe8b40b0f014c36b801
2a40092a5318180b0f014c18b8012bb240075600183f1a4ded2b3fed2b12
392fed2b012fedc45f5e5d2b392f10ed3231305d2b1bb50044010f0340b8
fff0400a0b014d40180b0f014c40b80128400920200736100b014d36b8ff
e8b40b0f014c36b8012a40092a5318180b0f014c18b8012bb24007560018
3f1a4ded2b3fed2b2b12392fed2b2b3130015f5e5d5901140e0423222e04
35343e0233321e0233323e0237060623222e0235343e0233321e0405342e
0223220e0215141e0233323603bf102d4f7db37a2b554631160a03090d09
0c2c3f503154744822022e825467905a293a72aa705a876141250ffefb18
3048302f442d161329422f3a6702c24fa9a2926d400c1214152824212816
070e120e3c66864a1d2b3666925c61a377422a4e6f889e326b905624213c
52313551351a2300>PBAAAA+CIDFont+F1 AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>PBAAAA+CIDFont+F1 AddT42Char 
PBAAAA+CIDFont+F1 /CharStrings get begin
/one 1005 def
/two 1006 def
/three 1007 def
/five 1009 def
/six 1010 def
/nine 1013 def
end
PBAAAA+CIDFont+F1 /Encoding get
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 57 /nine put
pop
end
%ADOEndSubsetFont
/RZBRVR+CIDFont+F1 /PBAAAA+CIDFont+F1 findfont ct_VMDictPut
/RZBRVR+CIDFont+F1*1 
[49{/.notdef}rp /one /two /three /.notdef /five /six 2{/.notdef}rp 
/nine 198{/.notdef}rp]
RZBRVR+CIDFont+F1 nf
RZBRVR+CIDFont+F1*1 [16.0943 0 0 -16.0943 0 0 ]msf
69.7735 199.179 mo
(11)
[8.20802 0 ]xsh
136.611 248.617 mo
(66)
[62.6069 0 ]xsh
257.931 199.179 mo
(11)
[8.20804 0 ]xsh
324.768 218.983 mo
(9)sh
387.409 297.938 mo
(1)sh
450.165 288.099 mo
(2)sh
512.935 278.142 mo
(3)sh
575.568 218.983 mo
(9)sh
634.247 60.9393 mo
(25)
[8.20807 0 ]xsh
.643427 .564508 .504021 .260655 cmyk
%ADOBeginSubsetFont: PBAAAA+CIDFont+F1 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RZBRVR+CIDFont+F1 gcheck setglobal} if
2 9940 1004 <00020039ffe903d605250013002b00c7b10102435558b9002dffc0b60f02
4d002d0114ba02950000ffd4400a0f024d0000010f030020bb0295000a00
1bffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d25
180b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b012fedd45f
5e5d2bed31305d2b1b4012002d01092001090a010214010200010f031bb8
ffe8b30b014d1bb8ffe8b40b0f014c1bb80154400e0f5325180b014d2518
0b0f014c25b80155b240055600183f1a4ded2b2b3fed2b2b015f5e5d5d5d
5d31305d5901140e0223222e0235343e0233321e0205342e0423220e0215
141e0233323e0403d63271b58385ae66293371b58285af6628fef70a151f
2c38223b4d2d12162f4a34273c2d1e1307028c9bfab05e5babf79c9afbb0
5e5babf7a95c8d68482b123972aa718ab56b2b19324c647e>RZBRVR+CIDFont+F1 AddT42Char 
RZBRVR+CIDFont+F1 /CharStrings get begin
/zero 1004 def
end
RZBRVR+CIDFont+F1 /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RZBRVR+CIDFont+F1*1 
[48{/.notdef}rp /zero /one /two /three /.notdef /five /six 
2{/.notdef}rp /nine 198{/.notdef}rp]
RZBRVR+CIDFont+F1 nf
RZBRVR+CIDFont+F1*1 [16.0943 0 0 -16.0943 0 0 ]msf
23.573 324.822 mo
(0)sh
23.573 275.376 mo
(5)sh
15.408 226.063 mo
(10)
[8.20802 0 ]xsh
15.408 176.617 mo
(15)
[8.20802 0 ]xsh
15.408 127.297 mo
(20)
[8.20802 0 ]xsh
15.408 77.8588 mo
(25)
[8.20802 0 ]xsh
15.408 28.5385 mo
(30)
[8.20802 0 ]xsh
gsave
142.492 258.701 mo
142.372 258.821 li
3.77161 397.421 li
3.77161 418.541 li
13.9716 418.421 li
157.972 274.421 li
158.092 274.181 li
142.612 258.701 li
cp
eclp
55.6116 354.341 mo
59.0916 357.821 li
60.4116 356.381 li
56.9316 352.901 li
cp
50.4516 358.421 mo
55.4916 353.381 li
55.0116 353.141 54.2916 352.901 53.2116 352.901 cv
53.0916 352.421 li
54.0516 352.061 54.7716 351.821 55.1316 351.821 cv
55.6116 351.821 55.8516 351.821 55.9716 351.941 cv
56.2116 352.181 56.2116 352.421 56.0916 352.781 cv
59.2116 349.661 li
59.3316 348.101 li
61.7316 348.221 li
57.8916 352.061 li
61.3716 355.541 li
61.9716 354.941 li
61.9716 353.861 li
63.7716 353.861 li
63.5316 354.701 li
63.6516 356.141 63.6516 357.701 63.5316 359.381 cv
65.4516 359.021 67.4916 357.941 69.6516 356.021 cv
70.1316 356.381 li
69.6516 356.981 69.5316 357.461 69.6516 357.941 cv
67.3716 359.381 65.3316 360.221 63.4116 360.461 cv
62.9316 362.741 61.7316 365.141 59.8116 367.901 cv
59.3316 367.541 li
61.0116 364.901 61.9716 362.501 62.3316 360.461 cv
61.0116 360.461 59.6916 360.221 58.1316 359.741 cv
57.4116 360.461 li
56.9316 361.061 li
55.8516 360.941 li
58.1316 358.661 li
54.6516 355.181 li
52.6116 357.341 li
52.2516 357.701 51.8916 358.061 51.6516 358.541 cv
cp
58.7316 359.141 mo
60.0516 359.381 61.2516 359.501 62.4516 359.381 cv
62.4516 358.421 62.4516 357.101 62.3316 355.541 cv
cp
53.8116 356.861 mo
55.8516 356.861 li
55.4916 357.581 li
55.6116 359.381 55.4916 361.301 55.2516 363.101 cv
54.6516 363.101 li
54.7716 362.021 54.6516 360.941 54.5316 359.861 cv
54.2916 358.781 54.1716 357.701 53.8116 356.861 cv
cp
59.0916 352.181 mo
61.6116 351.341 63.1716 350.981 63.5316 350.981 cv
63.8916 351.101 64.2516 351.221 64.3716 351.341 cv
64.4916 351.461 64.6116 351.701 64.7316 351.941 cv
64.8516 352.181 64.8516 352.301 64.7316 352.421 cv
64.4916 352.661 64.1316 352.661 63.5316 352.541 cv
62.6916 352.421 61.1316 352.541 59.0916 352.781 cv
cp
69.1716 347.501 mo
69.8916 348.221 li
72.0516 346.061 li
71.3316 345.341 li
cp
72.1716 344.381 mo
73.0116 345.221 li
75.0516 343.181 li
74.3316 342.341 li
cp
70.4916 348.701 mo
71.0916 349.421 li
73.2516 347.261 li
72.6516 346.541 li
cp
73.4916 345.701 mo
74.0916 346.421 li
76.2516 344.261 li
75.5316 343.661 li
cp
75.1716 341.621 mo
76.3716 342.701 77.2116 343.541 77.6916 343.901 cv
77.0916 345.221 li
76.7316 344.861 li
74.6916 346.901 li
75.4116 347.621 li
77.6916 345.461 li
77.8116 344.141 li
79.8516 344.381 li
76.0116 348.221 li
76.8516 349.061 li
80.0916 345.701 li
80.2116 344.261 li
82.3716 344.501 li
73.2516 353.621 li
72.7716 354.101 72.4116 354.461 72.1716 354.941 cv
70.9716 354.821 li
75.8916 349.901 li
75.0516 349.061 li
72.8916 351.341 li
72.4116 351.701 72.1716 352.181 71.8116 352.541 cv
70.7316 352.421 li
74.5716 348.581 li
73.7316 347.741 li
71.5716 349.901 li
71.8116 350.141 li
71.2116 351.341 li
70.4916 350.621 69.8916 349.901 69.2916 349.301 cv
68.6916 348.701 68.0916 348.101 67.3716 347.501 cv
68.5716 347.021 li
73.7316 341.861 li
73.7316 341.141 li
75.1716 340.901 li
cp
64.9716 342.941 mo
65.4516 343.421 li
70.2516 338.621 li
69.7716 338.141 li
cp
65.9316 343.901 mo
66.5316 344.621 li
71.3316 339.701 li
70.7316 339.101 li
cp
70.6116 337.301 mo
71.6916 338.381 72.5316 339.101 73.0116 339.461 cv
72.4116 340.781 li
71.9316 340.301 li
67.1316 345.101 li
67.4916 345.461 li
66.8916 346.661 li
66.2916 346.061 65.6916 345.341 64.8516 344.621 cv
64.1316 343.901 63.5316 343.301 63.1716 342.941 cv
64.3716 342.461 li
69.1716 337.661 li
69.0516 336.821 li
70.6116 336.581 li
cp
64.6116 348.821 mo
74.0916 339.341 li
74.2116 338.021 li
76.2516 338.261 li
66.6516 347.861 li
66.4116 348.101 66.0516 348.461 65.8116 348.941 cv
cp
f
grestore
gsave
205.132 258.701 mo
205.012 258.821 li
45.4116 418.421 li
76.6116 418.541 li
76.6116 418.421 li
220.612 274.421 li
220.732 274.181 li
205.252 258.701 li
cp
eclp
114.052 354.941 mo
115.252 354.461 116.092 354.221 116.452 354.341 cv
116.812 354.341 117.052 354.461 117.292 354.581 cv
117.292 354.701 117.412 354.821 117.532 355.061 cv
117.652 355.421 117.652 355.661 117.412 355.781 cv
117.292 356.021 116.932 356.021 116.212 355.661 cv
115.732 355.541 115.012 355.421 114.172 355.421 cv
cp
115.012 357.221 mo
115.492 357.701 li
118.852 354.341 li
117.772 353.261 116.932 352.541 116.452 352.061 cv
118.132 351.341 li
118.252 351.941 li
119.692 353.501 li
123.172 350.021 li
123.172 348.941 li
125.212 349.061 li
124.732 349.541 124.612 350.621 124.852 352.061 cv
124.372 352.181 li
123.652 350.501 li
115.972 358.181 li
116.572 358.661 116.812 359.141 116.932 359.501 cv
116.932 359.981 116.812 360.341 116.572 360.581 cv
116.332 360.821 116.092 360.941 115.852 360.821 cv
115.492 360.581 115.372 360.341 115.492 359.741 cv
115.612 359.381 115.252 358.661 114.532 357.701 cv
cp
119.452 349.421 mo
121.252 349.301 li
121.012 349.661 120.892 350.141 120.892 350.621 cv
120.892 351.221 120.892 351.941 120.772 352.781 cv
120.292 352.781 li
120.172 352.061 120.052 351.461 119.932 350.981 cv
119.812 350.501 119.692 350.021 119.452 349.421 cv
cp
119.572 357.461 mo
120.652 358.541 li
123.892 355.181 li
122.812 354.221 li
cp
127.132 359.021 mo
127.972 358.541 128.452 358.181 128.572 358.061 cv
128.692 357.821 128.692 357.701 128.572 357.581 cv
127.012 356.021 li
124.612 358.301 li
126.292 360.101 127.492 361.181 128.092 361.781 cv
127.492 363.101 li
126.652 362.261 125.452 360.941 123.652 359.261 cv
121.372 361.541 li
124.132 364.301 li
123.412 365.501 li
122.812 364.781 122.092 364.061 121.492 363.461 cv
120.892 362.861 120.292 362.261 119.572 361.661 cv
120.892 361.061 li
123.172 358.781 li
122.332 357.821 li
121.132 359.021 li
121.492 359.381 li
120.772 360.461 li
120.172 359.861 119.692 359.381 119.212 358.901 cv
118.852 358.541 118.252 358.061 117.772 357.461 cv
118.972 357.101 li
122.332 353.621 li
122.452 352.661 li
123.772 352.661 li
123.772 353.381 li
124.612 354.101 125.092 354.581 125.452 354.941 cv
124.852 356.141 li
124.372 355.661 li
123.172 356.981 li
124.012 357.821 li
126.412 355.541 li
126.412 354.581 li
128.092 354.581 li
127.972 355.301 li
129.772 356.981 li
130.252 357.461 130.252 358.301 129.772 359.381 cv
129.172 359.021 128.452 359.021 127.492 359.501 cv
cp
131.932 347.501 mo
132.652 348.221 li
134.812 346.061 li
134.092 345.341 li
cp
134.932 344.381 mo
135.652 345.221 li
137.812 343.181 li
136.972 342.341 li
cp
133.132 348.701 mo
133.852 349.421 li
136.012 347.261 li
135.292 346.541 li
cp
136.252 345.701 mo
136.852 346.421 li
138.892 344.261 li
138.292 343.661 li
cp
137.932 341.621 mo
139.132 342.701 139.972 343.541 140.452 343.901 cv
139.852 345.221 li
139.492 344.861 li
137.332 346.901 li
138.172 347.621 li
140.452 345.461 li
140.572 344.141 li
142.492 344.381 li
138.652 348.221 li
139.492 349.061 li
142.852 345.701 li
142.972 344.261 li
145.012 344.501 li
135.892 353.621 li
135.532 354.101 135.172 354.461 134.932 354.941 cv
133.732 354.821 li
138.652 349.901 li
137.812 349.061 li
135.532 351.341 li
135.172 351.701 134.812 352.181 134.572 352.541 cv
133.372 352.421 li
137.332 348.581 li
136.492 347.741 li
134.332 349.901 li
134.572 350.141 li
133.972 351.341 li
133.252 350.621 132.652 349.901 132.052 349.301 cv
131.452 348.701 130.732 348.101 130.012 347.501 cv
131.332 347.021 li
136.492 341.861 li
136.372 341.141 li
137.932 340.901 li
cp
127.612 342.941 mo
128.212 343.421 li
133.012 338.621 li
132.412 338.141 li
cp
128.692 343.901 mo
129.292 344.621 li
134.092 339.701 li
133.492 339.101 li
cp
133.372 337.301 mo
134.452 338.381 135.172 339.101 135.652 339.461 cv
135.052 340.781 li
134.572 340.301 li
129.772 345.101 li
130.132 345.461 li
129.532 346.661 li
129.052 346.061 128.332 345.341 127.612 344.621 cv
126.892 343.901 126.292 343.301 125.812 342.941 cv
127.132 342.461 li
131.932 337.661 li
131.812 336.821 li
133.372 336.581 li
cp
127.372 348.821 mo
136.852 339.341 li
136.972 338.021 li
139.012 338.261 li
129.292 347.861 li
129.052 348.101 128.812 348.461 128.572 348.941 cv
cp
f
grestore
gsave
267.892 258.701 mo
267.772 258.821 li
108.172 418.421 li
139.372 418.541 li
139.372 418.421 li
283.372 274.421 li
283.492 274.181 li
268.012 258.701 li
cp
eclp
184.372 360.941 mo
184.492 361.541 184.612 362.021 184.612 362.501 cv
185.092 362.261 185.572 361.901 186.172 361.541 cv
186.172 361.061 185.932 360.461 185.692 359.621 cv
cp
175.852 356.381 mo
177.052 356.141 177.652 356.141 178.012 356.141 cv
178.372 356.261 178.612 356.381 178.732 356.381 cv
178.852 356.621 178.972 356.861 179.092 357.221 cv
179.092 357.461 179.092 357.701 178.972 357.821 cv
178.852 357.941 178.492 357.941 178.012 357.701 cv
177.412 357.341 176.692 357.101 175.852 356.981 cv
cp
179.572 352.421 mo
181.492 352.181 li
181.252 352.541 181.252 352.901 181.252 353.261 cv
181.252 353.741 181.252 354.581 181.252 355.661 cv
180.772 355.661 li
180.412 354.101 180.052 353.021 179.572 352.421 cv
cp
177.052 354.101 mo
178.852 353.381 li
178.972 354.101 li
180.892 356.021 li
181.852 355.181 li
181.852 353.981 li
183.772 354.101 li
181.372 356.621 li
181.612 356.741 li
182.452 356.261 182.932 356.021 183.292 355.901 cv
183.652 355.901 183.892 356.021 184.132 356.261 cv
184.252 356.381 184.372 356.501 184.492 356.741 cv
184.732 356.981 184.732 357.101 184.492 357.221 cv
184.492 357.341 184.132 357.341 183.772 357.341 cv
183.172 357.221 182.572 357.221 181.972 357.221 cv
183.412 358.541 li
183.172 359.381 li
184.012 359.021 li
184.012 359.381 184.012 359.741 184.012 360.221 cv
185.212 359.021 li
185.092 358.181 li
186.772 358.061 li
186.652 358.901 li
187.012 359.861 187.132 360.581 187.132 360.941 cv
187.732 360.581 188.092 360.461 188.452 360.341 cv
188.812 360.341 189.172 360.461 189.412 360.701 cv
189.652 361.061 189.772 361.301 189.532 361.421 cv
189.412 361.541 189.172 361.661 188.932 361.661 cv
188.332 361.661 187.852 361.901 187.252 362.021 cv
187.012 363.941 186.292 365.861 185.092 367.661 cv
184.612 367.421 li
185.572 365.501 186.172 363.821 186.292 362.501 cv
185.572 362.861 184.852 363.341 184.012 363.821 cv
183.892 363.461 183.652 362.741 183.532 361.781 cv
183.052 362.261 li
182.692 362.621 182.332 363.101 181.972 363.581 cv
180.892 363.461 li
183.052 361.181 li
182.932 360.821 182.692 360.341 182.332 359.621 cv
182.572 359.501 li
181.012 357.941 li
181.252 359.621 181.132 361.181 180.412 362.861 cv
179.932 362.861 li
180.292 360.821 180.412 359.141 180.172 357.821 cv
179.452 358.541 li
179.092 358.901 178.732 359.381 178.492 359.741 cv
177.292 359.621 li
180.052 356.981 li
178.972 355.901 178.012 354.941 177.052 354.101 cv
cp
184.492 353.501 mo
186.292 354.941 188.092 356.021 189.652 356.621 cv
189.052 355.301 187.972 353.621 186.292 351.701 cv
cp
181.012 350.021 mo
183.172 349.541 li
182.932 349.901 183.052 350.261 183.172 350.621 cv
183.292 351.101 183.532 351.821 184.012 352.901 cv
186.412 350.501 li
186.532 349.301 li
188.572 349.421 li
187.252 350.741 li
189.172 353.141 190.492 355.181 190.972 356.861 cv
192.412 356.981 193.732 356.621 194.932 355.901 cv
195.292 356.261 li
194.812 356.981 194.692 357.461 194.932 357.821 cv
193.372 358.181 192.052 358.181 190.972 358.061 cv
190.972 359.861 190.492 361.901 189.412 363.821 cv
188.932 363.701 li
189.652 361.541 190.012 359.621 189.772 357.821 cv
187.852 356.981 185.932 355.781 184.372 354.221 cv
184.972 355.061 185.332 356.141 185.332 357.581 cv
184.852 357.701 li
184.372 355.661 183.052 353.141 181.012 350.021 cv
cp
194.692 350.021 mo
195.532 348.821 196.252 347.861 196.732 347.021 cv
197.212 347.381 li
196.852 348.101 196.492 348.821 196.132 349.661 cv
195.652 350.621 195.292 351.341 195.172 351.941 cv
193.612 351.461 li
193.852 351.101 193.852 350.501 193.852 349.781 cv
193.732 349.061 193.612 347.981 193.372 346.541 cv
193.132 347.021 192.892 347.381 192.652 347.861 cv
192.412 348.341 192.292 348.821 192.052 349.301 cv
190.612 348.821 li
190.852 348.341 190.732 347.501 190.132 346.061 cv
189.652 344.501 189.052 343.421 188.572 342.701 cv
190.372 342.341 li
190.372 342.941 190.492 343.661 190.852 344.501 cv
191.092 345.341 191.332 346.421 191.452 347.741 cv
193.012 345.941 li
192.772 345.101 192.412 344.261 191.932 343.421 cv
193.612 343.061 li
193.732 343.541 193.852 344.261 194.092 345.341 cv
194.332 346.541 194.572 348.101 194.692 350.021 cv
cp
195.532 353.981 mo
195.892 353.501 196.372 352.661 196.972 351.701 cv
197.692 350.621 198.172 349.541 198.652 348.581 cv
199.252 348.941 li
199.012 349.541 198.652 350.501 198.172 351.821 cv
197.692 353.021 197.332 353.861 197.332 354.461 cv
cp
193.492 340.661 mo
195.772 342.941 li
198.412 340.301 li
196.252 338.021 li
cp
196.252 343.421 mo
198.652 345.821 li
201.292 343.181 li
199.012 340.781 li
cp
199.132 346.301 mo
201.772 348.941 li
204.412 346.181 li
201.772 343.661 li
cp
194.452 343.421 mo
193.252 342.101 192.292 341.261 191.692 340.661 cv
192.892 340.301 li
195.652 337.541 li
195.532 336.581 li
197.212 336.341 li
197.212 337.181 li
205.372 345.341 li
205.492 345.221 li
205.492 343.781 li
207.652 344.021 li
201.292 350.261 li
200.932 350.741 200.572 351.101 200.332 351.581 cv
199.132 351.461 li
200.812 349.781 li
cp
f
grestore
gsave
439.012 150.221 mo
438.892 150.341 li
170.812 418.421 li
202.132 418.541 li
202.132 418.421 li
454.612 165.941 li
454.732 165.701 li
439.252 150.221 li
cp
eclp
212.332 395.741 mo
212.692 396.101 213.052 396.581 213.292 397.061 cv
215.332 395.021 li
214.132 393.821 li
cp
215.212 390.461 mo
215.452 390.701 215.932 391.181 216.532 391.661 cv
215.932 392.981 li
215.452 392.501 li
215.092 392.981 li
216.172 394.061 li
218.092 392.261 li
218.092 390.821 li
220.252 391.061 li
216.652 394.541 li
217.612 395.501 218.332 396.221 218.692 396.461 cv
218.092 397.901 li
217.132 396.821 216.292 396.101 215.812 395.501 cv
213.772 397.661 li
214.252 398.501 214.252 399.461 213.892 400.541 cv
213.532 401.621 213.052 402.701 212.332 403.661 cv
211.852 403.421 li
212.452 402.221 212.812 401.261 212.932 400.421 cv
213.052 399.701 213.052 399.101 212.812 398.501 cv
211.012 400.421 li
210.652 400.781 210.292 401.141 209.932 401.621 cv
208.852 401.501 li
212.332 398.021 li
212.092 397.541 211.732 397.061 211.372 396.701 cv
210.772 397.181 li
211.132 397.541 li
210.412 398.741 li
209.452 397.661 208.372 396.581 207.412 395.621 cv
206.452 394.661 205.732 394.061 205.372 393.701 cv
206.692 393.341 li
211.492 388.541 li
211.252 387.701 li
212.932 387.461 li
212.932 388.061 li
cp
207.292 393.701 mo
207.892 394.301 li
212.572 389.621 li
211.972 389.021 li
cp
208.372 394.781 mo
208.972 395.501 li
213.652 390.821 li
213.052 390.101 li
cp
209.572 395.981 mo
210.292 396.701 li
214.972 392.021 li
214.252 391.301 li
cp
202.852 390.821 mo
204.652 390.341 li
204.652 390.701 204.652 390.941 204.652 391.181 cv
204.652 391.421 204.652 391.661 204.652 392.021 cv
206.452 390.221 li
206.452 388.901 li
208.372 389.141 li
206.092 391.541 li
206.932 391.061 207.532 391.061 207.652 391.421 cv
207.892 391.781 207.892 392.021 207.892 392.141 cv
207.892 392.381 207.772 392.501 207.652 392.621 cv
207.532 392.741 207.412 392.741 207.172 392.621 cv
206.932 392.501 206.812 392.381 206.572 392.261 cv
206.332 392.141 205.972 392.021 205.612 392.021 cv
204.892 392.621 li
205.012 393.341 205.132 394.061 205.132 394.661 cv
205.252 395.261 205.132 395.981 204.892 396.821 cv
204.532 396.701 li
204.412 396.101 204.412 395.381 204.172 394.541 cv
204.052 393.581 203.572 392.381 202.852 390.821 cv
cp
207.412 386.381 mo
209.212 386.141 li
209.092 386.381 208.972 386.621 209.092 386.981 cv
209.092 387.221 209.092 387.461 208.972 387.701 cv
211.252 385.421 li
211.372 384.221 li
213.292 384.461 li
210.772 386.861 li
211.732 386.261 212.332 386.021 212.572 386.261 cv
212.812 386.621 212.932 386.861 212.932 387.101 cv
212.932 387.341 212.812 387.461 212.812 387.581 cv
212.692 387.701 212.452 387.701 212.212 387.581 cv
211.972 387.581 211.732 387.461 211.492 387.461 cv
211.252 387.341 210.892 387.341 210.292 387.341 cv
209.332 388.421 li
209.332 388.781 209.332 389.141 209.332 389.501 cv
209.332 389.981 209.332 390.461 209.332 390.941 cv
208.852 391.061 li
208.732 390.221 208.492 389.261 208.132 388.301 cv
207.892 387.341 207.652 386.741 207.412 386.381 cv
cp
220.372 375.341 mo
220.252 374.861 li
221.452 374.261 222.292 373.901 222.772 373.901 cv
223.252 373.781 223.612 373.781 223.852 374.141 cv
223.972 374.261 224.092 374.501 224.332 374.861 cv
224.452 375.101 224.452 375.341 224.332 375.461 cv
224.092 375.701 223.852 375.701 223.372 375.461 cv
222.652 375.341 221.692 375.221 220.372 375.341 cv
cp
220.852 379.421 mo
220.012 378.581 218.932 377.501 217.612 376.181 cv
219.892 375.341 li
219.772 376.301 li
221.812 378.341 li
224.812 375.461 li
224.812 373.901 li
227.212 374.141 li
222.772 378.461 li
226.012 380.141 229.132 380.141 232.132 378.581 cv
232.492 378.941 li
231.892 379.661 231.652 380.261 231.892 380.741 cv
228.292 381.461 225.052 380.861 222.292 378.941 cv
226.372 382.901 228.652 385.181 229.372 385.781 cv
228.652 387.221 li
226.972 385.541 224.812 383.381 222.172 380.741 cv
223.492 384.101 223.612 387.461 222.772 390.701 cv
222.292 390.701 li
222.652 387.341 222.292 383.861 220.972 380.261 cv
218.212 383.021 li
217.852 383.381 217.492 383.861 217.252 384.341 cv
216.052 384.221 li
cp
238.492 374.741 mo
239.812 371.381 li
240.292 371.621 li
239.812 373.781 239.452 375.461 239.332 376.541 cv
237.772 376.421 li
237.772 376.061 237.532 375.701 237.292 375.341 cv
235.612 373.781 li
235.492 375.101 234.892 376.541 234.052 378.221 cv
233.572 377.981 li
234.172 376.301 234.532 374.861 234.652 373.541 cv
234.772 372.221 234.772 370.901 234.652 369.701 cv
231.892 372.581 li
231.412 372.941 231.172 373.421 230.812 373.901 cv
229.732 373.781 li
234.412 368.981 li
233.332 367.901 li
231.772 369.581 li
231.292 369.941 231.052 370.301 230.692 370.781 cv
229.612 370.661 li
232.852 367.421 li
231.892 366.341 li
229.372 368.741 li
229.012 369.101 228.652 369.581 228.412 370.061 cv
227.212 369.941 li
231.292 365.861 li
230.812 365.261 230.212 364.781 229.612 364.181 cv
231.532 363.461 li
231.532 364.181 li
232.252 364.901 li
235.012 362.141 li
235.012 360.701 li
237.292 360.941 li
232.732 365.381 li
233.812 366.461 li
235.972 364.301 li
235.972 362.981 li
238.012 363.221 li
234.292 366.941 li
235.372 368.021 li
238.612 364.781 li
238.612 363.341 li
240.892 363.461 li
235.852 368.621 li
236.812 368.981 237.772 369.221 238.852 369.461 cv
238.972 368.021 238.972 366.821 238.732 365.621 cv
240.652 365.741 li
240.172 366.341 li
239.932 367.661 239.692 368.741 239.452 369.581 cv
240.412 369.701 241.372 369.581 242.212 369.221 cv
243.172 368.981 244.132 368.381 245.212 367.541 cv
245.572 367.901 li
245.212 368.501 244.972 369.101 245.212 369.701 cv
243.772 370.301 242.332 370.661 240.892 370.661 cv
239.332 370.781 237.532 370.301 235.612 369.221 cv
235.852 370.181 235.972 371.141 235.972 372.221 cv
cp
246.412 353.981 mo
244.972 352.421 243.892 351.341 243.292 350.741 cv
245.212 350.021 li
245.332 350.861 li
246.052 351.581 246.772 352.301 247.372 353.021 cv
249.532 350.981 li
249.412 349.661 li
251.572 349.901 li
247.852 353.501 li
248.332 354.101 248.692 354.701 249.052 355.421 cv
250.012 355.061 250.972 354.821 251.932 354.701 cv
253.012 354.581 253.732 354.461 254.092 354.581 cv
254.452 354.701 254.692 354.821 254.932 354.941 cv
255.052 355.181 255.172 355.301 255.292 355.661 cv
255.292 355.901 255.292 356.141 255.172 356.261 cv
255.052 356.381 254.692 356.381 254.212 356.141 cv
253.612 356.021 252.772 355.901 251.812 355.781 cv
250.852 355.781 250.012 355.781 249.292 355.901 cv
250.132 357.821 250.012 360.101 249.052 362.621 cv
248.572 362.501 li
249.412 359.381 248.812 356.741 246.892 354.461 cv
245.452 356.021 li
245.092 356.381 244.732 356.861 244.372 357.341 cv
243.292 357.101 li
cp
238.612 356.141 mo
238.492 355.661 li
239.452 355.301 240.172 355.181 240.772 355.181 cv
241.252 355.181 241.612 355.301 241.972 355.541 cv
242.212 355.901 242.212 356.141 242.212 356.381 cv
242.212 356.621 242.092 356.741 242.092 356.861 cv
241.852 357.101 241.372 356.981 240.892 356.621 cv
240.292 356.381 239.452 356.141 238.612 356.141 cv
cp
247.852 362.501 mo
248.332 362.501 248.932 362.501 249.772 362.261 cv
250.492 362.141 251.452 361.541 252.412 360.581 cv
253.372 359.741 254.212 358.781 255.052 357.941 cv
255.892 357.101 256.612 356.261 257.452 355.301 cv
257.932 355.661 li
257.452 356.381 257.332 356.981 257.692 357.461 cv
256.132 358.901 254.932 360.101 253.972 360.941 cv
253.012 361.781 252.172 362.501 251.332 362.861 cv
250.492 363.221 249.652 363.341 248.932 363.221 cv
248.212 363.221 247.732 363.221 247.732 363.221 cv
247.612 363.221 247.612 363.461 247.612 364.061 cv
247.612 364.661 247.732 365.381 247.972 366.341 cv
246.532 366.341 li
246.652 365.261 246.772 364.181 246.892 363.341 cv
243.292 359.741 li
243.052 359.981 li
242.692 360.341 242.332 360.701 242.092 361.181 cv
240.892 361.061 li
242.812 359.261 li
242.812 358.181 li
244.492 358.181 li
244.372 358.901 li
cp
261.412 349.541 mo
263.452 346.301 li
264.052 346.661 li
262.612 349.181 261.772 350.981 261.292 352.061 cv
260.692 353.141 260.452 353.861 260.452 354.221 cv
258.652 353.981 li
259.492 352.661 260.212 351.581 260.812 350.621 cv
257.452 347.381 li
256.852 347.981 li
256.492 348.341 256.132 348.821 255.772 349.301 cv
254.692 349.181 li
258.412 345.341 li
258.532 344.021 li
260.692 344.141 li
258.412 346.421 li
cp
257.212 337.541 mo
258.172 337.061 258.892 336.821 259.372 336.701 cv
259.852 336.701 260.212 336.701 260.452 337.061 cv
260.572 337.301 260.692 337.541 260.692 337.781 cv
260.692 338.021 260.692 338.141 260.572 338.261 cv
260.452 338.501 260.092 338.501 259.732 338.261 cv
259.132 338.021 258.412 338.021 257.452 338.021 cv
cp
256.972 338.861 mo
257.692 339.581 258.292 340.181 258.772 340.541 cv
260.692 338.621 li
260.692 337.061 li
263.092 337.181 li
259.252 341.021 li
260.812 342.341 262.252 343.301 263.332 343.901 cv
264.412 344.381 265.372 344.741 266.212 344.861 cv
267.052 344.861 267.772 344.861 268.492 344.501 cv
268.012 343.901 267.412 343.061 266.572 342.101 cv
267.172 341.621 li
268.372 342.821 269.212 343.661 269.692 343.901 cv
270.052 344.261 270.412 344.381 270.772 344.501 cv
271.012 344.621 271.012 344.861 270.892 344.981 cv
270.652 345.221 270.292 345.461 269.452 345.821 cv
268.612 346.181 267.652 346.301 266.572 346.301 cv
265.492 346.301 264.172 345.821 262.852 345.221 cv
261.532 344.501 259.972 343.421 258.292 341.981 cv
254.452 345.821 li
254.092 346.301 253.732 346.661 253.492 347.141 cv
252.292 347.021 li
257.812 341.501 li
256.972 340.781 256.012 339.821 254.932 338.861 cv
257.092 338.141 li
cp
f
grestore
gsave
501.772 150.221 mo
501.652 150.341 li
233.572 418.421 li
264.772 418.541 li
264.772 418.421 li
517.492 165.701 li
502.012 150.221 li
cp
eclp
269.092 389.861 mo
270.892 391.781 li
271.852 390.821 li
270.052 389.021 li
cp
270.892 388.061 mo
272.692 389.981 li
273.772 388.901 li
271.852 387.101 li
cp
272.812 386.261 mo
274.612 388.061 li
275.572 387.101 li
273.772 385.181 li
cp
273.892 394.421 mo
273.772 393.821 li
274.972 393.461 275.692 393.221 276.052 393.341 cv
276.292 393.461 276.532 393.461 276.532 393.581 cv
276.652 393.701 276.772 393.941 276.892 394.301 cv
277.012 394.661 277.012 394.901 276.892 395.021 cv
276.772 395.141 276.412 395.021 275.932 394.781 cv
275.452 394.661 274.732 394.421 273.892 394.421 cv
cp
274.252 390.821 mo
274.252 391.301 274.252 391.661 274.132 392.021 cv
276.772 389.381 li
276.652 388.421 li
278.572 388.421 li
278.212 389.261 li
279.172 392.621 278.572 395.861 276.412 398.981 cv
275.932 398.741 li
277.492 395.741 277.972 392.741 277.132 389.981 cv
274.372 392.861 li
274.372 394.181 274.012 395.501 273.532 397.061 cv
273.052 396.941 li
273.292 395.621 273.292 394.421 273.172 393.341 cv
273.172 392.141 273.052 391.421 272.932 390.821 cv
271.492 392.261 li
271.732 392.621 li
271.132 393.821 li
270.412 393.101 269.812 392.381 269.212 391.781 cv
268.612 391.181 267.892 390.581 267.172 389.861 cv
268.492 389.501 li
273.292 384.701 li
273.172 383.741 li
274.732 383.741 li
274.732 384.461 li
275.932 385.541 276.772 386.381 277.252 386.741 cv
276.652 388.061 li
276.172 387.581 li
273.292 390.341 li
274.612 390.101 li
cp
264.772 393.101 mo
264.772 392.621 li
265.852 392.381 266.572 392.261 267.052 392.261 cv
267.412 392.261 267.772 392.381 268.012 392.621 cv
268.132 392.861 268.252 393.221 268.372 393.461 cv
268.372 393.821 268.252 394.061 268.252 394.061 cv
268.012 394.301 267.652 394.301 267.172 393.941 cv
266.572 393.581 265.732 393.341 264.772 393.101 cv
cp
274.372 398.981 mo
274.852 399.101 275.572 398.981 276.292 398.741 cv
277.132 398.501 278.212 397.781 279.532 396.461 cv
280.852 395.141 282.292 393.581 283.852 391.781 cv
284.212 392.141 li
283.852 392.861 283.732 393.461 284.092 393.941 cv
282.652 395.381 281.452 396.581 280.372 397.421 cv
279.412 398.261 278.572 398.861 277.852 399.221 cv
277.012 399.581 276.292 399.701 275.572 399.701 cv
274.852 399.701 274.492 399.821 274.372 399.941 cv
274.132 399.941 274.132 400.421 274.132 401.021 cv
274.132 401.741 274.252 402.341 274.372 402.701 cv
272.692 402.821 li
272.812 401.741 273.172 400.781 273.412 399.821 cv
269.812 396.221 li
269.452 396.461 li
269.092 396.821 268.732 397.301 268.492 397.661 cv
267.292 397.541 li
269.212 395.741 li
269.092 394.781 li
270.772 394.661 li
270.772 395.381 li
cp
282.892 383.861 mo
282.172 383.141 281.452 382.541 280.852 381.941 cv
282.652 381.341 li
282.772 381.941 li
283.732 383.021 li
283.972 382.781 li
283.972 381.701 li
285.772 381.941 li
284.212 383.501 li
285.772 385.061 li
287.092 382.661 li
287.572 383.141 li
286.372 385.661 li
287.812 387.101 288.772 388.061 289.372 388.541 cv
288.772 389.861 li
287.452 388.541 286.492 387.461 285.772 386.861 cv
285.292 388.061 285.052 389.021 284.932 389.501 cv
283.252 388.901 li
283.612 388.661 284.212 387.701 285.172 386.141 cv
283.372 384.341 li
282.172 385.541 li
282.172 386.141 li
280.492 386.261 li
280.732 385.541 li
279.532 382.421 li
279.172 382.661 278.932 383.021 278.692 383.501 cv
277.492 383.381 li
279.052 381.821 li
278.332 380.381 277.852 379.541 277.372 379.061 cv
279.292 378.461 li
279.292 379.301 li
279.532 379.781 279.772 380.381 280.012 380.861 cv
280.972 380.021 li
280.972 378.821 li
282.892 379.061 li
280.372 381.581 li
281.812 384.941 li
cp
284.212 380.141 mo
283.612 379.421 283.012 378.821 282.532 378.341 cv
281.932 377.741 281.332 377.141 280.732 376.541 cv
282.052 376.181 li
284.572 373.661 li
284.572 372.581 li
286.132 372.581 li
286.012 373.301 li
286.732 374.021 287.452 374.621 288.052 375.221 cv
287.452 376.541 li
286.852 375.941 li
284.332 378.341 li
284.932 378.941 li
cp
282.532 376.661 mo
283.852 377.861 li
286.372 375.461 li
285.052 374.141 li
cp
293.452 380.741 mo
294.292 381.461 294.892 382.061 295.372 382.541 cv
294.772 383.861 li
293.932 382.901 293.212 382.181 292.612 381.581 cv
288.892 385.781 li
288.652 386.501 li
287.332 386.501 li
289.012 384.701 li
284.932 380.621 li
284.692 380.741 284.452 381.101 284.212 381.581 cv
283.012 381.461 li
288.772 375.581 li
288.892 374.501 li
290.812 374.741 li
289.132 376.301 li
292.852 380.141 li
293.212 379.901 li
293.212 378.581 li
295.132 378.821 li
cp
285.772 379.661 mo
286.612 380.621 li
289.132 378.101 li
288.292 377.261 li
cp
287.212 381.101 mo
288.052 381.941 li
290.452 379.421 li
289.612 378.581 li
cp
288.532 382.421 mo
289.732 383.621 li
292.132 381.101 li
291.052 380.021 li
cp
301.252 374.741 mo
302.452 371.381 li
303.052 371.621 li
302.452 373.781 302.092 375.461 301.972 376.541 cv
300.412 376.421 li
300.412 376.061 300.292 375.701 299.932 375.341 cv
298.252 373.781 li
298.132 375.101 297.652 376.541 296.692 378.221 cv
296.332 377.981 li
296.932 376.301 297.292 374.861 297.412 373.541 cv
297.532 372.221 297.532 370.901 297.412 369.701 cv
294.532 372.581 li
294.172 372.941 293.812 373.421 293.572 373.901 cv
292.372 373.781 li
297.172 368.981 li
296.092 367.901 li
294.412 369.581 li
294.052 369.941 293.692 370.301 293.452 370.781 cv
292.252 370.661 li
295.612 367.421 li
294.532 366.341 li
292.132 368.741 li
291.772 369.101 291.412 369.581 291.172 370.061 cv
289.972 369.941 li
294.052 365.861 li
293.572 365.261 292.972 364.781 292.372 364.181 cv
294.292 363.461 li
294.292 364.181 li
295.012 364.901 li
297.772 362.141 li
297.772 360.701 li
299.932 360.941 li
295.492 365.381 li
296.572 366.461 li
298.612 364.301 li
298.612 362.981 li
300.772 363.221 li
297.052 366.941 li
298.132 368.021 li
301.372 364.781 li
301.372 363.341 li
303.652 363.461 li
298.612 368.621 li
299.572 368.981 300.532 369.221 301.492 369.461 cv
301.732 368.021 301.612 366.821 301.372 365.621 cv
303.412 365.741 li
302.932 366.341 li
302.572 367.661 302.332 368.741 302.092 369.581 cv
303.172 369.701 304.132 369.581 304.972 369.221 cv
305.932 368.981 306.892 368.381 307.972 367.541 cv
308.332 367.901 li
307.852 368.501 307.732 369.101 307.852 369.701 cv
306.532 370.301 305.092 370.661 303.532 370.661 cv
301.972 370.781 300.292 370.301 298.372 369.221 cv
298.612 370.181 298.732 371.141 298.732 372.221 cv
cp
309.172 353.981 mo
307.732 352.421 306.652 351.341 305.932 350.741 cv
307.972 350.021 li
308.092 350.861 li
308.812 351.581 309.532 352.301 310.132 353.021 cv
312.172 350.981 li
312.172 349.661 li
314.332 349.901 li
310.612 353.501 li
311.092 354.101 311.452 354.701 311.812 355.421 cv
312.652 355.061 313.612 354.821 314.692 354.701 cv
315.652 354.581 316.372 354.461 316.732 354.581 cv
317.092 354.701 317.452 354.821 317.572 354.941 cv
317.812 355.181 317.932 355.301 317.932 355.661 cv
318.052 355.901 318.052 356.141 317.932 356.261 cv
317.812 356.381 317.452 356.381 316.852 356.141 cv
316.252 356.021 315.532 355.901 314.572 355.781 cv
313.612 355.781 312.772 355.781 312.052 355.901 cv
312.892 357.821 312.772 360.101 311.812 362.621 cv
311.332 362.501 li
312.052 359.381 311.572 356.741 309.652 354.461 cv
308.092 356.021 li
307.732 356.381 307.372 356.861 307.132 357.341 cv
305.932 357.101 li
cp
301.372 356.141 mo
301.252 355.661 li
302.212 355.301 302.932 355.181 303.412 355.181 cv
304.012 355.181 304.372 355.301 304.612 355.541 cv
304.852 355.901 304.972 356.141 304.972 356.381 cv
304.852 356.621 304.852 356.741 304.732 356.861 cv
304.492 357.101 304.132 356.981 303.532 356.621 cv
302.932 356.381 302.212 356.141 301.372 356.141 cv
cp
310.612 362.501 mo
311.092 362.501 311.692 362.501 312.412 362.261 cv
313.252 362.141 314.092 361.541 315.052 360.581 cv
316.132 359.741 316.972 358.781 317.812 357.941 cv
318.532 357.101 319.372 356.261 320.212 355.301 cv
320.572 355.661 li
320.212 356.381 320.092 356.981 320.332 357.461 cv
318.892 358.901 317.572 360.101 316.732 360.941 cv
315.772 361.781 314.812 362.501 313.972 362.861 cv
313.132 363.221 312.412 363.341 311.572 363.221 cv
310.852 363.221 310.492 363.221 310.372 363.221 cv
310.372 363.221 310.252 363.461 310.372 364.061 cv
310.372 364.661 310.492 365.381 310.732 366.341 cv
309.172 366.341 li
309.292 365.261 309.412 364.181 309.532 363.341 cv
306.052 359.741 li
305.812 359.981 li
305.452 360.341 305.092 360.701 304.852 361.181 cv
303.652 361.061 li
305.452 359.261 li
305.452 358.181 li
307.252 358.181 li
307.012 358.901 li
cp
324.172 349.541 mo
326.212 346.301 li
326.692 346.661 li
325.372 349.181 324.412 350.981 323.932 352.061 cv
323.452 353.141 323.212 353.861 323.212 354.221 cv
321.412 353.981 li
322.252 352.661 322.972 351.581 323.452 350.621 cv
320.212 347.381 li
319.492 347.981 li
319.132 348.341 318.772 348.821 318.532 349.301 cv
317.332 349.181 li
321.172 345.341 li
321.172 344.021 li
323.332 344.141 li
321.052 346.421 li
cp
319.972 337.541 mo
320.932 337.061 321.652 336.821 322.012 336.701 cv
322.492 336.701 322.852 336.701 323.092 337.061 cv
323.332 337.301 323.452 337.541 323.452 337.781 cv
323.452 338.021 323.452 338.141 323.332 338.261 cv
323.092 338.501 322.852 338.501 322.372 338.261 cv
321.892 338.021 321.172 338.021 320.092 338.021 cv
cp
319.732 338.861 mo
320.452 339.581 321.052 340.181 321.412 340.541 cv
323.332 338.621 li
323.452 337.061 li
325.852 337.181 li
322.012 341.021 li
323.572 342.341 324.892 343.301 326.092 343.901 cv
327.172 344.381 328.132 344.741 328.972 344.861 cv
329.812 344.861 330.532 344.861 331.132 344.501 cv
330.772 343.901 330.172 343.061 329.332 342.101 cv
329.812 341.621 li
331.012 342.821 331.852 343.661 332.332 343.901 cv
332.812 344.261 333.172 344.381 333.412 344.501 cv
333.772 344.621 333.772 344.861 333.532 344.981 cv
333.412 345.221 332.932 345.461 332.212 345.821 cv
331.372 346.181 330.412 346.301 329.332 346.301 cv
328.132 346.301 326.932 345.821 325.612 345.221 cv
324.172 344.501 322.732 343.421 321.052 341.981 cv
317.212 345.821 li
316.732 346.301 316.492 346.661 316.132 347.141 cv
315.052 347.021 li
320.452 341.501 li
319.612 340.781 318.652 339.821 317.692 338.861 cv
319.732 338.141 li
cp
f
grestore
gsave
528.412 186.341 mo
528.292 186.461 li
296.332 418.421 li
327.532 418.541 li
327.532 418.421 li
543.892 202.061 li
544.012 201.821 li
528.532 186.341 li
cp
eclp
344.212 378.581 mo
346.252 376.541 li
346.252 375.581 li
347.932 375.821 li
346.132 377.741 li
345.892 377.861 345.652 378.221 345.292 378.701 cv
cp
347.812 373.181 mo
348.772 372.941 349.492 372.821 349.732 372.941 cv
350.092 372.941 350.332 373.061 350.452 373.181 cv
350.692 373.301 350.692 373.541 350.812 373.781 cv
350.812 374.141 350.812 374.261 350.812 374.381 cv
350.572 374.501 350.332 374.501 349.852 374.261 cv
349.252 373.901 348.652 373.781 347.812 373.661 cv
cp
357.652 380.861 mo
356.332 378.941 li
356.932 378.701 li
357.772 379.541 358.372 380.021 358.612 380.261 cv
358.852 380.501 359.092 380.621 359.452 380.861 cv
359.692 380.981 359.692 381.221 359.452 381.461 cv
359.332 381.581 359.092 381.701 358.612 381.941 cv
358.132 382.061 357.292 381.941 356.212 381.701 cv
355.132 381.341 354.172 380.981 353.212 380.261 cv
352.252 379.661 351.172 378.701 349.852 377.621 cv
347.572 380.021 li
347.332 380.261 346.972 380.621 346.732 381.101 cv
345.532 380.981 li
349.372 377.141 li
348.172 376.061 346.972 374.861 345.652 373.661 cv
347.452 373.061 li
347.572 373.661 li
348.292 374.381 349.132 375.341 350.212 376.301 cv
351.292 375.221 li
351.412 374.141 li
353.212 374.261 li
350.692 376.781 li
351.892 377.861 353.092 378.821 354.292 379.541 cv
355.492 380.261 356.692 380.621 357.652 380.861 cv
cp
353.572 383.261 mo
354.412 381.461 li
354.892 381.821 li
354.652 382.421 354.412 383.381 353.932 384.461 cv
353.452 385.661 353.212 386.621 353.092 387.221 cv
351.532 386.981 li
352.012 386.141 li
349.852 383.981 348.412 382.541 347.692 381.941 cv
349.492 381.461 li
349.492 382.181 li
352.612 385.181 li
352.972 384.341 li
350.452 381.701 348.772 380.021 347.932 379.301 cv
349.732 378.821 li
349.732 379.541 li
351.052 380.741 li
351.052 379.781 li
352.852 380.021 li
351.532 381.221 li
cp
348.172 386.741 mo
349.252 386.261 350.092 386.141 350.572 386.141 cv
350.932 386.141 351.292 386.261 351.412 386.381 cv
351.532 386.501 351.652 386.741 351.652 386.981 cv
351.772 387.341 351.652 387.461 351.652 387.581 cv
351.412 387.701 351.172 387.701 350.932 387.581 cv
350.452 387.461 350.092 387.341 349.732 387.341 cv
349.372 387.221 348.892 387.221 348.292 387.221 cv
cp
346.372 388.661 mo
345.772 387.941 344.572 386.741 342.892 385.061 cv
341.212 383.381 340.012 382.181 339.292 381.581 cv
340.492 381.221 li
342.412 379.301 li
342.412 378.461 li
343.852 378.461 li
343.852 379.181 li
346.492 381.821 348.292 383.621 349.132 384.341 cv
348.652 385.541 li
342.892 379.781 li
341.092 381.581 li
346.972 387.461 li
cp
342.052 381.701 mo
343.612 381.101 li
343.732 381.701 li
346.012 383.981 li
348.532 386.381 349.612 389.021 349.372 392.021 cv
348.892 391.901 li
348.652 389.501 347.692 387.341 345.892 385.541 cv
344.092 383.741 342.772 382.421 342.052 381.701 cv
cp
361.252 374.981 mo
362.452 376.061 363.172 376.901 363.652 377.261 cv
362.932 378.461 li
361.732 377.261 361.012 376.421 360.652 376.061 cv
356.212 371.741 li
356.692 372.941 356.932 374.141 356.932 375.341 cv
356.452 375.461 li
356.092 373.901 355.612 372.341 355.012 370.781 cv
354.292 369.221 353.572 367.781 352.852 366.461 cv
354.772 366.101 li
354.652 366.941 li
355.372 368.501 355.732 369.581 355.972 370.061 cv
356.812 369.821 li
356.812 370.541 li
cp
359.212 368.021 mo
360.412 369.101 li
363.652 365.861 li
362.452 364.661 li
cp
360.892 369.701 mo
361.972 370.781 li
365.212 367.541 li
364.132 366.341 li
cp
362.572 371.261 mo
363.652 372.461 li
366.892 369.221 li
365.812 368.021 li
cp
364.132 372.941 mo
365.332 374.021 li
368.572 370.781 li
367.372 369.701 li
cp
358.012 364.901 mo
357.412 364.181 356.812 363.581 356.212 363.101 cv
358.252 362.381 li
358.132 363.101 li
358.972 363.941 li
360.772 362.141 li
360.892 360.821 li
363.052 360.941 li
359.452 364.541 li
360.532 365.621 li
361.972 364.181 li
361.852 363.221 li
363.532 363.221 li
363.412 363.941 li
369.412 369.941 li
369.652 369.701 li
369.652 368.381 li
371.812 368.501 li
364.852 375.461 li
364.492 375.821 364.132 376.301 363.892 376.781 cv
362.692 376.661 li
364.372 374.981 li
359.452 369.941 li
359.092 369.581 358.372 368.861 357.292 368.021 cv
358.612 367.541 li
359.572 366.581 li
358.612 365.381 li
357.292 366.701 li
356.932 367.061 356.572 367.421 356.332 367.901 cv
355.132 367.781 li
cp
374.932 358.781 mo
377.212 361.061 li
380.572 357.821 li
378.292 355.421 li
cp
366.892 354.461 mo
372.052 349.421 li
372.052 347.981 li
374.092 348.221 li
370.492 351.821 li
371.572 353.381 li
373.252 351.701 li
373.132 350.861 li
374.572 350.501 li
374.692 351.221 li
376.372 353.021 li
376.852 352.541 li
376.972 351.221 li
378.892 351.461 li
372.412 357.941 li
372.172 358.301 371.812 358.661 371.572 359.141 cv
370.372 359.021 li
372.532 356.861 li
371.092 354.821 li
370.732 355.301 li
370.612 355.301 370.492 355.541 370.132 356.021 cv
369.052 355.901 li
370.732 354.221 li
369.532 352.781 li
368.932 353.381 li
368.572 353.741 368.332 354.101 367.972 354.581 cv
cp
372.052 353.861 mo
373.492 355.901 li
375.532 353.981 li
373.732 352.181 li
cp
379.252 354.701 mo
380.692 356.021 381.652 357.101 382.492 357.701 cv
381.772 359.021 li
381.052 358.301 li
377.692 361.541 li
378.292 362.141 li
377.692 363.461 li
377.092 362.861 376.372 362.021 375.532 361.181 cv
374.572 360.341 373.732 359.501 373.012 358.781 cv
374.332 358.421 li
377.692 354.941 li
377.572 354.101 li
379.252 353.981 li
cp
364.012 356.741 mo
364.012 356.261 li
364.972 356.021 365.692 355.901 366.052 355.901 cv
366.412 355.901 366.652 356.021 367.012 356.261 cv
367.252 356.381 367.372 356.741 367.372 356.981 cv
367.372 357.341 367.372 357.581 367.252 357.701 cv
367.132 357.821 366.772 357.821 366.292 357.581 cv
365.812 357.221 365.092 356.981 364.012 356.741 cv
cp
372.892 364.781 mo
373.012 364.421 372.892 364.181 372.532 363.821 cv
368.692 359.981 li
368.452 360.101 li
368.332 360.341 367.972 360.701 367.612 361.301 cv
366.532 361.181 li
368.092 359.501 li
367.972 358.541 li
369.532 358.421 li
369.532 359.141 li
373.492 362.981 li
373.612 360.461 li
374.212 360.581 li
374.332 361.661 374.332 362.501 374.452 363.101 cv
374.452 363.581 374.452 364.181 374.572 364.781 cv
cp
382.492 346.661 mo
384.652 348.821 li
387.532 346.061 li
385.372 343.781 li
cp
386.332 342.941 mo
387.892 344.621 li
388.492 345.101 388.972 345.581 389.332 345.821 cv
388.612 347.141 li
388.012 346.541 li
385.252 349.301 li
385.852 350.021 li
385.252 351.341 li
384.532 350.621 383.812 349.781 383.092 349.061 cv
382.372 348.341 381.532 347.501 380.572 346.661 cv
381.892 346.181 li
384.772 343.301 li
384.772 342.221 li
386.452 342.341 li
cp
379.612 341.141 mo
379.372 341.861 li
379.612 342.461 379.612 342.941 379.732 343.421 cv
385.612 337.421 li
385.612 336.341 li
387.172 336.461 li
387.172 337.061 li
390.652 340.541 392.692 342.701 393.292 343.541 cv
394.012 344.381 394.252 345.101 394.252 345.701 cv
394.252 346.301 394.012 347.141 393.412 347.981 cv
392.932 347.501 391.852 347.621 390.412 348.341 cv
390.052 347.861 li
391.612 346.901 392.452 346.301 392.692 346.061 cv
392.932 345.701 392.812 345.221 392.452 344.501 cv
392.092 343.901 389.932 341.621 386.092 337.901 cv
379.972 344.141 li
380.332 345.821 380.332 347.861 379.972 349.901 cv
379.492 349.781 li
379.492 347.981 379.252 346.421 378.892 345.101 cv
378.532 343.781 378.052 342.581 377.572 341.501 cv
cp
f
grestore
gsave
591.052 186.341 mo
590.932 186.461 li
358.972 418.421 li
390.292 418.541 li
390.292 418.421 li
606.772 201.941 li
591.172 186.341 li
cp
eclp
402.292 380.741 mo
404.092 380.021 li
404.212 380.861 li
405.052 381.821 406.132 382.781 407.212 383.861 cv
408.292 384.941 409.252 386.021 410.092 387.101 cv
410.932 388.061 411.532 389.621 411.772 391.541 cv
411.292 391.661 li
410.692 389.981 409.732 388.301 408.292 386.741 cv
406.852 385.181 405.892 384.221 405.292 383.621 cv
404.692 383.021 403.732 382.061 402.292 380.741 cv
cp
412.012 387.581 mo
410.692 386.261 409.372 385.061 408.292 383.861 cv
407.212 382.781 406.012 381.581 404.932 380.501 cv
406.612 379.901 li
406.612 380.621 li
410.812 384.701 li
411.172 385.061 411.652 385.541 412.372 386.261 cv
cp
412.492 383.501 mo
413.932 384.821 414.892 385.901 415.492 386.381 cv
415.012 387.701 li
414.532 387.101 413.692 386.261 412.612 385.181 cv
408.172 380.741 li
406.612 379.301 405.652 378.341 405.052 377.741 cv
406.852 377.261 li
406.852 377.861 li
cp
414.532 384.341 mo
413.572 383.261 412.492 382.181 411.532 381.221 cv
410.572 380.261 409.612 379.301 408.532 378.341 cv
409.852 377.981 li
410.572 377.141 li
409.972 376.181 409.612 375.581 409.492 375.461 cv
408.772 376.181 li
408.412 376.541 408.052 377.021 407.692 377.381 cv
406.612 377.261 li
411.172 372.701 li
411.172 371.501 li
413.212 371.621 li
410.452 374.381 li
410.452 374.741 410.692 375.461 411.172 376.541 cv
412.972 374.741 li
412.732 373.901 li
414.412 373.661 li
414.412 374.381 li
416.932 376.901 li
417.532 377.381 418.132 378.101 418.972 378.821 cv
418.492 380.141 li
413.572 375.221 li
410.452 378.341 li
415.012 383.021 li
cp
413.812 377.021 mo
413.932 377.741 li
414.532 378.461 415.252 379.301 416.092 380.141 cv
416.932 381.101 417.412 382.181 417.532 383.261 cv
417.652 384.461 417.172 385.901 416.212 387.821 cv
415.852 387.701 li
416.452 385.781 416.692 384.461 416.452 383.501 cv
416.332 382.541 415.852 381.581 414.892 380.621 cv
414.052 379.661 412.972 378.701 412.012 377.741 cv
cp
416.812 380.981 mo
418.732 380.261 420.052 380.021 420.412 380.021 cv
420.892 380.021 421.252 380.261 421.492 380.501 cv
421.732 380.621 421.852 380.861 421.972 381.101 cv
422.092 381.461 422.092 381.581 421.972 381.701 cv
421.972 381.821 421.612 381.821 421.252 381.821 cv
420.772 381.581 420.292 381.461 419.692 381.461 cv
419.212 381.341 418.252 381.341 416.932 381.461 cv
cp
415.492 368.981 mo
416.812 368.501 li
423.412 361.901 li
423.412 360.341 li
425.812 360.581 li
417.412 368.981 li
418.492 370.061 419.452 371.021 420.412 371.981 cv
421.252 373.061 422.092 374.141 422.812 375.341 cv
423.412 376.541 423.892 377.981 424.132 379.781 cv
423.652 379.901 li
423.052 378.221 422.452 376.781 421.732 375.701 cv
421.012 374.621 420.172 373.661 419.092 372.581 cv
418.012 371.501 416.812 370.301 415.492 368.981 cv
cp
418.012 364.061 mo
418.852 363.581 419.572 363.341 419.932 363.341 cv
420.412 363.221 420.652 363.341 420.892 363.701 cv
421.012 363.941 421.132 364.301 421.012 364.541 cv
420.892 364.901 420.532 364.901 420.052 364.661 cv
419.572 364.541 418.972 364.421 418.132 364.541 cv
cp
426.892 374.261 mo
427.612 373.781 428.092 373.421 428.332 373.181 cv
428.572 372.941 428.572 372.701 428.332 372.341 cv
425.092 369.101 li
422.932 371.261 li
422.572 371.741 422.212 372.101 421.972 372.581 cv
420.772 372.461 li
424.732 368.501 li
424.612 368.381 424.252 368.381 423.652 368.261 cv
423.172 368.261 422.572 368.261 421.972 368.381 cv
421.732 367.901 li
422.452 367.541 423.172 367.181 423.892 367.061 cv
424.492 364.181 li
420.892 367.781 li
420.532 368.261 420.172 368.621 419.932 369.101 cv
418.732 368.981 li
424.132 363.581 li
424.252 362.501 li
426.412 362.861 li
425.932 363.221 425.572 363.821 425.332 364.421 cv
425.092 365.021 424.852 365.861 424.612 366.941 cv
424.852 366.941 425.092 367.061 425.332 367.301 cv
425.452 367.541 425.452 367.781 425.332 367.901 cv
427.852 365.381 li
427.852 364.301 li
430.012 364.421 li
429.412 365.021 429.172 365.981 429.412 367.421 cv
428.812 367.661 li
428.332 365.861 li
426.052 368.261 li
429.412 371.621 li
430.012 372.341 430.132 373.181 429.652 374.261 cv
429.172 374.021 428.452 374.141 427.492 374.741 cv
cp
437.692 358.781 mo
439.972 361.061 li
443.212 357.821 li
440.932 355.421 li
cp
429.532 354.461 mo
434.692 349.421 li
434.812 347.981 li
436.852 348.221 li
433.252 351.821 li
434.332 353.381 li
436.012 351.701 li
435.772 350.861 li
437.332 350.501 li
437.452 351.221 li
439.132 353.021 li
439.612 352.541 li
439.732 351.221 li
441.652 351.461 li
435.172 357.941 li
434.812 358.301 434.572 358.661 434.212 359.141 cv
433.132 359.021 li
435.292 356.861 li
433.852 354.821 li
433.372 355.301 li
433.372 355.301 433.132 355.541 432.892 356.021 cv
431.692 355.901 li
433.372 354.221 li
432.292 352.781 li
431.692 353.381 li
431.332 353.741 430.972 354.101 430.732 354.581 cv
cp
434.812 353.861 mo
436.252 355.901 li
438.172 353.981 li
436.492 352.181 li
cp
442.012 354.701 mo
443.332 356.021 444.412 357.101 445.132 357.701 cv
444.532 359.021 li
443.812 358.301 li
440.452 361.541 li
441.052 362.141 li
440.332 363.461 li
439.852 362.861 439.132 362.021 438.172 361.181 cv
437.332 360.341 436.492 359.501 435.772 358.781 cv
437.092 358.421 li
440.452 354.941 li
440.332 354.101 li
441.892 353.981 li
cp
426.652 356.741 mo
426.772 356.261 li
427.732 356.021 428.332 355.901 428.692 355.901 cv
429.052 355.901 429.412 356.021 429.652 356.261 cv
429.892 356.381 430.132 356.741 430.132 356.981 cv
430.132 357.341 430.132 357.581 430.012 357.701 cv
429.772 357.821 429.532 357.821 429.052 357.581 cv
428.572 357.221 427.732 356.981 426.652 356.741 cv
cp
435.652 364.781 mo
435.652 364.421 435.532 364.181 435.292 363.821 cv
431.452 359.981 li
431.212 360.101 li
430.972 360.341 430.732 360.701 430.372 361.301 cv
429.172 361.181 li
430.852 359.501 li
430.612 358.541 li
432.292 358.421 li
432.292 359.141 li
436.132 362.981 li
436.372 360.461 li
436.972 360.581 li
436.972 361.661 437.092 362.501 437.092 363.101 cv
437.212 363.581 437.212 364.181 437.332 364.781 cv
cp
445.252 346.661 mo
447.412 348.821 li
450.292 346.061 li
448.012 343.781 li
cp
449.092 342.941 mo
450.652 344.621 li
451.252 345.101 451.612 345.581 452.092 345.821 cv
451.372 347.141 li
450.772 346.541 li
447.892 349.301 li
448.612 350.021 li
448.012 351.341 li
447.292 350.621 446.572 349.781 445.852 349.061 cv
445.012 348.341 444.172 347.501 443.212 346.661 cv
444.652 346.181 li
447.532 343.301 li
447.532 342.221 li
449.092 342.341 li
cp
442.372 341.141 mo
442.132 341.861 li
442.252 342.461 442.372 342.941 442.372 343.421 cv
448.372 337.421 li
448.372 336.341 li
449.812 336.461 li
449.812 337.061 li
453.412 340.541 455.452 342.701 456.052 343.541 cv
456.652 344.381 457.012 345.101 457.012 345.701 cv
457.012 346.301 456.652 347.141 456.172 347.981 cv
455.572 347.501 454.612 347.621 453.052 348.341 cv
452.692 347.861 li
454.252 346.901 455.212 346.301 455.452 346.061 cv
455.692 345.701 455.572 345.221 455.212 344.501 cv
454.732 343.901 452.692 341.621 448.852 337.901 cv
442.732 344.141 li
442.972 345.821 442.972 347.861 442.732 349.901 cv
442.252 349.781 li
442.132 347.981 441.892 346.421 441.532 345.101 cv
441.172 343.781 440.812 342.581 440.332 341.501 cv
cp
f
grestore
gsave
653.812 186.341 mo
653.692 186.461 li
421.732 418.421 li
452.932 418.541 li
452.932 418.421 li
669.292 202.061 li
669.412 201.821 li
653.932 186.341 li
cp
eclp
469.012 379.541 mo
469.372 381.101 469.372 382.901 468.892 384.821 cv
468.412 384.821 li
468.532 383.501 468.412 382.061 468.172 380.741 cv
467.812 379.301 467.452 378.221 466.972 377.501 cv
469.012 377.021 li
468.892 377.381 468.772 377.741 468.772 378.221 cv
472.012 374.981 li
472.012 373.901 li
474.052 373.781 li
473.692 374.741 li
474.172 376.181 474.172 377.621 473.932 379.061 cv
475.852 378.581 477.772 377.381 479.572 375.341 cv
480.052 375.701 li
479.572 376.541 479.452 377.021 479.692 377.501 cv
477.532 379.181 475.612 380.141 473.812 380.261 cv
473.332 382.301 472.132 384.701 470.092 387.341 cv
469.492 387.101 li
471.172 384.581 472.252 382.181 472.612 380.261 cv
471.532 380.261 470.332 380.021 469.012 379.541 cv
cp
469.012 378.941 mo
469.012 378.941 li
470.452 379.301 471.772 379.301 472.732 379.181 cv
472.852 377.981 472.732 376.781 472.492 375.581 cv
cp
471.652 386.381 mo
475.372 382.661 li
474.892 382.181 474.292 381.581 473.452 380.861 cv
475.732 380.141 li
475.612 380.981 li
476.332 381.701 li
478.132 379.901 li
478.132 378.701 li
480.292 378.821 li
476.812 382.181 li
479.452 384.821 li
480.052 385.421 480.052 386.261 479.332 387.461 cv
478.852 386.981 478.012 387.101 476.812 387.821 cv
476.332 387.341 li
477.412 386.501 478.012 386.141 478.132 385.901 cv
478.372 385.781 478.252 385.661 478.012 385.301 cv
475.852 383.141 li
473.812 385.181 li
473.452 385.661 473.092 386.021 472.852 386.501 cv
cp
474.172 384.941 mo
476.212 384.941 li
475.972 385.301 475.852 386.021 475.732 387.101 cv
475.732 388.421 475.372 389.861 474.892 391.421 cv
474.292 391.421 li
474.772 388.781 474.652 386.621 474.172 384.941 cv
cp
477.772 381.941 mo
480.172 381.101 481.492 380.741 482.092 380.741 cv
482.572 380.741 482.932 380.861 483.292 381.101 cv
483.412 381.221 483.532 381.461 483.652 381.821 cv
483.892 382.061 483.892 382.301 483.772 382.421 cv
483.652 382.541 483.172 382.541 482.572 382.421 cv
481.612 382.181 480.052 382.181 477.892 382.421 cv
cp
485.572 365.381 mo
484.492 364.301 483.412 363.221 482.332 362.261 cv
484.372 361.541 li
484.372 362.381 li
486.412 364.421 li
487.612 363.221 li
487.732 362.021 li
489.772 362.141 li
487.012 365.021 li
489.412 367.421 li
491.092 365.741 li
491.092 364.421 li
493.252 364.661 li
489.892 367.901 li
492.172 370.181 493.612 371.501 494.092 371.981 cv
493.492 373.421 li
491.932 371.741 490.372 370.301 488.932 368.861 cv
487.132 370.781 li
486.772 371.141 486.412 371.501 486.052 371.981 cv
484.972 371.861 li
488.452 368.381 li
486.052 365.861 li
484.252 367.661 li
484.732 368.861 485.092 369.941 485.212 371.141 cv
484.732 371.261 li
484.252 370.181 483.892 369.221 483.292 368.261 cv
482.812 367.421 482.212 366.461 481.372 365.381 cv
483.292 364.781 li
483.292 365.501 li
483.412 365.981 483.652 366.461 483.892 366.941 cv
cp
488.572 378.221 mo
487.612 377.141 486.772 376.421 486.292 375.821 cv
481.612 371.141 li
482.092 372.941 482.332 374.381 482.332 375.341 cv
481.732 375.341 li
481.612 374.741 481.492 374.021 481.252 373.181 cv
481.132 372.341 480.772 371.261 480.292 370.061 cv
479.812 368.861 479.212 367.541 478.492 366.101 cv
480.532 365.741 li
480.532 366.461 li
480.892 368.021 481.252 369.101 481.372 369.461 cv
482.332 369.341 li
482.332 370.061 li
487.012 374.861 li
487.612 375.341 488.332 376.061 489.172 376.781 cv
cp
500.332 358.781 mo
502.612 361.061 li
505.972 357.821 li
503.692 355.421 li
cp
492.292 354.461 mo
497.452 349.421 li
497.572 347.981 li
499.612 348.221 li
496.012 351.821 li
496.972 353.381 li
498.652 351.701 li
498.532 350.861 li
499.972 350.501 li
500.092 351.221 li
501.892 353.021 li
502.372 352.541 li
502.372 351.221 li
504.412 351.461 li
497.932 357.941 li
497.572 358.301 497.212 358.661 496.972 359.141 cv
495.772 359.021 li
498.052 356.861 li
496.612 354.821 li
496.132 355.301 li
496.012 355.301 495.892 355.541 495.532 356.021 cv
494.452 355.901 li
496.132 354.221 li
495.052 352.781 li
494.332 353.381 li
494.092 353.741 493.732 354.101 493.492 354.581 cv
cp
497.452 353.861 mo
498.892 355.901 li
500.932 353.981 li
499.132 352.181 li
cp
504.652 354.701 mo
506.092 356.021 507.172 357.101 507.892 357.701 cv
507.172 359.021 li
506.452 358.301 li
503.212 361.541 li
503.692 362.141 li
503.092 363.461 li
502.492 362.861 501.772 362.021 500.932 361.181 cv
500.092 360.341 499.252 359.501 498.412 358.781 cv
499.732 358.421 li
503.212 354.941 li
503.092 354.101 li
504.652 353.981 li
cp
489.412 356.741 mo
489.412 356.261 li
490.372 356.021 491.092 355.901 491.452 355.901 cv
491.812 355.901 492.172 356.021 492.412 356.261 cv
492.652 356.381 492.772 356.741 492.892 356.981 cv
492.892 357.341 492.772 357.581 492.772 357.701 cv
492.532 357.821 492.172 357.821 491.812 357.581 cv
491.332 357.221 490.492 356.981 489.412 356.741 cv
cp
498.412 364.781 mo
498.412 364.421 498.292 364.181 498.052 363.821 cv
494.092 359.981 li
493.972 360.101 li
493.732 360.341 493.492 360.701 493.012 361.301 cv
491.932 361.181 li
493.612 359.501 li
493.372 358.541 li
495.052 358.421 li
495.052 359.141 li
498.892 362.981 li
499.132 360.461 li
499.612 360.581 li
499.732 361.661 499.852 362.501 499.852 363.101 cv
499.852 363.581 499.972 364.181 499.972 364.781 cv
cp
507.892 346.661 mo
510.172 348.821 li
512.932 346.061 li
510.772 343.781 li
cp
511.852 342.941 mo
513.412 344.621 li
513.892 345.101 514.372 345.581 514.732 345.821 cv
514.012 347.141 li
513.532 346.541 li
510.652 349.301 li
511.372 350.021 li
510.652 351.341 li
509.932 350.621 509.212 349.781 508.492 349.061 cv
507.772 348.341 506.932 347.501 505.972 346.661 cv
507.292 346.181 li
510.172 343.301 li
510.292 342.221 li
511.852 342.341 li
cp
505.012 341.141 mo
504.892 341.861 li
505.012 342.461 505.132 342.941 505.132 343.421 cv
511.012 337.421 li
511.132 336.341 li
512.572 336.461 li
512.572 337.061 li
516.052 340.541 518.092 342.701 518.812 343.541 cv
519.412 344.381 519.652 345.101 519.652 345.701 cv
519.652 346.301 519.412 347.141 518.932 347.981 cv
518.332 347.501 517.252 347.621 515.812 348.341 cv
515.452 347.861 li
517.012 346.901 517.852 346.301 518.092 346.061 cv
518.332 345.701 518.332 345.221 517.852 344.501 cv
517.492 343.901 515.452 341.621 511.612 337.901 cv
505.372 344.141 li
505.732 345.821 505.732 347.861 505.372 349.901 cv
504.892 349.781 li
504.892 347.981 504.652 346.421 504.292 345.101 cv
503.932 343.781 503.452 342.581 502.972 341.501 cv
cp
f
grestore
gsave
693.292 209.621 mo
693.172 209.741 li
484.492 418.421 li
515.692 418.541 li
515.692 418.421 li
693.292 240.821 li
693.412 209.621 li
cp
eclp
541.252 383.261 mo
542.332 384.341 li
544.972 381.701 li
543.892 380.621 li
cp
539.812 389.381 mo
539.572 388.541 539.212 387.581 538.732 386.621 cv
538.252 385.661 537.532 384.581 536.452 383.261 cv
535.372 382.061 534.412 380.981 533.452 380.141 cv
532.612 379.301 531.772 378.581 531.172 377.981 cv
532.492 377.621 li
533.812 375.821 534.532 374.501 535.012 373.781 cv
535.372 373.061 535.492 372.461 535.612 371.981 cv
537.652 372.221 li
537.172 372.581 536.692 373.181 536.212 373.901 cv
535.612 374.501 534.652 375.941 533.092 377.981 cv
534.412 379.301 li
536.572 377.141 li
535.972 376.541 535.372 375.941 534.892 375.461 cv
536.812 374.741 li
536.812 375.461 li
537.412 376.181 li
538.732 374.861 li
538.732 373.661 li
540.892 373.781 li
537.892 376.661 li
539.212 377.981 li
540.172 377.021 li
540.172 376.061 li
541.732 375.941 li
541.732 376.541 li
545.212 380.021 li
545.812 380.741 546.532 381.341 547.012 381.821 cv
546.412 383.141 li
545.572 382.301 li
542.812 384.941 li
543.412 385.421 li
542.812 386.621 li
541.972 385.781 540.892 384.581 539.332 383.141 cv
537.772 381.581 536.812 380.621 536.212 380.141 cv
537.532 379.661 li
538.252 378.941 li
537.052 377.621 li
535.972 378.581 li
535.732 378.941 535.372 379.301 535.252 379.781 cv
534.652 379.541 li
536.332 381.101 537.532 382.661 538.612 383.981 cv
539.572 385.421 540.172 387.221 540.292 389.261 cv
cp
538.132 380.141 mo
539.212 381.221 li
541.852 378.581 li
540.772 377.501 li
cp
539.692 381.701 mo
540.652 382.781 li
543.412 380.141 li
542.332 379.061 li
cp
528.892 378.821 mo
530.932 378.701 li
530.692 379.181 530.692 380.021 530.692 380.981 cv
530.692 382.061 530.572 383.381 530.332 384.821 cv
529.852 384.701 li
529.852 383.501 529.732 382.301 529.612 381.221 cv
529.372 380.141 529.132 379.301 528.892 378.821 cv
cp
531.652 380.621 mo
533.572 380.381 li
533.332 381.101 li
533.452 382.181 533.692 383.021 533.812 383.621 cv
539.572 389.381 li
538.852 390.701 li
538.132 389.861 537.412 389.141 536.932 388.661 cv
533.572 385.301 li
533.812 386.261 533.812 387.221 533.572 388.301 cv
533.092 388.301 li
533.092 387.581 533.092 386.741 532.852 385.541 cv
532.732 384.461 532.492 383.501 532.252 382.661 cv
532.012 381.821 531.892 381.101 531.652 380.621 cv
cp
539.572 370.301 mo
542.572 367.301 li
542.572 365.981 li
544.492 366.101 li
542.812 367.781 li
545.332 370.301 li
545.572 370.061 li
545.692 368.981 li
547.612 369.101 li
545.812 370.901 li
548.212 373.301 li
549.052 371.021 li
549.532 371.261 li
548.692 374.381 548.092 376.541 547.972 377.501 cv
546.292 377.141 li
546.772 376.181 547.252 375.341 547.612 374.501 cv
544.972 371.741 li
544.852 371.861 li
544.492 372.221 544.132 372.701 543.892 373.061 cv
542.692 372.941 li
544.372 371.261 li
541.972 368.861 li
541.732 369.101 li
541.372 369.461 541.012 369.941 540.772 370.421 cv
cp
550.252 365.861 mo
554.452 369.941 li
555.292 370.781 556.012 371.501 556.492 371.981 cv
555.892 373.421 li
554.692 372.101 li
554.092 371.621 552.412 369.821 549.412 366.821 cv
550.372 369.221 550.492 371.621 550.132 373.781 cv
549.652 373.781 li
549.532 370.301 548.692 366.941 547.012 363.701 cv
545.812 364.781 li
545.452 365.141 545.092 365.621 544.852 366.101 cv
543.652 365.981 li
548.692 360.821 li
548.812 359.381 li
550.852 359.741 li
547.972 362.621 li
548.452 363.581 548.812 364.541 549.172 365.381 cv
550.132 365.141 li
cp
550.852 365.501 mo
552.892 365.141 554.212 365.021 554.812 365.021 cv
555.292 365.141 555.652 365.261 556.012 365.621 cv
556.132 365.741 556.372 365.981 556.372 366.341 cv
556.492 366.701 556.492 366.821 556.492 366.941 cv
556.252 367.061 556.012 367.061 555.772 366.941 cv
555.292 366.821 554.692 366.581 553.972 366.461 cv
553.252 366.221 552.292 366.101 550.972 365.981 cv
cp
563.092 358.781 mo
565.372 361.061 li
568.732 357.821 li
566.332 355.421 li
cp
555.052 354.461 mo
560.092 349.421 li
560.212 347.981 li
562.252 348.221 li
558.652 351.821 li
559.732 353.381 li
561.412 351.701 li
561.292 350.861 li
562.732 350.501 li
562.852 351.221 li
564.532 353.021 li
565.012 352.541 li
565.132 351.221 li
567.052 351.461 li
560.572 357.941 li
560.332 358.301 559.972 358.661 559.732 359.141 cv
558.532 359.021 li
560.692 356.861 li
559.252 354.821 li
558.772 355.301 li
558.772 355.301 558.652 355.541 558.292 356.021 cv
557.212 355.901 li
558.772 354.221 li
557.692 352.781 li
557.092 353.381 li
556.732 353.741 556.492 354.101 556.132 354.581 cv
cp
560.212 353.861 mo
561.652 355.901 li
563.692 353.981 li
561.892 352.181 li
cp
567.412 354.701 mo
568.852 356.021 569.812 357.101 570.652 357.701 cv
569.932 359.021 li
569.212 358.301 li
565.852 361.541 li
566.452 362.141 li
565.852 363.461 li
565.252 362.861 564.532 362.021 563.692 361.181 cv
562.732 360.341 561.892 359.501 561.172 358.781 cv
562.492 358.421 li
565.852 354.941 li
565.732 354.101 li
567.412 353.981 li
cp
552.052 356.741 mo
552.172 356.261 li
553.132 356.021 553.852 355.901 554.212 355.901 cv
554.572 355.901 554.812 356.021 555.172 356.261 cv
555.412 356.381 555.532 356.741 555.532 356.981 cv
555.532 357.341 555.532 357.581 555.412 357.701 cv
555.292 357.821 554.932 357.821 554.452 357.581 cv
553.972 357.221 553.252 356.981 552.052 356.741 cv
cp
561.052 364.781 mo
561.172 364.421 561.052 364.181 560.692 363.821 cv
556.852 359.981 li
556.612 360.101 li
556.492 360.341 556.132 360.701 555.772 361.301 cv
554.572 361.181 li
556.252 359.501 li
556.132 358.541 li
557.692 358.421 li
557.692 359.141 li
561.652 362.981 li
561.772 360.461 li
562.372 360.581 li
562.492 361.661 562.492 362.501 562.612 363.101 cv
562.612 363.581 562.612 364.181 562.732 364.781 cv
cp
570.652 346.661 mo
572.812 348.821 li
575.692 346.061 li
573.532 343.781 li
cp
574.492 342.941 mo
576.052 344.621 li
576.652 345.101 577.132 345.581 577.492 345.821 cv
576.772 347.141 li
576.172 346.541 li
573.292 349.301 li
574.012 350.021 li
573.412 351.341 li
572.692 350.621 571.972 349.781 571.252 349.061 cv
570.532 348.341 569.692 347.501 568.732 346.661 cv
570.052 346.181 li
572.932 343.301 li
572.932 342.221 li
574.612 342.341 li
cp
567.772 341.141 mo
567.532 341.861 li
567.772 342.461 567.772 342.941 567.772 343.421 cv
573.772 337.421 li
573.772 336.341 li
575.332 336.461 li
575.332 337.061 li
578.812 340.541 580.852 342.701 581.452 343.541 cv
582.172 344.381 582.412 345.101 582.412 345.701 cv
582.412 346.301 582.172 347.141 581.572 347.981 cv
581.092 347.501 580.012 347.621 578.452 348.341 cv
578.212 347.861 li
579.772 346.901 580.612 346.301 580.852 346.061 cv
581.092 345.701 580.972 345.221 580.612 344.501 cv
580.252 343.901 578.092 341.621 574.252 337.901 cv
568.132 344.141 li
568.492 345.821 568.492 347.861 568.132 349.901 cv
567.652 349.781 li
567.532 347.981 567.412 346.421 567.052 345.101 cv
566.692 343.781 566.212 342.581 565.732 341.501 cv
cp
f
grestore
gsave
693.292 272.261 mo
693.172 272.381 li
547.132 418.421 li
578.452 418.541 li
578.452 418.421 li
693.292 303.581 li
693.412 272.261 li
cp
eclp
598.852 380.981 mo
598.132 380.141 597.412 379.421 596.692 378.701 cv
595.972 377.981 595.252 377.261 594.412 376.541 cv
595.852 376.181 li
599.092 372.941 li
599.092 371.981 li
600.652 371.981 li
600.532 372.701 li
601.972 374.141 602.932 374.981 603.412 375.461 cv
602.692 376.661 li
602.212 376.061 li
598.972 379.301 li
599.452 379.781 li
cp
596.332 376.661 mo
598.492 378.821 li
601.732 375.581 li
599.572 373.421 li
cp
598.612 381.941 mo
603.532 377.141 li
603.532 375.941 li
605.452 376.181 li
602.692 378.941 li
604.372 380.741 li
605.452 379.541 li
605.572 378.461 li
607.492 378.581 li
604.852 381.221 li
606.772 383.021 li
608.332 381.461 li
608.332 380.261 li
610.372 380.501 li
604.732 386.141 li
604.372 386.501 604.012 386.861 603.772 387.341 cv
602.572 387.221 li
605.932 383.981 li
604.012 382.061 li
603.292 382.781 li
602.932 383.141 602.572 383.621 602.332 383.981 cv
601.132 383.861 li
603.532 381.581 li
601.732 379.781 li
600.772 380.741 li
600.412 381.221 600.052 381.581 599.812 382.061 cv
cp
592.732 380.621 mo
592.492 380.981 591.892 381.701 591.052 382.781 cv
590.572 382.301 li
591.172 381.581 591.652 380.741 592.252 379.781 cv
592.732 378.701 593.092 377.861 593.092 377.381 cv
594.892 377.741 li
594.532 378.101 594.052 378.701 593.452 379.661 cv
595.612 381.701 li
596.092 381.221 li
596.092 380.141 li
598.012 380.261 li
596.092 382.181 li
596.812 382.901 li
597.652 382.541 598.252 382.421 598.732 382.421 cv
599.212 382.421 599.452 382.421 599.692 382.661 cv
599.812 382.901 599.932 383.021 600.052 383.381 cv
600.172 383.621 600.052 383.861 599.932 383.861 cv
599.812 384.101 599.452 384.101 598.972 383.861 cv
598.372 383.501 597.772 383.381 597.172 383.261 cv
600.292 386.381 602.092 388.181 602.692 388.781 cv
602.092 390.101 li
600.892 388.781 599.212 386.981 596.812 384.701 cv
597.892 386.501 598.372 388.301 598.372 390.341 cv
597.892 390.221 li
597.532 388.661 597.052 387.221 596.572 386.021 cv
595.972 384.821 595.492 383.861 595.132 383.261 cv
594.532 383.741 li
594.172 384.101 593.812 384.581 593.572 385.061 cv
592.372 384.821 li
594.652 382.541 li
cp
603.532 368.981 mo
604.972 368.501 li
611.572 361.901 li
611.572 360.341 li
613.972 360.581 li
605.572 368.981 li
606.652 370.061 607.612 371.021 608.572 371.981 cv
609.412 373.061 610.252 374.141 610.972 375.341 cv
611.572 376.541 612.052 377.981 612.292 379.781 cv
611.812 379.901 li
611.212 378.221 610.612 376.781 609.892 375.701 cv
609.172 374.621 608.332 373.661 607.252 372.581 cv
606.172 371.501 604.972 370.301 603.532 368.981 cv
cp
606.172 364.061 mo
607.012 363.581 607.732 363.341 608.092 363.341 cv
608.572 363.221 608.812 363.341 609.052 363.701 cv
609.172 363.941 609.292 364.301 609.172 364.541 cv
609.052 364.901 608.692 364.901 608.212 364.661 cv
607.732 364.541 607.132 364.421 606.292 364.541 cv
cp
615.052 374.261 mo
615.772 373.781 616.252 373.421 616.492 373.181 cv
616.732 372.941 616.732 372.701 616.492 372.341 cv
613.252 369.101 li
611.092 371.261 li
610.732 371.741 610.372 372.101 610.132 372.581 cv
608.932 372.461 li
612.892 368.501 li
612.652 368.381 612.412 368.381 611.812 368.261 cv
611.332 368.261 610.732 368.261 610.132 368.381 cv
609.892 367.901 li
610.612 367.541 611.332 367.181 612.052 367.061 cv
612.652 364.181 li
609.052 367.781 li
608.692 368.261 608.332 368.621 608.092 369.101 cv
606.892 368.981 li
612.292 363.581 li
612.412 362.501 li
614.452 362.861 li
614.092 363.221 613.732 363.821 613.492 364.421 cv
613.252 365.021 613.012 365.861 612.772 366.941 cv
613.012 366.941 613.252 367.061 613.492 367.301 cv
613.612 367.541 613.612 367.781 613.492 367.901 cv
616.012 365.381 li
616.012 364.301 li
618.172 364.421 li
617.572 365.021 617.332 365.981 617.572 367.421 cv
616.972 367.661 li
616.492 365.861 li
614.092 368.261 li
617.572 371.621 li
618.172 372.341 618.292 373.181 617.812 374.261 cv
617.332 374.021 616.612 374.141 615.532 374.741 cv
cp
618.892 357.101 mo
620.092 358.421 li
622.252 356.261 li
621.052 354.941 li
cp
622.012 353.981 mo
623.212 355.301 li
625.612 352.901 li
624.292 351.701 li
cp
620.572 358.901 mo
622.012 360.221 li
624.172 358.061 li
622.852 356.741 li
cp
623.692 355.781 mo
625.132 357.101 li
627.412 354.821 li
626.092 353.501 li
cp
616.372 354.341 mo
616.252 353.861 li
617.092 353.741 617.812 353.501 618.412 353.501 cv
619.012 353.381 619.372 353.501 619.612 353.741 cv
619.852 353.981 619.972 354.341 619.972 354.581 cv
619.972 354.821 619.972 355.061 619.852 355.061 cv
619.732 355.301 619.372 355.181 618.772 354.941 cv
618.172 354.701 617.332 354.461 616.372 354.341 cv
cp
627.292 359.381 mo
628.492 360.581 629.332 361.301 629.812 361.781 cv
629.092 363.101 li
628.012 361.901 627.052 360.941 626.332 360.221 cv
622.612 364.061 li
622.012 364.781 li
621.052 364.661 li
625.852 359.741 li
624.652 358.541 li
622.492 360.821 li
622.972 361.301 li
622.372 362.621 li
621.412 361.541 620.572 360.701 619.612 359.861 cv
618.772 358.901 617.932 358.061 616.852 357.101 cv
618.292 356.621 li
621.652 353.381 li
621.532 352.781 621.292 352.181 621.052 351.581 cv
620.812 350.861 620.572 350.261 620.332 349.661 cv
622.372 349.421 li
622.132 349.901 622.132 350.381 622.132 350.981 cv
622.132 351.461 622.132 352.181 622.132 352.781 cv
623.692 351.221 li
623.692 350.261 li
625.372 350.141 li
625.252 350.861 li
627.172 352.781 628.372 353.981 629.092 354.581 cv
628.492 355.781 li
627.892 355.301 li
625.612 357.701 li
626.812 358.781 li
630.052 355.661 li
630.052 353.981 li
632.452 354.221 li
cp
629.932 348.461 mo
638.212 340.181 li
638.212 338.621 li
640.612 338.741 li
637.012 342.221 li
641.452 346.661 li
641.932 347.141 642.412 347.021 643.012 346.421 cv
643.972 345.341 li
644.332 344.981 644.452 344.501 643.972 344.021 cv
643.612 343.541 643.132 342.821 642.412 341.981 cv
642.892 341.501 li
643.852 342.341 644.452 342.941 644.812 343.181 cv
645.172 343.541 645.532 343.541 646.012 343.301 cv
646.132 344.261 646.012 345.101 645.292 345.701 cv
643.372 347.621 li
642.412 348.701 641.572 348.701 640.852 347.981 cv
636.052 343.301 li
634.732 344.621 li
636.532 346.661 637.492 348.461 637.732 350.021 cv
637.972 351.581 637.612 353.381 636.652 355.661 cv
636.172 355.541 li
636.772 353.021 636.772 351.101 636.292 349.661 cv
635.692 348.221 634.852 346.901 633.652 345.581 cv
632.092 347.261 li
631.732 347.621 631.372 348.101 631.012 348.581 cv
cp
628.372 344.141 mo
634.372 338.141 li
634.372 336.701 li
636.652 336.941 li
630.412 343.181 li
630.052 343.541 629.692 343.901 629.452 344.381 cv
cp
f
grestore
3.05162 4.3009 mo
3.05162 3.9409 3.41162 3.5809 3.77162 3.5809 cv
693.412 3.5809 li
693.772 3.5809 694.132 3.9409 694.132 4.3009 cv
694.132 418.541 li
694.132 418.901 693.772 419.261 693.412 419.261 cv
3.77162 419.261 li
3.41162 419.261 3.05162 418.901 3.05162 418.541 cv
cp
4.37162 418.541 mo
3.77162 417.821 li
693.412 417.821 li
692.812 418.541 li
692.812 4.3009 li
693.412 5.0209 li
3.77162 5.0209 li
4.37162 4.3009 li
cp
.152804 .110048 .088716 0 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/RZBRVR+CIDFont+F1*1 uf
/RZBRVR+CIDFont+F1 uf
/PBAAAA+CIDFont+F1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

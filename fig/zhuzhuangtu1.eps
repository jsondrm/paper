%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: zhuzhuangtu1.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: I333624
%%CreationDate: 2017/4/20, 19:55:37
%%BoundingBox: -1 0 697 304
%%HiResBoundingBox: 0 0 696.7677 303.4585
%%CropBox: 0 0 696.7677 303.4585
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 788 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-04-20T19:54:47+08:00"
   xmp:ModifyDate="2017-04-20T19:54:47+08:00"
   pdf:Producer="Microsoft: Print To PDF">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>I333624</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">CWEDATA.xlsx</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -303.458 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-3.05176e-5 0 mo
-3.05176e-5 303.458 li
696.768 303.458 li
696.768 0 li
cp
clp
3.77161 2.80786 mo
693.652 2.80786 li
693.652 300.888 li
3.77161 300.888 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
37.9716 214.128 mo
677.932 214.128 li
677.932 215.208 li
37.9716 215.208 li
37.9716 214.128 li
cp
37.9716 192.408 mo
677.932 192.408 li
677.932 193.368 li
37.9716 193.368 li
37.9716 192.408 li
cp
37.9716 170.688 mo
677.932 170.688 li
677.932 171.648 li
37.9716 171.648 li
37.9716 170.688 li
cp
37.9716 148.728 mo
677.932 148.728 li
677.932 149.808 li
37.9716 149.808 li
37.9716 148.728 li
cp
37.9716 127.008 mo
677.932 127.008 li
677.932 128.088 li
37.9716 128.088 li
37.9716 127.008 li
cp
37.9716 105.048 mo
677.932 105.048 li
677.932 106.128 li
37.9716 106.128 li
37.9716 105.048 li
cp
37.9716 83.3279 mo
677.932 83.3279 li
677.932 84.4078 li
37.9716 84.4078 li
37.9716 83.3279 li
cp
37.9716 61.6079 mo
677.932 61.6079 li
677.932 62.6879 li
37.9716 62.6879 li
37.9716 61.6079 li
cp
37.9716 39.7679 mo
677.932 39.7679 li
677.932 40.8479 li
37.9716 40.8479 li
37.9716 39.7679 li
cp
37.9716 17.9279 mo
677.932 17.9279 li
677.932 19.0078 li
37.9716 19.0078 li
37.9716 17.9279 li
cp
.152804 .110048 .088716 0 cmyk
f
37.3716 18.5278 mo
37.3716 18.1678 37.6116 17.9278 37.9716 17.9278 cv
677.932 17.9278 li
678.292 17.9278 678.412 18.1678 678.412 18.5278 cv
678.412 236.448 li
678.412 236.808 678.292 237.048 677.932 237.048 cv
37.9716 237.048 li
37.6116 237.048 37.3716 236.808 37.3716 236.448 cv
cp
38.4516 236.448 mo
37.9716 235.968 li
677.932 235.968 li
677.452 236.448 li
677.452 18.5278 li
677.932 19.0078 li
37.9716 19.0078 li
38.4516 18.5278 li
cp
.750179 .679652 .670192 .901488 cmyk
f
45.6516 201.648 mo
55.8516 201.648 li
55.8516 236.448 li
45.6516 236.448 li
45.6516 201.648 li
cp
71.2116 192.888 mo
81.4116 192.888 li
81.4116 236.448 li
71.2116 236.448 li
71.2116 192.888 li
cp
96.8916 140.568 mo
107.092 140.568 li
107.092 236.448 li
96.8916 236.448 li
96.8916 140.568 li
cp
122.572 197.328 mo
132.652 197.328 li
132.652 236.448 li
122.572 236.448 li
122.572 197.328 li
cp
148.012 31.6078 mo
158.332 31.6078 li
158.332 236.448 li
148.012 236.448 li
148.012 31.6078 li
cp
173.692 162.408 mo
183.892 162.408 li
183.892 236.448 li
173.692 236.448 li
173.692 162.408 li
cp
199.132 123.048 mo
209.452 123.048 li
209.452 236.448 li
199.132 236.448 li
199.132 123.048 li
cp
224.812 214.608 mo
235.132 214.608 li
235.132 236.448 li
224.812 236.448 li
224.812 214.608 li
cp
250.492 153.768 mo
260.572 153.768 li
260.572 236.448 li
250.492 236.448 li
250.492 153.768 li
cp
275.932 214.608 mo
286.252 214.608 li
286.252 236.448 li
275.932 236.448 li
275.932 214.608 li
cp
301.612 201.648 mo
311.932 201.648 li
311.932 236.448 li
301.612 236.448 li
301.612 201.648 li
cp
327.172 214.608 mo
337.372 214.608 li
337.372 236.448 li
327.172 236.448 li
327.172 214.608 li
cp
352.852 210.288 mo
363.052 210.288 li
363.052 236.448 li
352.852 236.448 li
352.852 210.288 li
cp
378.532 188.568 mo
388.732 188.568 li
388.732 236.448 li
378.532 236.448 li
378.532 188.568 li
cp
403.972 210.288 mo
414.172 210.288 li
414.172 236.448 li
403.972 236.448 li
403.972 210.288 li
cp
429.652 188.568 mo
439.852 188.568 li
439.852 236.448 li
429.652 236.448 li
429.652 188.568 li
cp
455.332 179.928 mo
465.412 179.928 li
465.412 236.448 li
455.332 236.448 li
455.332 179.928 li
cp
480.772 197.328 mo
491.092 197.328 li
491.092 236.448 li
480.772 236.448 li
480.772 197.328 li
cp
506.452 219.048 mo
516.772 219.048 li
516.772 236.448 li
506.452 236.448 li
506.452 219.048 li
cp
531.892 206.088 mo
542.212 206.088 li
542.212 236.448 li
531.892 236.448 li
531.892 206.088 li
cp
557.572 223.368 mo
567.892 223.368 li
567.892 236.448 li
557.572 236.448 li
557.572 223.368 li
cp
583.252 232.128 mo
593.572 232.128 li
593.572 236.448 li
583.252 236.448 li
583.252 232.128 li
cp
608.812 210.288 mo
619.012 210.288 li
619.012 236.448 li
608.812 236.448 li
608.812 210.288 li
cp
634.372 223.368 mo
644.692 223.368 li
644.692 236.448 li
634.372 236.448 li
634.372 223.368 li
cp
660.052 206.088 mo
670.132 206.088 li
670.132 236.448 li
660.052 236.448 li
660.052 206.088 li
cp
.795987 .556786 0 0 cmyk
f
37.9716 235.968 mo
677.932 235.968 li
677.932 237.048 li
37.9716 237.048 li
cp
.750179 .679652 .670192 .901488 cmyk
f
.643427 .564508 .504021 .260655 cmyk
%ADOBeginSubsetFont: PBAAAA+CIDFont+F1 Initial
ct_T42Dict begin
-0.5 -0.305 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CIDFont+F1
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9dcd85d000000cc000000606376
7420b09bc4d20000012c0000051c6670676d73ee3d400000064800000d17
676c79660882732e0000974800003d6668656164f30a56fb000013600000
0036686865610dad0c030000139800000024686d7478f66016de000013bc
000031c26c6f6361e1e4f0f400004580000020406d617870210925080000
65c0000000206e616d65f02620c7000065e000000d4470726570a1c4507b
0000732400002422676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
20850600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e40598574737271706f6e6d6c
6b6a696867666564625f5e5d5c5b5a59585554535251504f4e4d4c4b4a49
4847464544434241403f3e3d3c3b3a39383736352f2e2d2c282625242322
1f181411100f0d0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
042651582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
282370b101283e01b0282370b10228453ab10200080d2d2c2045b0032545
6164b050515845441b2121592d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b0
2c234445b02b23442d2c4b525845441b2121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b0805158
0c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c642364
8bb81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d
2c4523456023456023456023766818b08062202d2cb00426b00426b00425
b0042545234520b003266062636820b0032661658a2344442d2c2045b000
5458b040442045b04061441b2121592d2c45b1302f4523456160b0016069
442d2c4b5158b02f2370b01423421b2121592d2c4b515820b00325456953
58441b2121591b2121592d2c45b01443b0006063b0016069442d2cb02f45
442d2c452320458a60442d2c45234560442d2c4b235158b90033ffe0b134
201bb3330034005944442d2cb0164358b00326458a586466b01f601b64b0
20606620581b21b04059b001615923586559b02923442310b029e01b2121
212121592d2cb0164358b004254564b020606620581b21b04059b0016123
586559b0292344b00425b00725082058021b0359b0052510b004252046b0
042523423cb0072510b006252046b00425b0016023423c2058011b0059b0
052510b00425b029e0b0072510b00625b029e0b00425b00725082058021b
0359b00425b003254348b00625b00325b0016043481b2159212121212121
212d2cb0164358b004254564b020606620581b21b04059b0016123581b65
59b0292344b00525b00825082058021b0359b0042510b005252046b00425
23423cb00425b0072508b0072510b006252046b00425b0016023423c2058
011b0059b0042510b00525b029e0b02920456544b0072510b00625b029e0
b00525b00825082058021b0359b00525b003254348b00425b0072508b006
25b00325b0016043481b2159212121212121212d2c02b00425202046b004
252342b0052508b003254548212121212d2c02b0032520b0042508b00225
43482121212d2c452320451820b00050205823652359236820b040505821
b04059235865598a60442d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2cb000
214b5458381b2121592d2cb002435458b0462b1b21212121592d2cb00243
5458b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb002
435458b0492b1b212121592d2c2320b000508a8a64b10003255458b0401b
b10103255458b005438b59b04f2b5923b0622b2321235865592d2cb10800
0c215460432d2c014623466023466123201020468a61b8ff80628ab14040
8a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a59
2d2cb012004b014b54422d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b1
2601885158b94000020063b80400885458b202400243604259b940000400
63b80800885458b202800243604259b12801885158b94000080063b81000
885458ba00020100000243604259595959595959b10002435458400a0540
084009400c020d021bb10102435458b2054008ba010000090100b30c010d
011bb18002435258b2054008b80180b109401bb901000002435258b20540
08ba0180000901401bb901800002435258b2054008b80200b109401bb205
4008ba010000090100595959b9400000808855b94000020063b804008855
5a58b30c000d011bb30c000d0159595942424242422d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d2cb0022563b0206066b00225b82000626023622d2c20456944
2d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002
256164b00343525821206459b1024e2b23b000505865592d2c238a4a2345
64b0022564b002256164b00343525821206459b1014e2b23b00050586559
2d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2c
b00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2c
b0032546b003254660b004252eb00425b00425b0042620b000505821b06a
1bb06c592bb0032546b00325466061b08062208a2010233a232010233a2d
2cb0032547b003254760b0052547b0806361b00225b00625496323b00525
4ab080632058621b2159b0042646608a468a4660b02063612d2cb00426b0
0425b00425b00426b06e2b208a2010233a232010233a2d2c2320b0015458
21b00225b1024e2bb0805020605920606020b001515821211b20b0055158
21206661b0402361b100032550b00325b00325505a5820b00325618a5358
21b000591b21591bb00754582066616523211b2121b000595959b1024e2b
2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0042546206661
20b00526b0062649b00526b00526b0702b236165b02060206661b0206165
2d2cb0022546208a20b000505821b1024e2b1b452321596165b00225103b
2d2cb0042620b802006220b80200638a236120b05d602bb00525118a128a
20398a58ba005d10000004266356602b23212010204620b1024e2b23611b
2321208a201049b1024e2b593b2d2cba005d10000009256356602bb00525
b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525b06f2b
ba005d10000008266356602b20b0005258b0502bb00525b00525b00725b0
0725b00525b0712bb0021738b00052b00225b001525a58b00425b0062549
b00325b00525496020b0405258211bb000525820b0025458b00425b00425
b00725b0072549b00217381bb00425b00425b00425b0062549b002173859
5959595921212121212d2cb12501885058b94000020063b8040088545cb0
164b525b1bb001592d000001000000061eb822940b6d5f0f3cf500190800
00000000bbeb7ccc00000000d20670b8fbfafd8b09ec0836000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008c2040e00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000046500a100000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000060600a10000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003ed00a100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043400600000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002e50048000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000001f6
006c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002303ec0062
03ec00510455002203d7005100000000000000000000000000000000040e
0048040e00ae040e0072040e0067040e0020040e00650000000000000000
000000000000000004430067028d00190381005c0373005903ac00260368
006100000000000000000000000000000000039f0050039f008d039f0065
039f0062039f003a039f0067000000000000000000000000000000000494
005f02cb002303ec006203ec00510428002203d700510000000000000000
0000000000000000040e0048040e00ae040e0072040e0067040e0030040e
0065000000000000000000000000000000000321004801f8002302b0004b
02ad004102db002502a60045000000000000000000000000000000000000
0000000000000000000000000000000000000321004801f8002302b0004b
02ad004102db002502a60045000000000000000000000000000000000000
000000000000000000000000000000000000029d003801f500310252003c
0249002d024a00140246003200000000000000000000000000000000029d
003801f500310252003c0249002d024a0014024600320000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000046d008e00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000046d008e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf01810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
01810181018101d101d101d101d101d101d101d101d101d101d101d101d1
01d101d101d101d101d101d101d101d101d101d101d101d101d101d101d1
01d101d101d101d101d101d101d101d101d101d101d101d101d101d101d1
01d101d10259025902590259025902590259025902590259025902590259
02590259025902590259025902590259025902e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e60395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
03950395039503950395039503950395041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f04990499049904990499049904990499
04990499049904990499049904fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc054e054e054e054e054e054e054e054e054e
054e054e054e054e054e054e054e054e054e054e054e054e054e054e054e
054e054e054e054e054e054e054e054e054e054e054e05ac05fe068e0749
07bf084a084a084a084a084a08a8091509970a500ac50b560b560b560b56
0b560bb40c040c8e0d410dba0e4b0e4b0e4b0e4b0e4b0ea60f110f190f21
0f9710291029102910291029108910d611691222129c1330133013301330
133013f414be1579168e1768183b183b183b183b183b1844184d1856185f
1868187118711871187118711871187118711871187118ca191b198c1a32
1aa71b291b291b291b291b291b291b291b291b291b291b821bd11c471cf9
1d6f1df01df01df01df01df01df91e021e0b1e141e1d1e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb300010000101f005b00050059000200020010002f0086
0000104b2422000100010000002d02220000000300000000006400000000
000300000001000e00640000000300000002000e03040000000300000003
002403120000000300000004000e00640000000300000005001803360000
000300000006000e006400000003000000070076034e0000000300000008
002a000e0000000300000009002003c4000000030000000a02a000640000
00030000000b005603e4000000030000000c002a043a000000030000000d
02980464000000030000000e006c06fc0001000000000000003207680001
0000000000010007079a0001000000000002000708ea0001000000000003
001808f100010000000000040007079a0001000000000005000c09090001
0000000000060007079a0001000000000007003b09150001000000000008
0015076f000100000000000900100950000100000000000a0150079a0001
00000000000b002b0960000100000000000c0015098b000100000000000d
014c09a0000100000000000e00360aec0003000104090000006400000003
000104090001000e00640003000104090002000e03040003000104090003
002403120003000104090004000e00640003000104090005001803360003
000104090006000e006400030001040900070076034e0003000104090008
002a000e0003000104090009002003c4000300010409000a02a000640003
00010409000b005603e4000300010409000c002a043a000300010409000d
02980464000300010409000e006c06fc00a9002000320030003100350020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c0069006200720069002000690073002000610020006d006f00640065
0072006e002000730061006e007300200073006500720069006600200066
0061006d0069006c00790020007700690074006800200073007500620074
006c006500200072006f0075006e00640069006e006700730020006f006e
0020007300740065006d007300200061006e006400200063006f0072006e
006500720073002e00200049007400200066006500610074007500720065
00730020007200650061006c0020006900740061006c006900630073002c
00200073006d0061006c006c00200063006100700073002c00200061006e
00640020006d0075006c007400690070006c00650020006e0075006d0065
00720061006c00200073006500740073002e002000490074007300200070
0072006f0070006f007200740069006f006e007300200061006c006c006f
00770020006800690067006800200069006d007000610063007400200069
006e002000740069006700680074006c007900200073006500740020006c
0069006e006500730020006f0066002000620069006700200061006e0064
00200073006d0061006c006c0020007400650078007400200061006c0069
006b0065002e002000430061006c0069006200720069002700730020006d
0061006e0079002000630075007200760065007300200061006e00640020
0074006800650020006e0065007700200072006100730074006500720069
0073006500720020007400650061006d00200075007000200069006e0020
006200690067006700650072002000730069007a0065007300200074006f
002000720065007600650061006c002000610020007700610072006d0020
0061006e006400200073006f006600740020006300680061007200610063
007400650072002e0052006500670075006c00610072004d006900630072
006f0073006f00660074003a002000430061006c00690062007200690056
0065007200730069006f006e00200036002e0031003200430061006c0069
00620072006900200069007300200061002000740072006100640065006d
00610072006b0020006f006600200074006800650020004d006900630072
006f0073006f00660074002000670072006f007500700020006f00660020
0063006f006d00700061006e006900650073002e004c0075006300280061
00730029002000640065002000470072006f006f00740068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f006300740066006f006e007400730068007400740070003a002f
002f0066006f006e007400660061006200720069006b002e0063006f006d
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e00740020006100730020007000650072006d0069
00740074006500640020006200790020007400680065002000450055004c
004100200066006f00720020007400680065002000700072006f00640075
0063007400200069006e0020007700680069006300680020007400680069
007300200066006f006e007400200069007300200069006e0063006c0075
00640065006400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e0074002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e00740073002f0064
0065006600610075006c0074002e0061007300700078a92032303135204d
6963726f736f667420436f72706f726174696f6e2e20416c6c2052696768
74732052657365727665642e43616c696272692069732061206d6f646572
6e2073616e732073657269662066616d696c79207769746820737562746c
6520726f756e64696e6773206f6e207374656d7320616e6420636f726e65
72732e204974206665617475726573207265616c206974616c6963732c20
736d616c6c20636170732c20616e64206d756c7469706c65206e756d6572
616c20736574732e204974732070726f706f7274696f6e7320616c6c6f77
206869676820696d7061637420696e2074696768746c7920736574206c69
6e6573206f662062696720616e6420736d616c6c207465787420616c696b
652e2043616c696272692773206d616e792063757276657320616e642074
6865206e65772072617374657269736572207465616d20757020696e2062
69676765722073697a657320746f2072657665616c2061207761726d2061
6e6420736f6674206368617261637465722e526567756c61724d6963726f
736f66743a2043616c696272693a203230303556657273696f6e20362e31
3243616c6962726920697320612074726164656d61726b206f6620746865
204d6963726f736f66742067726f7570206f6620636f6d70616e6965732e
4c7563286173292064652047726f6f74687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f666f6e7466616272696b2e636f6d596f75206d6179207573
65207468697320666f6e74206173207065726d6974746564206279207468
652045554c4120666f72207468652070726f6475637420696e2077686963
68207468697320666f6e7420697320696e636c7564656420746f20646973
706c617920616e64207072696e7420636f6e74656e742e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f
6e74732f64656661756c742e6173707800>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143404114801f85
8503251f8403381f8301381f8255805581ab80557f557d557eab7d550b7d
010b7d1b7d4b7d7b7dab7ddb7d060a7c557a557bab7a557955775578ab77
55ba028600660285403c5576ab755504751475747503f47501ab75014475
0130750102007510752075030c7455725573ab7255007250728072b07204
3bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d104671556f
5570ab6f556e666d556a03251f6938675568ab67556638645565ab645563
386255613860555f385d555eab5d555c385a555bab5a5559385855570325
1f5638545555ab54555338515552ab51554f384e554e03251f4d384b554c
ab4b554a38485549ab4855473846554503381f001c101c201c0310b8ffc0
404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b03120f1a1f
1a02290f1901434f19016f197f198f19030f18cf18024018292c460f17cf
17df17ef1704134017292e460016101620160315b8ffc0b3164d5446b8ff
c0b3163f4446b8ffc0b316313546b8ffc0401f162326460f15010f151f15
0245ef1501850003012001010001100120010308b8ffc0b401151f4603bd
0100010000050001019000542b4bb80800524bb008505bb00188b02553b0
0188b040515ab00688b000555a5b58b101018e59b101024354b0144b515a
58b101018e59858d8d001d424bb01d5358b203a0a01d42594bb0805358b2
0340401d42594bb0ff5358b20300001d42592b5e7375732b58404a080011
e011f0110315bf10cf10020f0f010f0fff0f020f0e1f0e020f0e1f0eff0e
030f0d1f0d020f0d1f0dff0d03160f0b1f0b02553f0b4f0b0208400f3135
46400e313746400d313746b8ffc0400e0c505446400b3f4346400b2d3046
2b2b2b2b2b2b5e745e735e737473747374745e735e5901755e73742b2b2b
2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b
5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b58b80142b2
12461fb80141b212461fb80140b212461fb8013fb212461fb8013eb21244
1fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b1fb8
0139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb80135
b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131b211
551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211591f
b8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1fb801
28b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb80124b2
11561fb80123b211571fb80122b211581fb80121b211591fb80120b2115a
1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b1fb8
011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb80117
b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113b210
5f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb2105f1f
b8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1fb801
0ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2
105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2105f
1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641ffc0f
621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f641f
f40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f
621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e671f
e50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681fde0e
681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d311f
d60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1fcf0d
2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1f
c70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f40d4
c00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741fb90c
741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c741f
b10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b
7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1f
a20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b
7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b7e1f
930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0a
a71f2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b1b59012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
b1000243545841ff0284006402830064028200640281006402800064027f
0064027e0064027d0064027c0064027b0064027a00640279006402780064
02770064027600640275006402740064027300640271006402700064026f
0064026e0064026d0064026c0064026b0064026a00640269006402680064
026700640266006402650064026400640263006402620064026100640260
0064025f0064025e0064025d0064025c0064025b0064025a006402590064
025800640257006402560064025500640254006402530064025200640251
006402500064024f0064024e0064024d0064024c0064024b0064024a0064
024900640248006402470064024600640245006402440064024300640242
00640241006402400064023f0064023e0064023d0064023c0064023b0064
023a00640239006402380064023700640236006402350064023400640233
0064023200640231006402300064022f0064022e0064022d0064022c0064
022b0064022a006402290064022800640227006402260064022500640224
006402230064022200640221006402200064021f0064021e0064021d0064
021c0064021b0064021a0064021900640218006402170064021600640215
00640214006402130064021200640211006402100064020f0064020e0064
020d0064020c0064020b0064020a00640209006402080064020700640206
006402050064020441ff00640203006402020064020100640200006401ff
006401fe006401fd006401fc006401fb006401fa006401f9006401f80064
01f7006401f6006401f5006401f4006401f3006401f2006401f1006401f0
006401ef006401ee006401ed006401ec006401eb006401ea006401e90064
01e8006401e7006401e6006401e5006401e4006401e3006401e2006401e1
006401e0006401df006401de006401dd006401dc006401db006401da0064
01d9006401d8006401d7006401d6006401d5006401d4006401d3006401d2
006401d1006401d0006401cf006401ce006401cd006401cc006401cb0064
01ca006401c9006401c8006401c7006401c6006401c5006401c4006401c3
006401c2006401c1006401c0006401bf006401be006401bd006401bc0064
01bb006401ba006401b9006401b8006401b7006401b6006401b5006401b4
006401b3006401b2006401b1006401b0006401af006401ae006401ad0064
01ac006401ab006401aa006401a9006401a8006401a7006401a6006401a5
006401a4006401a3006401a2006401a1006401a00064019f0064019e0064
019d0064019c0064019b0064019a00640199006401980064019700640196
0064019500640194006401930064019200640191006401900064018f0064
018e0064018d0064018c0064018b0064018a006401890064018800640187
006401860064018500644180018400640183006401820064018100640180
0064017f0064017e0064017d0064017c0064017b0064017a006401790064
017800640177006401760064017500640174006401730064017200640171
006401700064016f0064016e0064016d0064016c0064016b0064016a0064
016900640168006401670064016600640165006401640064016300640162
00640161006401600064015f0064015e0064015d0064015c0064015b0064
015a00640159006401580064015700640156006401550064015400640153
00640152006401500064014f0064014e0064014c0064014b0064014a0064
014900640148006401470064014600640145006401440064014300642b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b185f5e000000>
[15719 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 9824 1004 <00020048ffed03c705210013002b010bb0852b584019281201291101260d
01260c012608012507012a03012902012db8ffc040250f024d602d011418
10014d14100f014d14160d014d140a0c014d14200b014d14180c014d14bb
022d00000020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8
fff6b30c014d20b8ffe8b60c014d24200120b8022d40090a200030004000
030ab8fff040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00
b8ffc0400a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003f
ed3fed11120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b
2b2b31305d2b5d5d5d5d5d5d5d5d1bb10f1bb8010ab46c0f530525b8010a
b26c055600183f2b3f2b30315901140e0223222e0235343e0233321e0207
342e0423220e0215141e0233323e0403c72f6db0817aa7662b306cb0807b
a7662bb00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b161
57a9f7a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e72
8500>PBAAAA+CIDFont+F1 AddT42Char 
2 10216 1005 <000100ae0000039f0517002e010cb0852b584024241e01241d01241c0123
1b01241a01241901261801261701291201291101122010014d30b8ffc040
0d0f024d60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29
b8fff0b30d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e
18200b014d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8
ffc0b310014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b01
4da01101111312b8013fb323522910b80107b10654003fed323ffdcd012f
5d2b2b2b2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d
5d5d5d5d5d5d5d1bb313402312b8013fb56c2352290610b80107b26c0654
00183f2b323f2b1acd30315925140e022321222e0235343e023321110706
06262635343e0237253e0333321e02151133321e02039f060a0d07fd5c07
0c0b0606090d08010efa13170e0503060b09012a040c12181218201206ea
080e090544131a100707101a13121a110903d8950a040d1e171118100c06
bf0304040104070b06fb8f09111a>PBAAAA+CIDFont+F1 AddT42Char 
2 10620 1006 <000100720000039c0521003e00cab0852b58400d2936012b1e01291d0126
1e0140b8ffc040170f024d604001161810014d16100c0d014c16200b014d
16b8022db633253325330039b8ffe8b310014d39ba027f000bffc0b30c01
4d0bb8ffe0400b0f014d0b1138392020391bb8012eb63316062e531039b8
0128b10654003fed323f123939ed11392f123939012f2b2be12bcd39392f
2f10e12b2b2b31305d2b005d015d5d5d1bb71138392020392e1bb8012e40
096c3316062e53100639b80128b26c065400183f2b323f1239392b11392f
12393930315925140e022321222e0235343e0237133e0335342e0223220e
0223222e0235343e0633321e0215140e02070721321e02039c05090f09fd
350e150f07030a0f0cfb576939121c3550343d6149310c070b0704020508
183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c130907101e1614
1e17170d010a5c9278622b2b4d3a2222282208121e150f16100e15242318
355c7a453e7b8faf72d609121b00>PBAAAA+CIDFont+F1 AddT42Char 
2 10994 1007 <00010067ffed0392052100580147b0852b58b9005affc0401c0f024d605a
01310810014d31100f014d31100c0d014c31200b014d31b80235400a4e53
264e4e1813014d40b8ffe840260f014d26200f014d40264e4e2640030e1b
0810014d1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8
022db500080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b3
0f014d0eb8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ff
c0b30f014d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf3
202005495316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b
5d2b2b012f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910
e12b2b2b2b31305d2b1b400c0f3b010b033b113b11164936b8010b400d6c
53202cf36c20200549530516b8010bb26c055600183f2b3f12392f2b392b
1139392f2f5f5e5d30315901140e0223222e0635343633321e0233323e02
35342e022323222e0235343e023333323e0235342e0223220e0223222e02
35343e0633321e0215140e0207151e0303923e74aa6b4171583a0f080603
0e0d0935536f44426444222b53794d7b080f0b07060b0e0971426949271a
3451353a614c320a070b0703020608133a556f405a885b2d203e5a3b436f
502d0172598f6637151d1f0e0e141d15241c202520223e55323758402207
101a1513190f07224059372849361f232823050f1b160f17110e13242318
2e5475473d6951390b020735506b>PBAAAA+CIDFont+F1 AddT42Char 
2 11548 1008 <00020030fffa03d30514002a002e0125b0852b58403a252e01262d01272c
01242701242601251c01261b01231a012419012518012517012616012615
01261401261001260f012405012404012b1b0130b8ffc040120f024d6030
012d16180f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c
2e2e10b8fffc401d0f024d101810014d10100f014d10100d014d100a0c01
4d10100b014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8
ffe0400a0b014d0404302f271b2eb8010b400a042b2110100a21520a5500
3f3f12392f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133
cd2b2b2b2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d
5d1bb3271b102eb8010b400b6c042b2110100a21520a5500183f3f12392f
1239332b3232303159011406232311140e0223222e02351121222e023534
3e0237013e0333321e0215113332160123012103d3141292081420191820
1307fdea0c100d0502060a0701d205131e2c1e21311e10921115fea102fe
5b01a701702126fef0080b080404080b08011006101e18131e19170d0312
080c080305080d09fcc62302e9fd3a00>PBAAAA+CIDFont+F1 AddT42Char 
2 11984 1009 <00010065ffed0396050e003e00fcb0852b58400d27370127360126080126
030140b8ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c
37ba02110028ffc0402810014d28400f014d280e4f326f327f3203321d18
10014d1d100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f02
4d00b8ffc0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c
3af42022012222052c5118b8010bb10556003fed3f12392f5ded10ed1139
2f2b0110d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d
5d1bb41313182c36b8012c40116c223af46c0022010b032222052c510518
b8010bb26c055600183f2b3f12392f5f5e5d2b2b11392f30315901140e02
23222e0635343e0233321e0233323e0235342e0223220623222635113436
3321321e02151406232111363633321e0203964680b16c3c6c54360f0605
0203080b070a2a4769484370512e27517c563d58261c181f1d023d080f0a
051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b1108
191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe9505023561
8a00>PBAAAA+CIDFont+F1 AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+CIDFont+F1 AddT42Char 
PBAAAA+CIDFont+F1 /CharStrings get begin
/zero 1004 def
/one 1005 def
/two 1006 def
/three 1007 def
/four 1008 def
/five 1009 def
end
PBAAAA+CIDFont+F1 /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
pop
end
%ADOEndSubsetFont
/VFJKBN+CIDFont+F1 /PBAAAA+CIDFont+F1 findfont ct_VMDictPut
/VFJKBN+CIDFont+F1*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
VFJKBN+CIDFont+F1 nf
VFJKBN+CIDFont+F1*1 [12.8316 0 0 -12.8316 0 0 ]msf
19.6094 240.043 mo
(0)sh
19.6094 218.208 mo
(5)sh
13.131 196.486 mo
(10)
[6.41581 0 ]xsh
13.131 174.645 mo
(15)
[6.41581 0 ]xsh
13.131 152.803 mo
(20)
[6.41581 0 ]xsh
13.131 131.087 mo
(25)
[6.41581 0 ]xsh
13.131 109.246 mo
(30)
[6.41581 0 ]xsh
13.131 87.4047 mo
(35)
[6.41581 0 ]xsh
13.131 65.6886 mo
(40)
[6.41581 0 ]xsh
13.131 43.8473 mo
(45)
[6.41581 0 ]xsh
13.131 22.006 mo
(50)
[6.41581 0 ]xsh
gsave
2.93161 -100.272 mo
2.93161 403.728 li
694.132 403.728 li
694.132 -100.272 li
cp
eclp
37.6116 266.208 mo
37.8516 266.328 37.9716 266.568 38.0916 266.688 cv
38.2116 266.928 38.2116 267.168 38.2116 267.288 cv
38.3316 267.528 38.3316 267.768 38.3316 267.888 cv
38.2116 268.128 38.2116 268.368 38.0916 268.608 cv
38.0916 268.728 37.9716 268.968 37.7316 269.208 cv
37.6116 269.328 37.4916 269.568 37.2516 269.808 cv
35.8116 271.248 li
35.6916 271.368 35.5716 271.368 35.4516 271.368 cv
35.4516 271.488 35.3316 271.368 35.2116 271.248 cv
30.0516 266.208 li
29.9316 266.088 29.9316 265.968 29.9316 265.848 cv
29.9316 265.728 29.9316 265.608 30.0516 265.608 cv
31.3716 264.288 li
31.7316 263.928 31.9716 263.688 32.3316 263.568 cv
32.5716 263.328 32.8116 263.328 33.0516 263.208 cv
33.4116 263.208 33.6516 263.208 33.8916 263.328 cv
34.1316 263.448 34.3716 263.688 34.6116 263.928 cv
34.7316 264.048 34.8516 264.168 34.9716 264.288 cv
35.0916 264.528 35.0916 264.648 35.2116 264.768 cv
35.2116 265.008 35.2116 265.128 35.2116 265.368 cv
35.2116 265.488 35.0916 265.728 35.0916 265.848 cv
35.2116 265.728 35.4516 265.608 35.6916 265.608 cv
35.9316 265.488 36.0516 265.488 36.2916 265.488 cv
36.5316 265.488 36.7716 265.608 37.0116 265.728 cv
37.2516 265.848 37.3716 265.968 37.6116 266.208 cv
cp
33.8916 264.768 mo
33.7716 264.648 33.6516 264.528 33.4116 264.408 cv
33.2916 264.288 33.1716 264.288 33.0516 264.288 cv
32.8116 264.288 32.6916 264.408 32.4516 264.408 cv
32.3316 264.528 32.0916 264.648 31.9716 264.888 cv
31.1316 265.728 li
32.9316 267.528 li
33.8916 266.688 li
34.0116 266.448 34.1316 266.328 34.2516 266.088 cv
34.3716 265.968 34.3716 265.848 34.3716 265.608 cv
34.3716 265.488 34.2516 265.248 34.2516 265.128 cv
34.1316 265.008 34.0116 264.888 33.8916 264.768 cv
cp
36.8916 267.048 mo
36.6516 266.808 36.5316 266.688 36.2916 266.568 cv
36.1716 266.568 35.9316 266.568 35.8116 266.568 cv
35.5716 266.568 35.3316 266.568 35.2116 266.688 cv
34.9716 266.808 34.7316 267.048 34.4916 267.288 cv
33.5316 268.128 li
35.5716 270.168 li
36.7716 269.088 li
36.8916 268.968 37.0116 268.728 37.1316 268.608 cv
37.2516 268.368 37.2516 268.248 37.2516 268.008 cv
37.2516 267.888 37.2516 267.648 37.2516 267.528 cv
37.1316 267.288 37.0116 267.168 36.8916 267.048 cv
cp
42.6516 260.208 mo
43.0116 260.568 43.2516 260.928 43.3716 261.288 cv
43.6116 261.648 43.7316 262.008 43.7316 262.368 cv
43.7316 262.728 43.6116 263.208 43.3716 263.568 cv
43.2516 263.928 43.0116 264.288 42.6516 264.648 cv
42.2916 264.888 41.9316 265.128 41.5716 265.368 cv
41.3316 265.488 40.9716 265.608 40.6116 265.608 cv
40.1316 265.608 39.7716 265.488 39.4116 265.368 cv
39.0516 265.128 38.6916 264.888 38.3316 264.528 cv
34.8516 261.048 li
34.8516 260.928 34.7316 260.928 34.7316 260.928 cv
34.7316 260.808 li
34.8516 260.808 34.8516 260.688 34.8516 260.688 cv
34.9716 260.568 34.9716 260.568 35.0916 260.448 cv
35.2116 260.328 li
35.3316 260.328 35.3316 260.208 35.3316 260.208 cv
35.4516 260.208 35.4516 260.208 35.4516 260.208 cv
35.5716 260.208 35.5716 260.208 35.5716 260.208 cv
39.0516 263.688 li
39.2916 263.928 39.5316 264.168 39.7716 264.288 cv
40.1316 264.408 40.3716 264.528 40.6116 264.528 cv
40.8516 264.528 41.0916 264.528 41.3316 264.408 cv
41.5716 264.288 41.8116 264.168 42.0516 263.928 cv
42.2916 263.688 42.4116 263.448 42.5316 263.208 cv
42.6516 262.968 42.6516 262.728 42.6516 262.488 cv
42.6516 262.248 42.5316 262.008 42.4116 261.768 cv
42.2916 261.408 42.1716 261.168 41.9316 260.928 cv
38.3316 257.448 li
38.3316 257.448 38.3316 257.448 38.3316 257.328 cv
38.3316 257.328 38.3316 257.328 38.3316 257.208 cv
38.3316 257.208 38.4516 257.208 38.4516 257.088 cv
38.5716 256.968 li
38.6916 256.848 38.6916 256.848 38.8116 256.728 cv
38.8116 256.728 38.9316 256.728 38.9316 256.608 cv
39.0516 256.608 li
39.0516 256.608 39.0516 256.608 39.1716 256.728 cv
cp
43.8516 252.408 mo
43.9716 252.408 43.9716 252.528 43.9716 252.528 cv
43.9716 252.648 44.0916 252.648 44.0916 252.648 cv
44.0916 252.768 44.0916 252.768 44.0916 252.768 cv
44.0916 252.768 44.0916 252.888 43.9716 252.888 cv
41.9316 254.928 li
43.8516 256.968 li
45.8916 254.928 li
46.0116 254.928 46.0116 254.928 46.0116 254.928 cv
46.1316 254.928 46.1316 254.928 46.1316 254.928 cv
46.2516 254.928 46.2516 255.048 46.3716 255.048 cv
46.3716 255.168 46.3716 255.168 46.4916 255.288 cv
46.4916 255.288 46.4916 255.288 46.4916 255.408 cv
46.4916 255.408 46.4916 255.408 46.4916 255.528 cv
46.4916 255.528 li
44.4516 257.568 li
46.8516 259.968 li
46.9716 259.968 46.9716 259.968 46.9716 259.968 cv
46.9716 260.088 46.9716 260.088 46.9716 260.088 cv
46.8516 260.208 46.8516 260.208 46.8516 260.208 cv
46.7316 260.328 46.7316 260.328 46.6116 260.448 cv
46.6116 260.568 46.4916 260.568 46.4916 260.568 cv
46.3716 260.688 46.3716 260.688 46.3716 260.688 cv
46.2516 260.688 46.2516 260.688 46.2516 260.688 cv
46.1316 260.688 46.1316 260.688 46.1316 260.688 cv
40.8516 255.408 li
40.7316 255.288 40.6116 255.168 40.7316 255.048 cv
40.7316 254.928 40.7316 254.808 40.8516 254.808 cv
43.3716 252.168 li
43.3716 252.168 43.3716 252.168 43.4916 252.168 cv
43.4916 252.168 43.4916 252.168 43.6116 252.168 cv
43.6116 252.168 43.6116 252.168 43.7316 252.288 cv
43.7316 252.288 43.8516 252.288 43.8516 252.408 cv
cp
47.9316 248.328 mo
48.0516 248.328 48.0516 248.328 48.0516 248.448 cv
48.1716 248.448 48.1716 248.568 48.1716 248.568 cv
48.1716 248.688 li
46.0116 250.848 li
47.9316 252.768 li
49.9716 250.848 li
49.9716 250.848 49.9716 250.728 50.0916 250.728 cv
50.0916 250.728 li
50.2116 250.728 50.2116 250.848 50.3316 250.848 cv
50.3316 250.848 50.3316 250.968 50.4516 250.968 cv
50.4516 251.088 50.5716 251.088 50.5716 251.088 cv
50.5716 251.208 50.5716 251.208 50.6916 251.208 cv
50.6916 251.328 50.6916 251.328 50.6916 251.328 cv
50.6916 251.448 50.5716 251.448 50.5716 251.448 cv
48.6516 253.488 li
51.0516 255.768 li
51.0516 255.888 51.0516 255.888 51.0516 255.888 cv
51.0516 256.008 li
50.9316 256.128 li
50.9316 256.248 50.8116 256.248 50.8116 256.368 cv
50.6916 256.368 50.6916 256.488 50.5716 256.488 cv
50.5716 256.608 50.4516 256.608 50.4516 256.608 cv
50.3316 256.608 50.3316 256.608 50.3316 256.608 cv
50.2116 256.608 li
44.9316 251.328 li
44.8116 251.208 44.8116 251.088 44.8116 250.968 cv
44.8116 250.848 44.8116 250.728 44.9316 250.728 cv
47.4516 248.088 li
47.5716 248.088 47.5716 248.088 47.5716 248.088 cv
47.6916 248.088 li
47.8116 248.088 li
47.8116 248.208 47.9316 248.208 47.9316 248.328 cv
cp
f
64.6116 264.888 mo
64.8516 265.128 64.9716 265.368 65.0916 265.728 cv
65.2116 266.088 65.3316 266.328 65.2116 266.688 cv
65.2116 267.048 65.0916 267.288 64.9716 267.648 cv
64.8516 267.888 64.6116 268.248 64.3716 268.488 cv
64.1316 268.728 63.8916 268.848 63.7716 268.968 cv
63.5316 269.088 63.2916 269.208 63.1716 269.328 cv
63.0516 269.448 62.8116 269.448 62.6916 269.448 cv
62.5716 269.568 62.4516 269.568 62.4516 269.568 cv
62.3316 269.568 62.2116 269.568 62.2116 269.448 cv
62.0916 269.448 62.0916 269.328 61.9716 269.328 cv
61.8516 269.208 61.8516 269.208 61.7316 269.088 cv
61.7316 268.968 li
61.7316 268.968 61.7316 268.968 61.7316 268.848 cv
61.7316 268.848 li
61.7316 268.728 61.8516 268.728 61.9716 268.728 cv
62.0916 268.728 62.3316 268.608 62.4516 268.608 cv
62.5716 268.488 62.8116 268.488 63.0516 268.368 cv
63.2916 268.248 63.5316 268.008 63.6516 267.768 cv
63.8916 267.648 64.0116 267.528 64.1316 267.288 cv
64.1316 267.168 64.2516 266.928 64.2516 266.808 cv
64.2516 266.568 64.2516 266.448 64.1316 266.208 cv
64.1316 266.088 64.0116 265.848 63.8916 265.728 cv
63.6516 265.608 63.5316 265.488 63.2916 265.488 cv
63.1716 265.368 62.9316 265.368 62.6916 265.488 cv
62.5716 265.488 62.3316 265.488 62.0916 265.608 cv
61.8516 265.728 61.6116 265.728 61.3716 265.848 cv
61.1316 265.968 60.8916 265.968 60.6516 266.088 cv
60.4116 266.088 60.1716 266.208 59.9316 266.208 cv
59.6916 266.208 59.4516 266.088 59.2116 266.088 cv
58.9716 265.968 58.7316 265.728 58.4916 265.488 cv
58.2516 265.248 58.1316 265.008 58.0116 264.768 cv
57.8916 264.528 57.8916 264.168 57.8916 263.928 cv
57.8916 263.688 58.0116 263.328 58.1316 263.088 cv
58.2516 262.848 58.4916 262.608 58.7316 262.248 cv
58.8516 262.128 58.9716 262.008 59.0916 262.008 cv
59.3316 261.888 59.4516 261.768 59.5716 261.648 cv
59.6916 261.648 59.9316 261.528 60.0516 261.528 cv
60.1716 261.408 60.2916 261.408 60.2916 261.408 cv
60.4116 261.408 60.4116 261.408 60.4116 261.408 cv
60.4116 261.408 60.5316 261.408 60.5316 261.528 cv
60.5316 261.528 60.5316 261.528 60.6516 261.528 cv
60.6516 261.648 60.6516 261.648 60.7716 261.648 cv
60.7716 261.768 60.8916 261.768 60.8916 261.888 cv
60.8916 261.888 61.0116 261.888 61.0116 262.008 cv
61.0116 262.008 li
61.0116 262.128 61.0116 262.128 61.0116 262.128 cv
60.8916 262.128 60.8916 262.248 60.7716 262.248 cv
60.6516 262.248 60.5316 262.248 60.4116 262.368 cv
60.1716 262.368 60.0516 262.488 59.8116 262.608 cv
59.6916 262.608 59.4516 262.848 59.3316 262.968 cv
59.2116 263.088 59.0916 263.328 58.9716 263.448 cv
58.8516 263.568 58.8516 263.808 58.8516 263.928 cv
58.8516 264.048 58.8516 264.168 58.9716 264.288 cv
58.9716 264.408 59.0916 264.528 59.2116 264.648 cv
59.3316 264.888 59.5716 265.008 59.6916 265.008 cv
59.9316 265.008 60.0516 265.008 60.2916 265.008 cv
60.5316 265.008 60.7716 264.888 61.0116 264.888 cv
61.2516 264.768 61.4916 264.648 61.7316 264.528 cv
61.8516 264.528 62.2116 264.408 62.4516 264.408 cv
62.6916 264.288 62.9316 264.288 63.1716 264.288 cv
63.4116 264.288 63.6516 264.288 63.8916 264.408 cv
64.1316 264.528 64.3716 264.648 64.6116 264.888 cv
cp
69.4116 262.968 mo
69.4116 263.088 69.4116 263.088 69.4116 263.088 cv
69.4116 263.208 69.4116 263.208 69.4116 263.208 cv
69.4116 263.328 69.2916 263.328 69.2916 263.448 cv
69.1716 263.448 69.1716 263.568 69.0516 263.688 cv
68.9316 263.808 li
68.8116 263.808 68.8116 263.928 68.8116 263.928 cv
68.6916 263.928 68.6916 263.928 68.6916 264.048 cv
68.5716 264.048 68.5716 264.048 68.5716 264.048 cv
68.4516 264.048 li
68.4516 264.048 68.4516 264.048 68.3316 264.048 cv
61.1316 260.568 li
61.1316 260.448 61.0116 260.448 61.0116 260.448 cv
60.8916 260.448 60.8916 260.328 60.8916 260.328 cv
60.8916 260.208 61.0116 260.208 61.0116 260.088 cv
61.1316 260.088 61.1316 259.968 61.2516 259.848 cv
61.3716 259.848 61.3716 259.728 61.4916 259.728 cv
61.4916 259.608 61.6116 259.608 61.6116 259.608 cv
61.6116 259.608 61.6116 259.608 61.7316 259.608 cv
61.7316 259.608 61.7316 259.608 61.8516 259.608 cv
68.3316 262.848 li
65.0916 256.368 li
65.0916 256.368 64.9716 256.368 64.9716 256.248 cv
64.9716 256.248 64.9716 256.248 64.9716 256.128 cv
65.0916 256.128 65.0916 256.128 65.0916 256.008 cv
65.2116 256.008 65.2116 255.888 65.3316 255.768 cv
65.4516 255.648 65.4516 255.648 65.5716 255.648 cv
65.5716 255.528 65.6916 255.528 65.6916 255.528 cv
65.8116 255.528 65.8116 255.528 65.8116 255.648 cv
65.8116 255.648 65.9316 255.648 65.9316 255.768 cv
cp
78.5316 253.848 mo
78.5316 253.968 78.5316 253.968 78.5316 253.968 cv
78.5316 254.088 li
78.5316 254.088 78.5316 254.208 78.4116 254.208 cv
78.4116 254.328 78.4116 254.328 78.2916 254.448 cv
78.1716 254.448 78.1716 254.568 78.0516 254.568 cv
78.0516 254.568 78.0516 254.688 77.9316 254.688 cv
77.9316 254.688 77.9316 254.688 77.8116 254.688 cv
77.8116 254.688 li
72.7716 249.648 li
75.7716 256.728 li
75.7716 256.728 75.7716 256.728 75.7716 256.848 cv
75.7716 256.848 li
75.7716 256.968 75.6516 256.968 75.6516 257.088 cv
75.6516 257.088 75.5316 257.088 75.5316 257.208 cv
75.4116 257.208 75.4116 257.328 75.2916 257.328 cv
75.2916 257.328 75.2916 257.448 75.1716 257.448 cv
75.1716 257.448 75.1716 257.448 75.0516 257.448 cv
75.0516 257.448 li
68.0916 254.328 li
73.0116 259.368 li
73.1316 259.368 73.1316 259.368 73.1316 259.488 cv
73.1316 259.488 li
73.0116 259.608 73.0116 259.608 73.0116 259.728 cv
73.0116 259.728 72.8916 259.848 72.7716 259.848 cv
72.7716 259.968 72.6516 259.968 72.6516 260.088 cv
72.5316 260.088 72.5316 260.088 72.5316 260.208 cv
72.4116 260.208 72.4116 260.208 72.4116 260.208 cv
72.2916 260.088 li
67.0116 254.808 li
66.8916 254.688 66.8916 254.568 66.8916 254.448 cv
66.8916 254.328 66.8916 254.208 67.0116 254.208 cv
67.4916 253.728 li
67.6116 253.608 67.6116 253.488 67.7316 253.488 cv
67.8516 253.488 67.9716 253.368 67.9716 253.368 cv
68.0916 253.368 68.2116 253.368 68.3316 253.368 cv
68.4516 253.368 68.4516 253.488 68.5716 253.488 cv
74.4516 256.008 li
71.9316 250.128 li
71.9316 250.008 71.9316 249.888 71.8116 249.768 cv
71.8116 249.768 71.8116 249.648 71.8116 249.528 cv
71.8116 249.408 71.9316 249.408 71.9316 249.288 cv
71.9316 249.288 72.0516 249.168 72.0516 249.048 cv
72.5316 248.568 li
72.6516 248.568 72.6516 248.568 72.7716 248.448 cv
72.8916 248.448 li
73.0116 248.448 73.0116 248.448 73.1316 248.448 cv
73.1316 248.568 73.2516 248.568 73.2516 248.568 cv
cp
f
89.0916 265.968 mo
89.3316 266.208 89.5716 266.448 89.6916 266.808 cv
89.8116 267.048 89.8116 267.408 89.8116 267.768 cv
89.8116 268.008 89.6916 268.368 89.5716 268.728 cv
89.3316 268.968 89.0916 269.328 88.8516 269.568 cv
88.6116 269.808 88.4916 269.928 88.2516 270.048 cv
88.1316 270.168 87.8916 270.288 87.7716 270.408 cv
87.5316 270.408 87.4116 270.528 87.2916 270.528 cv
87.1716 270.528 87.0516 270.648 86.9316 270.648 cv
86.8116 270.648 86.8116 270.528 86.6916 270.528 cv
86.6916 270.528 86.5716 270.408 86.4516 270.288 cv
86.3316 270.168 li
86.2116 270.048 li
86.2116 269.928 li
86.2116 269.928 86.2116 269.928 86.3316 269.808 cv
86.3316 269.808 86.4516 269.808 86.5716 269.808 cv
86.6916 269.688 86.8116 269.688 87.0516 269.688 cv
87.1716 269.568 87.4116 269.448 87.5316 269.328 cv
87.7716 269.208 88.0116 269.088 88.2516 268.848 cv
88.3716 268.728 88.4916 268.488 88.6116 268.368 cv
88.7316 268.128 88.7316 268.008 88.8516 267.768 cv
88.8516 267.648 88.8516 267.408 88.7316 267.288 cv
88.6116 267.168 88.6116 266.928 88.3716 266.808 cv
88.2516 266.688 88.0116 266.568 87.8916 266.448 cv
87.6516 266.448 87.5316 266.448 87.2916 266.448 cv
87.0516 266.568 86.8116 266.568 86.5716 266.688 cv
86.4516 266.688 86.2116 266.808 85.9716 266.928 cv
85.7316 267.048 85.4916 267.048 85.2516 267.168 cv
85.0116 267.168 84.7716 267.288 84.4116 267.168 cv
84.1716 267.168 83.9316 267.168 83.6916 267.048 cv
83.4516 267.048 83.2116 266.808 82.9716 266.568 cv
82.7316 266.328 82.6116 266.088 82.4916 265.848 cv
82.3716 265.608 82.3716 265.248 82.3716 265.008 cv
82.4916 264.768 82.4916 264.408 82.7316 264.168 cv
82.8516 263.808 82.9716 263.568 83.2116 263.328 cv
83.4516 263.208 83.5716 263.088 83.6916 262.968 cv
83.8116 262.848 83.9316 262.848 84.1716 262.728 cv
84.2916 262.608 84.4116 262.608 84.5316 262.608 cv
84.6516 262.488 84.7716 262.488 84.8916 262.488 cv
84.8916 262.488 84.8916 262.488 85.0116 262.488 cv
85.0116 262.488 li
85.1316 262.608 85.1316 262.608 85.1316 262.608 cv
85.2516 262.608 85.2516 262.728 85.2516 262.728 cv
85.3716 262.848 85.3716 262.848 85.4916 262.848 cv
85.4916 262.968 85.4916 262.968 85.4916 262.968 cv
85.4916 263.088 85.4916 263.088 85.4916 263.088 cv
85.4916 263.208 85.4916 263.208 85.4916 263.208 cv
85.4916 263.208 85.3716 263.208 85.2516 263.328 cv
85.1316 263.328 85.0116 263.328 84.8916 263.448 cv
84.7716 263.448 84.5316 263.568 84.4116 263.568 cv
84.1716 263.688 84.0516 263.808 83.9316 264.048 cv
83.6916 264.168 83.5716 264.288 83.5716 264.528 cv
83.4516 264.648 83.4516 264.768 83.4516 265.008 cv
83.4516 265.128 83.4516 265.248 83.4516 265.368 cv
83.5716 265.488 83.5716 265.608 83.6916 265.728 cv
83.9316 265.968 84.0516 265.968 84.2916 266.088 cv
84.4116 266.088 84.6516 266.088 84.8916 266.088 cv
85.0116 266.088 85.2516 265.968 85.4916 265.848 cv
85.7316 265.848 85.9716 265.728 86.2116 265.608 cv
86.4516 265.488 86.6916 265.488 86.9316 265.368 cv
87.1716 265.368 87.4116 265.248 87.6516 265.248 cv
87.8916 265.248 88.1316 265.368 88.3716 265.488 cv
88.6116 265.488 88.8516 265.728 89.0916 265.968 cv
cp
91.2516 258.888 mo
91.4916 259.248 91.7316 259.488 91.8516 259.848 cv
91.9716 260.208 92.0916 260.448 92.0916 260.808 cv
92.0916 261.168 91.9716 261.528 91.7316 261.888 cv
91.6116 262.248 91.3716 262.488 91.0116 262.848 cv
90.2916 263.568 li
92.4516 265.608 li
92.4516 265.608 92.4516 265.608 92.4516 265.728 cv
92.4516 265.728 92.4516 265.728 92.4516 265.848 cv
92.4516 265.848 92.3316 265.848 92.3316 265.968 cv
92.2116 266.088 li
92.0916 266.208 91.9716 266.328 91.9716 266.328 cv
91.9716 266.328 91.8516 266.328 91.8516 266.448 cv
91.7316 266.448 91.7316 266.448 91.7316 266.448 cv
91.7316 266.448 91.6116 266.448 91.6116 266.328 cv
86.3316 261.048 li
86.2116 260.928 86.2116 260.808 86.2116 260.688 cv
86.2116 260.688 86.2116 260.568 86.3316 260.448 cv
87.5316 259.248 li
87.6516 259.128 87.7716 259.008 87.8916 258.888 cv
88.0116 258.768 88.2516 258.648 88.3716 258.528 cv
88.6116 258.408 88.8516 258.288 89.0916 258.288 cv
89.3316 258.168 89.5716 258.168 89.8116 258.168 cv
90.0516 258.168 90.2916 258.288 90.5316 258.408 cv
90.7716 258.528 91.0116 258.648 91.2516 258.888 cv
cp
90.5316 259.728 mo
90.2916 259.488 90.0516 259.368 89.8116 259.368 cv
89.5716 259.248 89.3316 259.248 89.0916 259.248 cv
88.8516 259.368 88.7316 259.488 88.6116 259.608 cv
88.3716 259.728 88.2516 259.848 88.1316 259.968 cv
87.4116 260.568 li
89.6916 262.968 li
90.4116 262.248 li
90.6516 262.008 90.7716 261.768 90.8916 261.528 cv
91.0116 261.408 91.0116 261.168 91.0116 260.928 cv
91.0116 260.688 91.0116 260.568 90.8916 260.328 cv
90.7716 260.088 90.6516 259.968 90.5316 259.728 cv
cp
99.4116 258.288 mo
99.4116 258.288 99.4116 258.408 99.5316 258.408 cv
99.5316 258.528 li
99.5316 258.648 99.5316 258.648 99.5316 258.648 cv
99.5316 258.768 li
96.7716 261.528 li
96.6516 261.528 96.6516 261.648 96.5316 261.648 cv
96.4116 261.648 96.2916 261.528 96.1716 261.408 cv
91.0116 256.368 li
90.8916 256.248 90.8916 256.128 90.8916 256.008 cv
90.8916 255.888 91.0116 255.768 91.0116 255.768 cv
93.7716 253.008 li
93.7716 253.008 93.7716 253.008 93.8916 253.008 cv
93.8916 253.008 li
94.0116 253.008 94.0116 253.008 94.0116 253.128 cv
94.1316 253.128 94.1316 253.128 94.2516 253.248 cv
94.3716 253.368 li
94.3716 253.488 li
94.4916 253.488 94.4916 253.608 94.3716 253.608 cv
94.3716 253.608 94.3716 253.608 94.3716 253.728 cv
92.0916 255.888 li
93.8916 257.688 li
95.8116 255.768 li
95.9316 255.768 95.9316 255.768 95.9316 255.768 cv
96.0516 255.768 li
96.1716 255.768 li
96.1716 255.888 96.2916 255.888 96.2916 256.008 cv
96.4116 256.008 96.4116 256.008 96.4116 256.128 cv
96.5316 256.128 96.5316 256.248 96.5316 256.248 cv
96.5316 256.248 96.5316 256.248 96.5316 256.368 cv
96.5316 256.368 li
94.6116 258.288 li
96.6516 260.328 li
98.9316 258.048 li
99.0516 258.048 99.0516 258.048 99.0516 258.048 cv
99.0516 258.048 99.1716 258.048 99.1716 258.168 cv
99.2916 258.168 99.2916 258.168 99.4116 258.288 cv
cp
103.972 252.648 mo
104.092 252.768 li
104.092 252.768 104.092 252.888 104.212 252.888 cv
104.212 253.008 li
104.212 253.128 li
104.212 253.248 104.212 253.248 104.212 253.488 cv
104.092 253.608 104.092 253.728 103.972 253.968 cv
103.972 254.208 103.852 254.448 103.612 254.568 cv
103.492 254.808 103.372 255.048 103.132 255.288 cv
102.772 255.648 102.412 255.888 101.932 256.128 cv
101.452 256.248 101.092 256.368 100.612 256.368 cv
100.132 256.248 99.6516 256.128 99.2916 255.888 cv
98.8116 255.648 98.3316 255.288 97.8516 254.808 cv
97.3716 254.328 97.0116 253.848 96.7716 253.368 cv
96.5316 252.888 96.2916 252.408 96.2916 251.928 cv
96.2916 251.448 96.2916 250.968 96.5316 250.488 cv
96.6516 250.128 97.0116 249.648 97.3716 249.288 cv
97.4916 249.168 97.7316 249.048 97.8516 248.928 cv
98.0916 248.688 98.2116 248.688 98.4516 248.568 cv
98.5716 248.448 98.8116 248.448 98.9316 248.328 cv
99.0516 248.328 99.1716 248.328 99.2916 248.328 cv
99.4116 248.328 99.4116 248.328 99.5316 248.328 cv
99.5316 248.328 li
99.6516 248.328 99.6516 248.448 99.6516 248.448 cv
99.7716 248.448 99.7716 248.568 99.8916 248.568 cv
99.8916 248.688 99.8916 248.688 100.012 248.688 cv
100.012 248.808 100.012 248.808 100.012 248.808 cv
100.132 248.928 100.132 248.928 100.132 248.928 cv
100.132 249.048 100.012 249.048 100.012 249.048 cv
100.012 249.048 99.8916 249.168 99.7716 249.168 cv
99.6516 249.168 99.5316 249.168 99.2916 249.288 cv
99.1716 249.288 98.9316 249.408 98.6916 249.408 cv
98.4516 249.528 98.2116 249.768 97.9716 250.008 cv
97.7316 250.248 97.6116 250.488 97.4916 250.848 cv
97.3716 251.088 97.2516 251.448 97.3716 251.808 cv
97.3716 252.168 97.4916 252.528 97.7316 252.888 cv
97.9716 253.248 98.2116 253.608 98.5716 253.968 cv
98.9316 254.328 99.2916 254.688 99.6516 254.808 cv
100.012 255.048 100.372 255.168 100.732 255.168 cv
101.092 255.288 101.332 255.168 101.692 255.048 cv
101.932 254.928 102.292 254.808 102.532 254.448 cv
102.772 254.328 102.892 254.088 103.012 253.848 cv
103.132 253.608 103.252 253.368 103.372 253.248 cv
103.372 253.008 103.372 252.888 103.372 252.648 cv
103.492 252.528 103.492 252.528 103.492 252.408 cv
103.612 252.408 li
103.612 252.408 103.612 252.408 103.732 252.408 cv
103.732 252.408 103.732 252.408 103.852 252.528 cv
103.852 252.528 103.852 252.648 103.972 252.648 cv
cp
f
106.972 273.648 mo
107.212 273.888 107.452 274.248 107.572 274.488 cv
107.692 274.848 107.692 275.208 107.692 275.448 cv
107.572 275.808 107.572 276.168 107.332 276.408 cv
107.212 276.768 106.972 277.008 106.732 277.368 cv
106.492 277.488 106.372 277.728 106.132 277.848 cv
105.892 277.968 105.772 278.088 105.532 278.088 cv
105.412 278.208 105.172 278.208 105.052 278.328 cv
104.932 278.328 104.812 278.328 104.812 278.328 cv
104.692 278.328 104.692 278.328 104.572 278.328 cv
104.452 278.208 104.452 278.208 104.332 278.088 cv
104.212 278.088 104.212 277.968 104.212 277.968 cv
104.092 277.848 104.092 277.848 104.092 277.848 cv
104.092 277.728 104.092 277.728 104.092 277.728 cv
104.092 277.608 li
104.212 277.608 104.212 277.488 104.332 277.488 cv
104.452 277.488 104.692 277.488 104.812 277.368 cv
105.052 277.368 105.172 277.248 105.412 277.128 cv
105.652 277.008 105.892 276.888 106.132 276.648 cv
106.252 276.408 106.372 276.288 106.492 276.168 cv
106.612 275.928 106.612 275.808 106.612 275.568 cv
106.612 275.448 106.612 275.208 106.612 275.088 cv
106.492 274.848 106.372 274.728 106.252 274.608 cv
106.132 274.368 105.892 274.248 105.772 274.248 cv
105.532 274.248 105.292 274.248 105.172 274.248 cv
104.932 274.248 104.692 274.368 104.452 274.368 cv
104.212 274.488 103.972 274.608 103.732 274.728 cv
103.492 274.728 103.252 274.848 103.012 274.848 cv
102.772 274.968 102.532 274.968 102.292 274.968 cv
102.052 274.968 101.812 274.968 101.572 274.848 cv
101.332 274.728 101.092 274.608 100.852 274.368 cv
100.612 274.128 100.492 273.888 100.372 273.528 cv
100.252 273.288 100.252 273.048 100.252 272.808 cv
100.252 272.448 100.372 272.208 100.492 271.848 cv
100.612 271.608 100.852 271.368 101.092 271.128 cv
101.212 271.008 101.332 270.888 101.572 270.768 cv
101.692 270.648 101.812 270.528 101.932 270.528 cv
102.172 270.408 102.292 270.408 102.412 270.288 cv
102.532 270.288 102.652 270.288 102.652 270.288 cv
102.772 270.288 102.772 270.288 102.772 270.288 cv
102.892 270.288 102.892 270.288 102.892 270.288 cv
102.892 270.288 103.012 270.288 103.012 270.408 cv
103.012 270.408 103.132 270.408 103.132 270.528 cv
103.252 270.528 103.252 270.648 103.252 270.648 cv
103.372 270.648 103.372 270.768 103.372 270.768 cv
103.372 270.888 li
103.372 270.888 103.372 270.888 103.372 271.008 cv
103.372 271.008 103.252 271.008 103.132 271.008 cv
103.012 271.128 102.892 271.128 102.772 271.128 cv
102.532 271.248 102.412 271.248 102.292 271.368 cv
102.052 271.488 101.932 271.608 101.692 271.728 cv
101.572 271.968 101.452 272.088 101.332 272.208 cv
101.332 272.448 101.212 272.568 101.212 272.688 cv
101.212 272.808 101.212 273.048 101.332 273.168 cv
101.332 273.288 101.452 273.408 101.572 273.528 cv
101.692 273.648 101.932 273.768 102.052 273.768 cv
102.292 273.888 102.532 273.888 102.652 273.768 cv
102.892 273.768 103.132 273.768 103.372 273.648 cv
103.612 273.528 103.852 273.528 104.092 273.408 cv
104.332 273.288 104.572 273.168 104.812 273.168 cv
105.052 273.048 105.292 273.048 105.532 273.048 cv
105.772 273.048 106.012 273.048 106.252 273.168 cv
106.492 273.288 106.732 273.408 106.972 273.648 cv
cp
109.012 266.688 mo
109.372 266.928 109.612 267.288 109.732 267.648 cv
109.852 267.888 109.852 268.248 109.852 268.608 cv
109.852 268.968 109.732 269.208 109.612 269.568 cv
109.492 269.928 109.132 270.288 108.892 270.648 cv
108.172 271.368 li
110.212 273.408 li
110.332 273.408 110.332 273.408 110.332 273.408 cv
110.332 273.528 110.332 273.528 110.212 273.528 cv
110.212 273.648 110.212 273.648 110.212 273.648 cv
110.092 273.768 110.092 273.768 109.972 273.888 cv
109.972 274.008 109.852 274.008 109.852 274.128 cv
109.732 274.128 109.732 274.128 109.612 274.128 cv
109.612 274.128 li
109.492 274.128 109.492 274.128 109.492 274.128 cv
104.212 268.848 li
104.092 268.728 103.972 268.608 104.092 268.488 cv
104.092 268.368 104.092 268.248 104.212 268.248 cv
105.412 267.048 li
105.532 266.808 105.652 266.808 105.772 266.688 cv
105.892 266.568 106.012 266.448 106.252 266.328 cv
106.372 266.208 106.612 266.088 106.852 265.968 cv
107.212 265.968 107.452 265.968 107.692 265.968 cv
107.932 265.968 108.172 266.088 108.412 266.208 cv
108.652 266.328 108.892 266.448 109.012 266.688 cv
cp
108.292 267.528 mo
108.052 267.288 107.812 267.168 107.572 267.048 cv
107.332 267.048 107.092 267.048 106.972 267.048 cv
106.732 267.168 106.612 267.168 106.372 267.288 cv
106.252 267.408 106.132 267.528 106.012 267.648 cv
105.292 268.368 li
107.572 270.648 li
108.292 270.048 li
108.532 269.808 108.652 269.568 108.772 269.328 cv
108.772 269.088 108.892 268.968 108.892 268.728 cv
108.892 268.488 108.772 268.248 108.772 268.128 cv
108.652 267.888 108.532 267.768 108.292 267.528 cv
cp
117.172 266.088 mo
117.292 266.088 117.292 266.088 117.292 266.208 cv
117.412 266.208 117.412 266.208 117.412 266.328 cv
117.412 266.328 117.412 266.328 117.412 266.448 cv
117.412 266.448 li
114.652 269.208 li
114.532 269.328 114.412 269.328 114.292 269.328 cv
114.292 269.328 114.172 269.328 114.052 269.208 cv
108.892 264.168 li
108.772 264.048 108.772 263.928 108.772 263.808 cv
108.772 263.688 108.772 263.568 108.892 263.568 cv
111.532 260.808 li
111.652 260.808 111.652 260.808 111.652 260.808 cv
111.652 260.688 111.772 260.688 111.772 260.808 cv
111.892 260.808 li
112.012 260.808 112.012 260.928 112.012 260.928 cv
112.132 261.048 112.132 261.048 112.252 261.168 cv
112.252 261.168 112.252 261.168 112.252 261.288 cv
112.252 261.288 li
112.252 261.408 112.252 261.408 112.252 261.408 cv
109.972 263.688 li
111.772 265.488 li
113.692 263.568 li
113.692 263.568 113.812 263.568 113.812 263.448 cv
113.812 263.448 113.812 263.448 113.932 263.568 cv
113.932 263.568 113.932 263.568 114.052 263.568 cv
114.172 263.688 li
114.172 263.808 114.292 263.808 114.292 263.808 cv
114.292 263.928 114.412 263.928 114.412 263.928 cv
114.412 264.048 114.412 264.048 114.412 264.048 cv
114.412 264.168 114.292 264.168 114.292 264.168 cv
112.372 266.088 li
114.412 268.128 li
116.692 265.848 li
116.812 265.848 li
116.812 265.848 116.812 265.848 116.932 265.848 cv
117.052 265.848 li
117.052 265.968 117.172 265.968 117.172 266.088 cv
cp
121.852 260.448 mo
121.852 260.448 121.852 260.448 121.972 260.568 cv
121.972 260.568 121.972 260.568 121.972 260.688 cv
121.972 260.688 122.092 260.688 122.092 260.808 cv
122.092 260.808 122.092 260.808 122.092 260.928 cv
122.092 260.928 122.092 261.048 121.972 261.168 cv
121.972 261.408 121.972 261.528 121.852 261.768 cv
121.732 261.888 121.612 262.128 121.492 262.368 cv
121.372 262.608 121.132 262.848 121.012 262.968 cv
120.652 263.448 120.172 263.688 119.812 263.808 cv
119.332 264.048 118.852 264.048 118.492 264.048 cv
118.012 264.048 117.532 263.928 117.052 263.688 cv
116.572 263.448 116.092 263.088 115.732 262.608 cv
115.252 262.128 114.892 261.648 114.532 261.168 cv
114.292 260.688 114.172 260.208 114.172 259.728 cv
114.172 259.248 114.172 258.768 114.412 258.288 cv
114.532 257.808 114.772 257.448 115.132 257.088 cv
115.372 256.848 115.492 256.728 115.732 256.608 cv
115.852 256.488 116.092 256.368 116.212 256.368 cv
116.452 256.248 116.572 256.128 116.812 256.128 cv
116.932 256.128 117.052 256.008 117.172 256.008 cv
117.172 256.008 117.292 256.008 117.292 256.128 cv
117.412 256.128 li
117.412 256.128 117.532 256.128 117.532 256.248 cv
117.532 256.248 117.652 256.248 117.652 256.368 cv
117.772 256.368 117.772 256.488 117.772 256.488 cv
117.892 256.488 117.892 256.608 117.892 256.608 cv
117.892 256.728 li
117.892 256.728 117.892 256.728 117.892 256.848 cv
117.892 256.848 117.772 256.848 117.652 256.848 cv
117.532 256.848 117.292 256.968 117.172 256.968 cv
116.932 257.088 116.692 257.088 116.572 257.208 cv
116.332 257.328 116.092 257.448 115.852 257.688 cv
115.612 258.048 115.372 258.288 115.252 258.648 cv
115.132 258.888 115.132 259.248 115.252 259.608 cv
115.252 259.968 115.372 260.328 115.612 260.688 cv
115.732 261.048 116.092 261.408 116.452 261.768 cv
116.812 262.128 117.172 262.368 117.532 262.608 cv
117.892 262.848 118.252 262.968 118.612 262.968 cv
118.852 262.968 119.212 262.968 119.572 262.848 cv
119.812 262.728 120.172 262.488 120.412 262.248 cv
120.652 262.008 120.772 261.768 120.892 261.528 cv
121.012 261.288 121.132 261.168 121.132 260.928 cv
121.252 260.808 121.252 260.568 121.252 260.448 cv
121.252 260.328 121.372 260.208 121.372 260.208 cv
121.372 260.208 li
121.492 260.208 121.492 260.208 121.492 260.208 cv
121.612 260.208 li
121.732 260.328 121.732 260.328 121.852 260.448 cv
cp
129.772 253.848 mo
129.772 253.968 li
129.772 253.968 129.772 253.968 129.772 254.088 cv
129.772 254.088 129.772 254.088 129.652 254.208 cv
129.652 254.208 129.532 254.328 129.532 254.448 cv
129.412 254.448 129.412 254.568 129.292 254.568 cv
129.172 254.688 li
129.052 254.688 li
124.012 249.648 li
127.012 256.728 li
127.012 256.848 127.012 256.848 127.012 256.848 cv
126.892 256.968 126.892 256.968 126.892 256.968 cv
126.892 257.088 126.772 257.088 126.772 257.208 cv
126.652 257.208 126.652 257.328 126.532 257.328 cv
126.412 257.448 li
126.412 257.448 126.412 257.448 126.292 257.448 cv
126.292 257.448 li
119.332 254.328 li
124.252 259.368 li
124.372 259.368 li
124.372 259.488 124.372 259.488 124.252 259.488 cv
124.252 259.608 124.252 259.608 124.252 259.728 cv
124.132 259.728 124.132 259.848 124.012 259.848 cv
124.012 259.968 123.892 259.968 123.892 260.088 cv
123.772 260.088 123.772 260.088 123.652 260.088 cv
123.652 260.208 123.652 260.208 123.652 260.208 cv
123.532 260.088 123.532 260.088 123.532 260.088 cv
118.252 254.808 li
118.132 254.688 118.012 254.568 118.132 254.448 cv
118.132 254.328 118.132 254.208 118.252 254.208 cv
118.732 253.728 li
118.732 253.608 118.852 253.488 118.972 253.488 cv
119.092 253.368 119.092 253.368 119.212 253.368 cv
119.332 253.368 119.452 253.368 119.572 253.368 cv
119.572 253.368 119.692 253.488 119.812 253.488 cv
125.572 256.008 li
125.692 256.008 li
123.172 250.128 li
123.172 250.008 123.052 249.888 123.052 249.768 cv
123.052 249.648 123.052 249.648 123.052 249.528 cv
123.052 249.408 123.052 249.408 123.172 249.288 cv
123.172 249.168 123.292 249.168 123.292 249.048 cv
123.772 248.568 li
123.892 248.568 123.892 248.448 124.012 248.448 cv
124.012 248.448 124.012 248.448 124.132 248.448 cv
124.252 248.448 li
124.372 248.448 124.372 248.568 124.492 248.568 cv
cp
f
136.372 264.888 mo
136.732 265.248 136.972 265.488 137.092 265.848 cv
137.212 266.208 137.212 266.448 137.212 266.808 cv
137.212 267.168 137.092 267.528 136.972 267.888 cv
136.852 268.248 136.492 268.488 136.252 268.848 cv
135.532 269.568 li
137.572 271.608 li
137.572 271.608 137.692 271.608 137.692 271.728 cv
137.692 271.728 137.692 271.728 137.572 271.848 cv
137.572 271.848 137.572 271.848 137.572 271.968 cv
137.452 271.968 137.452 272.088 137.332 272.088 cv
137.332 272.208 137.212 272.328 137.212 272.328 cv
137.092 272.328 137.092 272.328 136.972 272.448 cv
136.972 272.448 li
136.852 272.448 136.852 272.448 136.852 272.328 cv
131.572 267.048 li
131.452 266.928 131.332 266.808 131.452 266.688 cv
131.452 266.688 131.452 266.568 131.572 266.448 cv
132.772 265.248 li
132.892 265.128 133.012 265.008 133.132 264.888 cv
133.252 264.768 133.372 264.648 133.612 264.528 cv
133.732 264.408 133.972 264.288 134.212 264.288 cv
134.572 264.168 134.812 264.168 135.052 264.168 cv
135.292 264.168 135.532 264.288 135.772 264.408 cv
136.012 264.528 136.252 264.648 136.372 264.888 cv
cp
135.652 265.728 mo
135.412 265.488 135.172 265.368 134.932 265.368 cv
134.692 265.248 134.452 265.248 134.332 265.248 cv
134.092 265.368 133.972 265.488 133.732 265.608 cv
133.612 265.608 133.492 265.848 133.372 265.968 cv
132.652 266.568 li
134.932 268.968 li
135.652 268.248 li
135.892 268.008 136.012 267.768 136.132 267.528 cv
136.132 267.408 136.252 267.168 136.252 266.928 cv
136.252 266.688 136.132 266.568 136.132 266.328 cv
136.012 266.088 135.892 265.968 135.652 265.728 cv
cp
145.732 263.208 mo
145.852 263.328 li
145.972 263.328 145.972 263.448 145.972 263.448 cv
145.972 263.448 145.972 263.568 145.852 263.568 cv
145.852 263.688 145.732 263.688 145.612 263.808 cv
145.612 263.928 145.492 264.048 145.492 264.048 cv
145.372 264.048 145.372 264.168 145.252 264.168 cv
145.252 264.168 145.252 264.168 145.132 264.168 cv
145.132 264.168 li
143.212 263.208 li
140.812 265.608 li
141.772 267.528 li
141.772 267.648 141.772 267.648 141.772 267.648 cv
141.772 267.768 141.652 267.768 141.652 267.888 cv
141.652 267.888 141.532 268.008 141.412 268.008 cv
141.412 268.128 141.292 268.248 141.292 268.248 cv
141.172 268.248 141.172 268.368 141.052 268.368 cv
141.052 268.368 141.052 268.248 140.932 268.248 cv
140.932 268.248 140.932 268.128 140.812 268.008 cv
137.452 260.808 li
137.452 260.688 li
137.452 260.568 li
137.452 260.568 137.452 260.448 137.572 260.448 cv
137.572 260.328 137.692 260.208 137.812 260.208 cv
137.812 260.088 137.932 259.968 138.052 259.968 cv
138.052 259.848 138.172 259.848 138.172 259.848 cv
138.292 259.728 138.292 259.728 138.292 259.728 cv
138.412 259.728 138.412 259.728 138.412 259.848 cv
cp
138.532 260.928 mo
138.532 260.928 li
140.452 264.768 li
142.372 262.848 li
cp
145.012 253.608 mo
145.132 253.608 145.132 253.728 145.252 253.728 cv
145.252 253.848 li
145.252 253.968 li
145.252 253.968 145.252 253.968 145.252 254.088 cv
143.572 255.648 li
148.612 260.568 li
148.612 260.688 148.612 260.688 148.612 260.688 cv
148.612 260.808 li
148.612 260.808 148.612 260.928 148.492 260.928 cv
148.492 261.048 148.372 261.048 148.372 261.168 cv
148.252 261.168 148.252 261.288 148.132 261.288 cv
148.132 261.408 148.012 261.408 148.012 261.408 cv
147.892 261.408 li
142.852 256.368 li
141.292 258.048 li
141.172 258.048 141.172 258.048 141.172 258.048 cv
141.052 258.048 li
140.932 258.048 li
140.932 257.928 140.812 257.928 140.812 257.808 cv
140.692 257.808 140.692 257.808 140.692 257.688 cv
140.572 257.688 140.572 257.568 140.572 257.568 cv
140.572 257.448 li
140.572 257.448 140.572 257.448 140.572 257.328 cv
144.532 253.368 li
144.652 253.368 144.652 253.368 144.652 253.368 cv
144.772 253.368 li
144.772 253.368 144.892 253.368 144.892 253.488 cv
145.012 253.488 145.012 253.488 145.012 253.608 cv
cp
155.332 253.848 mo
155.452 253.848 155.452 253.848 155.452 253.968 cv
155.452 253.968 155.452 253.968 155.452 254.088 cv
155.332 254.088 155.332 254.088 155.332 254.208 cv
155.212 254.208 155.212 254.328 155.092 254.328 cv
155.092 254.448 154.972 254.448 154.972 254.568 cv
154.852 254.568 154.852 254.568 154.852 254.688 cv
154.732 254.688 154.732 254.688 154.732 254.688 cv
154.612 254.688 154.612 254.688 154.612 254.568 cv
152.092 252.048 li
149.452 254.688 li
151.972 257.208 li
152.092 257.328 li
152.092 257.328 152.092 257.328 151.972 257.448 cv
151.972 257.448 151.972 257.448 151.972 257.568 cv
151.852 257.568 151.852 257.688 151.732 257.688 cv
151.732 257.808 151.612 257.928 151.612 257.928 cv
151.492 257.928 151.492 257.928 151.372 258.048 cv
151.372 258.048 li
151.252 258.048 151.252 258.048 151.252 257.928 cv
145.732 252.528 li
145.732 252.408 145.732 252.408 145.732 252.408 cv
145.732 252.288 li
145.732 252.288 145.732 252.168 145.852 252.168 cv
145.852 252.048 145.852 252.048 145.972 251.928 cv
146.092 251.928 146.092 251.808 146.212 251.808 cv
146.212 251.688 146.332 251.688 146.332 251.688 cv
146.452 251.688 li
148.852 253.968 li
151.372 251.448 li
149.092 249.048 li
149.092 248.928 li
149.092 248.928 149.092 248.808 149.212 248.808 cv
149.212 248.688 149.332 248.688 149.332 248.568 cv
149.452 248.568 149.452 248.448 149.572 248.448 cv
149.572 248.328 149.692 248.328 149.692 248.328 cv
149.812 248.328 li
cp
f
171.052 262.368 mo
171.172 262.368 171.172 262.488 171.172 262.488 cv
171.292 262.608 li
171.292 262.608 171.292 262.608 171.292 262.728 cv
171.292 262.728 171.292 262.728 171.292 262.848 cv
171.292 262.848 171.292 262.968 171.292 263.208 cv
171.292 263.328 171.172 263.448 171.052 263.688 cv
171.052 263.928 170.932 264.048 170.812 264.288 cv
170.572 264.528 170.452 264.768 170.212 265.008 cv
169.852 265.368 169.492 265.608 169.012 265.848 cv
168.652 265.968 168.172 266.088 167.692 265.968 cv
167.212 265.968 166.852 265.848 166.372 265.608 cv
165.892 265.368 165.412 265.008 164.932 264.528 cv
164.452 264.048 164.092 263.568 163.852 263.088 cv
163.612 262.608 163.492 262.128 163.372 261.648 cv
163.372 261.168 163.492 260.688 163.612 260.208 cv
163.732 259.848 164.092 259.368 164.452 259.008 cv
164.572 258.888 164.812 258.648 164.932 258.528 cv
165.172 258.408 165.292 258.288 165.532 258.288 cv
165.652 258.168 165.892 258.048 166.012 258.048 cv
166.252 258.048 166.372 258.048 166.372 258.048 cv
166.492 258.048 166.492 258.048 166.612 258.048 cv
166.612 258.048 166.612 258.048 166.732 258.048 cv
166.732 258.048 166.732 258.048 166.852 258.168 cv
166.852 258.168 166.852 258.168 166.972 258.288 cv
167.092 258.408 li
167.092 258.528 167.092 258.528 167.212 258.528 cv
167.212 258.648 167.212 258.648 167.212 258.648 cv
167.212 258.648 167.212 258.768 167.092 258.768 cv
167.092 258.768 166.972 258.768 166.852 258.888 cv
166.732 258.888 166.612 258.888 166.372 258.888 cv
166.252 259.008 166.012 259.008 165.772 259.128 cv
165.532 259.248 165.292 259.488 165.052 259.728 cv
164.812 259.968 164.692 260.208 164.572 260.568 cv
164.452 260.808 164.452 261.168 164.452 261.528 cv
164.452 261.888 164.692 262.248 164.812 262.608 cv
165.052 262.968 165.292 263.328 165.652 263.688 cv
166.012 264.048 166.372 264.288 166.732 264.528 cv
167.092 264.768 167.452 264.888 167.812 264.888 cv
168.172 264.888 168.412 264.888 168.772 264.768 cv
169.132 264.648 169.372 264.408 169.612 264.168 cv
169.852 263.928 170.092 263.688 170.212 263.568 cv
170.332 263.328 170.332 263.088 170.452 262.848 cv
170.452 262.728 170.452 262.488 170.572 262.368 cv
170.572 262.248 170.572 262.128 170.572 262.128 cv
170.692 262.128 170.692 262.128 170.692 262.128 cv
170.692 262.128 170.692 262.128 170.812 262.128 cv
170.812 262.128 170.812 262.128 170.932 262.248 cv
170.932 262.248 171.052 262.248 171.052 262.368 cv
cp
175.852 257.568 mo
175.972 257.568 175.972 257.568 175.972 257.688 cv
176.092 257.688 176.092 257.688 176.092 257.808 cv
176.092 257.808 li
176.212 257.928 176.212 257.928 176.212 258.048 cv
176.212 258.048 176.092 258.168 176.092 258.288 cv
176.092 258.528 175.972 258.648 175.972 258.888 cv
175.852 259.008 175.732 259.248 175.612 259.488 cv
175.492 259.728 175.252 259.968 175.012 260.088 cv
174.652 260.448 174.292 260.808 173.812 260.928 cv
173.452 261.168 172.972 261.168 172.612 261.168 cv
172.132 261.168 171.652 261.048 171.172 260.808 cv
170.692 260.568 170.212 260.208 169.732 259.728 cv
169.252 259.248 168.892 258.768 168.652 258.288 cv
168.412 257.808 168.292 257.208 168.292 256.728 cv
168.172 256.248 168.292 255.888 168.412 255.408 cv
168.652 254.928 168.892 254.568 169.252 254.208 cv
169.492 253.968 169.612 253.848 169.852 253.728 cv
169.972 253.608 170.212 253.488 170.332 253.368 cv
170.572 253.368 170.692 253.248 170.932 253.248 cv
171.052 253.128 171.172 253.128 171.292 253.128 cv
171.412 253.128 li
171.532 253.248 li
171.532 253.248 171.532 253.248 171.652 253.248 cv
171.652 253.368 171.772 253.368 171.772 253.488 cv
171.892 253.488 171.892 253.488 171.892 253.608 cv
172.012 253.608 172.012 253.728 172.012 253.728 cv
172.012 253.848 li
171.892 253.968 171.892 253.968 171.772 253.968 cv
171.532 253.968 171.412 254.088 171.292 254.088 cv
171.052 254.088 170.812 254.208 170.572 254.328 cv
170.452 254.448 170.212 254.568 169.972 254.808 cv
169.732 255.048 169.492 255.408 169.372 255.648 cv
169.252 256.008 169.252 256.368 169.252 256.728 cv
169.372 256.968 169.492 257.328 169.732 257.808 cv
169.852 258.168 170.212 258.528 170.572 258.888 cv
170.932 259.248 171.292 259.488 171.652 259.728 cv
172.012 259.848 172.372 259.968 172.612 260.088 cv
172.972 260.088 173.332 260.088 173.572 259.968 cv
173.932 259.848 174.172 259.608 174.532 259.368 cv
174.772 259.128 174.892 258.888 175.012 258.648 cv
175.132 258.408 175.252 258.288 175.252 258.048 cv
175.252 257.808 175.372 257.688 175.372 257.568 cv
175.372 257.448 175.372 257.328 175.492 257.328 cv
175.492 257.208 li
175.492 257.208 175.612 257.208 175.612 257.328 cv
175.732 257.328 li
175.732 257.448 175.852 257.448 175.852 257.568 cv
cp
180.772 252.648 mo
180.772 252.768 180.892 252.768 180.892 252.768 cv
180.892 252.888 180.892 252.888 180.892 252.888 cv
181.012 253.008 181.012 253.008 181.012 253.008 cv
181.012 253.128 li
181.012 253.248 181.012 253.368 180.892 253.488 cv
180.892 253.608 180.892 253.848 180.772 253.968 cv
180.652 254.208 180.532 254.448 180.412 254.688 cv
180.292 254.808 180.172 255.048 179.932 255.288 cv
179.572 255.648 179.092 255.888 178.732 256.128 cv
178.252 256.248 177.892 256.368 177.412 256.368 cv
176.932 256.248 176.452 256.128 175.972 255.888 cv
175.492 255.648 175.132 255.288 174.652 254.808 cv
174.172 254.328 173.812 253.848 173.572 253.368 cv
173.212 252.888 173.092 252.408 173.092 251.928 cv
173.092 251.448 173.092 250.968 173.332 250.608 cv
173.452 250.128 173.692 249.648 174.172 249.288 cv
174.292 249.168 174.412 249.048 174.652 248.928 cv
174.892 248.808 175.012 248.688 175.252 248.568 cv
175.372 248.448 175.492 248.448 175.732 248.328 cv
175.852 248.328 175.972 248.328 176.092 248.328 cv
176.212 248.328 176.212 248.328 176.212 248.328 cv
176.332 248.328 176.332 248.328 176.332 248.328 cv
176.332 248.448 176.452 248.448 176.452 248.448 cv
176.572 248.448 176.572 248.568 176.572 248.568 cv
176.692 248.688 176.692 248.688 176.812 248.808 cv
176.812 248.808 176.812 248.808 176.812 248.928 cv
176.812 248.928 li
176.812 249.048 176.812 249.048 176.812 249.048 cv
176.812 249.048 176.692 249.168 176.572 249.168 cv
176.452 249.168 176.212 249.168 176.092 249.288 cv
175.852 249.288 175.732 249.408 175.492 249.528 cv
175.252 249.648 175.012 249.768 174.772 250.008 cv
174.532 250.248 174.292 250.488 174.172 250.848 cv
174.172 251.208 174.052 251.448 174.172 251.808 cv
174.172 252.168 174.292 252.528 174.532 252.888 cv
174.772 253.248 175.012 253.608 175.372 253.968 cv
175.732 254.328 176.092 254.688 176.452 254.808 cv
176.812 255.048 177.172 255.168 177.532 255.168 cv
177.772 255.288 178.132 255.168 178.492 255.048 cv
178.732 254.928 179.092 254.808 179.332 254.568 cv
179.572 254.328 179.692 254.088 179.812 253.848 cv
179.932 253.608 180.052 253.368 180.052 253.248 cv
180.172 253.008 180.172 252.888 180.172 252.768 cv
180.172 252.648 180.292 252.528 180.292 252.408 cv
180.292 252.408 180.292 252.408 180.412 252.408 cv
180.412 252.408 li
180.532 252.408 180.532 252.528 180.532 252.528 cv
180.652 252.528 180.652 252.648 180.772 252.648 cv
cp
f
190.492 269.928 mo
190.492 269.928 190.492 269.928 190.492 270.048 cv
190.492 270.048 190.492 270.048 190.492 270.168 cv
190.492 270.168 190.492 270.168 190.372 270.288 cv
190.372 270.288 190.372 270.408 190.252 270.408 cv
190.132 270.528 190.132 270.528 190.012 270.648 cv
190.012 270.648 190.012 270.648 189.892 270.768 cv
189.892 270.768 189.892 270.768 189.772 270.768 cv
189.772 270.768 189.772 270.768 189.772 270.648 cv
184.252 265.128 li
184.132 265.128 li
184.132 265.128 184.132 265.008 184.252 265.008 cv
184.252 264.888 li
184.372 264.768 184.372 264.768 184.492 264.648 cv
184.612 264.528 li
184.732 264.408 184.732 264.408 184.852 264.408 cv
184.852 264.408 li
184.972 264.408 184.972 264.408 184.972 264.408 cv
cp
196.132 263.808 mo
196.252 263.928 196.252 263.928 196.252 264.048 cv
196.252 264.048 196.372 264.168 196.252 264.168 cv
196.252 264.288 196.252 264.288 196.252 264.408 cv
196.252 264.408 196.252 264.528 196.132 264.528 cv
195.892 264.768 li
195.772 264.888 195.772 264.888 195.652 265.008 cv
195.652 265.008 195.532 265.008 195.412 265.008 cv
195.292 265.008 195.172 265.008 195.052 265.008 cv
194.932 265.008 194.812 265.008 194.572 264.888 cv
189.652 263.448 li
189.412 263.328 189.052 263.208 188.812 263.088 cv
188.572 263.088 188.212 262.968 187.972 262.848 cv
188.212 263.088 188.452 263.328 188.692 263.568 cv
188.932 263.688 189.172 263.928 189.292 264.168 cv
192.772 267.648 li
192.772 267.648 192.772 267.648 192.892 267.648 cv
192.892 267.768 192.892 267.768 192.772 267.768 cv
192.772 267.888 192.772 267.888 192.772 268.008 cv
192.652 268.008 192.652 268.128 192.532 268.128 cv
192.532 268.248 192.412 268.248 192.412 268.368 cv
192.292 268.368 192.292 268.368 192.172 268.368 cv
192.172 268.488 192.172 268.488 192.052 268.488 cv
192.052 268.368 192.052 268.368 192.052 268.368 cv
186.772 263.088 li
186.652 262.968 186.532 262.848 186.532 262.728 cv
186.652 262.608 186.652 262.488 186.772 262.488 cv
187.132 262.128 li
187.252 262.008 187.252 261.888 187.372 261.888 cv
187.372 261.888 187.492 261.768 187.612 261.768 cv
187.612 261.768 187.732 261.768 187.852 261.768 cv
187.972 261.768 188.092 261.888 188.212 261.888 cv
192.052 263.088 li
192.292 263.088 192.532 263.208 192.772 263.208 cv
193.012 263.328 193.252 263.448 193.492 263.448 cv
193.612 263.568 193.852 263.568 194.092 263.688 cv
194.332 263.808 194.452 263.808 194.692 263.928 cv
194.452 263.688 194.212 263.448 193.972 263.208 cv
193.732 262.968 193.492 262.728 193.252 262.488 cv
190.132 259.368 li
190.132 259.248 li
190.012 259.248 190.132 259.128 190.132 259.128 cv
190.132 259.008 li
190.252 258.888 190.252 258.888 190.372 258.768 cv
190.492 258.648 li
190.612 258.528 190.612 258.528 190.732 258.528 cv
190.732 258.528 190.732 258.528 190.852 258.528 cv
190.852 258.528 li
cp
195.532 254.328 mo
195.652 254.328 195.652 254.328 195.652 254.448 cv
195.772 254.448 195.772 254.568 195.772 254.568 cv
195.772 254.688 li
195.772 254.688 195.772 254.688 195.772 254.808 cv
193.612 256.848 li
195.532 258.768 li
197.572 256.848 li
197.572 256.848 197.572 256.728 197.692 256.728 cv
197.692 256.728 li
197.812 256.728 197.812 256.848 197.812 256.848 cv
197.932 256.848 197.932 256.968 198.052 256.968 cv
198.052 257.088 198.172 257.088 198.172 257.088 cv
198.172 257.208 198.172 257.208 198.172 257.208 cv
198.292 257.328 198.292 257.328 198.292 257.328 cv
198.172 257.448 198.172 257.448 198.172 257.448 cv
196.252 259.488 li
198.652 261.768 li
198.652 261.888 198.652 261.888 198.652 261.888 cv
198.652 262.008 li
198.532 262.128 li
198.532 262.248 198.412 262.248 198.412 262.368 cv
198.292 262.368 198.172 262.488 198.172 262.488 cv
198.052 262.608 198.052 262.608 198.052 262.608 cv
197.932 262.608 197.932 262.608 197.932 262.608 cv
197.812 262.608 li
192.532 257.328 li
192.412 257.208 192.412 257.088 192.412 256.968 cv
192.412 256.848 192.412 256.728 192.532 256.728 cv
195.052 254.088 li
195.172 254.088 li
195.172 254.088 195.172 254.088 195.292 254.088 cv
195.412 254.088 li
195.412 254.208 195.532 254.208 195.532 254.328 cv
cp
204.052 250.728 mo
204.532 251.208 204.892 251.688 205.132 252.168 cv
205.372 252.648 205.612 253.128 205.612 253.608 cv
205.612 254.088 205.612 254.568 205.372 255.048 cv
205.252 255.528 204.892 255.888 204.412 256.368 cv
204.052 256.848 203.572 257.088 203.092 257.328 cv
202.732 257.448 202.252 257.568 201.772 257.568 cv
201.412 257.448 200.932 257.328 200.452 257.088 cv
199.972 256.848 199.492 256.368 199.012 256.008 cv
198.532 255.528 198.172 255.048 197.932 254.568 cv
197.692 254.088 197.572 253.608 197.452 253.128 cv
197.452 252.648 197.572 252.168 197.692 251.688 cv
197.932 251.208 198.292 250.728 198.652 250.368 cv
199.132 249.888 199.492 249.648 199.972 249.408 cv
200.452 249.288 200.812 249.168 201.292 249.168 cv
201.772 249.288 202.252 249.408 202.612 249.648 cv
203.092 249.888 203.572 250.248 204.052 250.728 cv
cp
203.332 251.568 mo
202.972 251.208 202.612 250.968 202.252 250.728 cv
202.012 250.488 201.652 250.368 201.292 250.368 cv
200.932 250.248 200.572 250.248 200.332 250.368 cv
199.972 250.488 199.612 250.728 199.252 251.088 cv
198.892 251.328 198.772 251.688 198.652 252.048 cv
198.532 252.408 198.532 252.768 198.532 253.128 cv
198.652 253.488 198.772 253.848 199.012 254.088 cv
199.252 254.448 199.492 254.808 199.732 255.048 cv
200.092 255.408 200.452 255.768 200.812 255.888 cv
201.172 256.128 201.532 256.368 201.772 256.368 cv
202.132 256.488 202.492 256.488 202.852 256.368 cv
203.212 256.248 203.452 256.008 203.812 255.648 cv
204.172 255.288 204.412 255.048 204.532 254.688 cv
204.532 254.328 204.652 253.968 204.532 253.608 cv
204.412 253.248 204.292 252.888 204.052 252.528 cv
203.932 252.168 203.572 251.928 203.332 251.568 cv
cp
f
217.972 268.008 mo
218.092 268.008 218.092 268.008 218.092 268.008 cv
218.092 268.128 218.092 268.128 218.092 268.128 cv
218.092 268.248 217.972 268.248 217.972 268.368 cv
217.972 268.368 217.852 268.488 217.732 268.488 cv
217.732 268.608 217.612 268.728 217.612 268.728 cv
217.492 268.728 217.492 268.848 217.372 268.848 cv
217.372 268.848 217.372 268.848 217.252 268.848 cv
217.252 268.848 217.252 268.848 217.132 268.728 cv
215.332 268.008 li
215.092 267.888 214.852 267.768 214.612 267.768 cv
214.492 267.648 214.252 267.648 214.132 267.648 cv
213.892 267.648 213.772 267.648 213.532 267.768 cv
213.412 267.768 213.172 267.888 213.052 268.128 cv
212.572 268.608 li
214.972 271.008 li
214.972 271.128 214.972 271.128 214.972 271.128 cv
214.972 271.248 li
214.972 271.248 214.972 271.368 214.852 271.368 cv
214.852 271.488 214.852 271.488 214.732 271.608 cv
214.612 271.608 214.612 271.728 214.492 271.728 cv
214.372 271.848 li
214.372 271.848 214.372 271.848 214.252 271.848 cv
214.252 271.848 li
208.852 266.448 li
208.732 266.448 208.732 266.328 208.732 266.208 cv
208.732 266.088 208.852 265.968 208.852 265.968 cv
210.052 264.648 li
210.292 264.528 210.412 264.408 210.412 264.288 cv
210.532 264.288 210.652 264.168 210.772 264.048 cv
211.012 263.928 211.252 263.808 211.492 263.688 cv
211.732 263.568 211.972 263.568 212.212 263.568 cv
212.452 263.568 212.692 263.688 212.932 263.808 cv
213.172 263.928 213.412 264.048 213.532 264.168 cv
213.772 264.408 213.892 264.648 214.012 264.768 cv
214.132 265.008 214.132 265.248 214.252 265.488 cv
214.252 265.608 214.252 265.848 214.132 266.088 cv
214.132 266.328 214.012 266.568 213.892 266.808 cv
214.012 266.688 214.132 266.688 214.372 266.688 cv
214.492 266.688 214.612 266.688 214.732 266.688 cv
214.972 266.688 215.092 266.688 215.212 266.808 cv
215.452 266.808 215.572 266.928 215.812 267.048 cv
217.612 267.768 li
217.732 267.768 217.852 267.888 217.972 267.888 cv
217.972 268.008 li
cp
212.812 265.128 mo
212.572 264.888 212.332 264.768 212.092 264.648 cv
211.852 264.648 211.612 264.648 211.252 264.888 cv
211.252 264.888 211.132 265.008 211.012 265.008 cv
210.892 265.128 210.772 265.248 210.652 265.368 cv
209.932 266.088 li
211.852 268.008 li
212.692 267.288 li
212.812 267.048 213.052 266.808 213.052 266.688 cv
213.172 266.448 213.292 266.328 213.292 266.088 cv
213.292 265.848 213.292 265.728 213.172 265.608 cv
213.052 265.368 213.052 265.248 212.812 265.128 cv
cp
223.252 262.368 mo
223.372 262.488 223.492 262.488 223.492 262.488 cv
223.492 262.608 223.612 262.608 223.612 262.608 cv
223.612 262.728 223.492 262.728 223.492 262.848 cv
223.372 262.848 223.372 262.968 223.252 263.088 cv
223.132 263.088 223.132 263.208 223.012 263.208 cv
223.012 263.328 222.892 263.328 222.892 263.328 cv
222.772 263.328 li
222.772 263.328 222.772 263.328 222.652 263.328 cv
220.852 262.488 li
218.452 264.768 li
219.292 266.688 li
219.292 266.688 219.412 266.688 219.412 266.808 cv
219.412 266.808 219.412 266.808 219.292 266.928 cv
219.292 266.928 219.292 266.928 219.292 267.048 cv
219.172 267.048 219.172 267.168 219.052 267.288 cv
218.932 267.288 218.932 267.408 218.812 267.408 cv
218.812 267.528 218.692 267.528 218.692 267.528 cv
218.692 267.528 218.572 267.528 218.572 267.408 cv
218.452 267.288 li
215.092 259.968 li
214.972 259.968 214.972 259.968 214.972 259.848 cv
214.972 259.848 214.972 259.848 215.092 259.728 cv
215.092 259.728 215.092 259.608 215.212 259.608 cv
215.212 259.488 215.332 259.488 215.332 259.368 cv
215.452 259.248 215.572 259.248 215.572 259.128 cv
215.692 259.128 215.692 259.008 215.812 259.008 cv
215.932 259.008 li
216.052 259.008 li
cp
216.172 260.208 mo
216.172 260.208 li
217.972 264.048 li
220.012 262.008 li
cp
227.452 257.088 mo
227.572 257.208 227.572 257.208 227.572 257.208 cv
227.692 257.328 227.692 257.328 227.692 257.328 cv
227.692 257.448 227.692 257.448 227.692 257.448 cv
227.812 257.568 li
227.812 257.688 227.692 257.808 227.692 257.928 cv
227.692 258.048 227.572 258.288 227.572 258.408 cv
227.452 258.648 227.332 258.888 227.212 259.128 cv
227.092 259.248 226.852 259.488 226.612 259.728 cv
226.252 260.088 225.892 260.328 225.412 260.568 cv
225.052 260.688 224.572 260.808 224.092 260.808 cv
223.732 260.688 223.252 260.568 222.772 260.328 cv
222.292 260.088 221.812 259.728 221.332 259.248 cv
220.852 258.888 220.492 258.288 220.252 257.808 cv
220.012 257.328 219.892 256.848 219.892 256.368 cv
219.772 255.888 219.892 255.408 220.012 255.048 cv
220.252 254.568 220.492 254.088 220.852 253.728 cv
221.092 253.608 221.212 253.488 221.452 253.368 cv
221.572 253.248 221.812 253.128 221.932 253.008 cv
222.172 252.888 222.292 252.888 222.412 252.888 cv
222.652 252.768 222.772 252.768 222.892 252.768 cv
223.012 252.768 li
223.012 252.768 223.012 252.768 223.132 252.768 cv
223.132 252.888 223.132 252.888 223.252 252.888 cv
223.372 253.008 li
223.372 253.128 223.492 253.128 223.492 253.248 cv
223.492 253.248 223.612 253.248 223.612 253.368 cv
223.612 253.368 223.612 253.368 223.612 253.488 cv
223.612 253.488 li
223.492 253.608 223.492 253.608 223.252 253.608 cv
223.132 253.608 223.012 253.608 222.772 253.728 cv
222.652 253.728 222.412 253.848 222.172 253.968 cv
221.932 254.088 221.812 254.208 221.572 254.448 cv
221.212 254.688 221.092 255.048 220.972 255.288 cv
220.852 255.648 220.852 255.888 220.852 256.248 cv
220.972 256.608 221.092 256.968 221.212 257.328 cv
221.452 257.688 221.812 258.048 222.172 258.408 cv
222.532 258.768 222.892 259.128 223.252 259.248 cv
223.612 259.488 223.852 259.608 224.212 259.608 cv
224.572 259.728 224.932 259.608 225.172 259.488 cv
225.532 259.488 225.772 259.248 226.132 259.008 cv
226.252 258.768 226.492 258.528 226.612 258.288 cv
226.732 258.048 226.732 257.808 226.852 257.688 cv
226.852 257.448 226.972 257.328 226.972 257.208 cv
226.972 257.088 226.972 256.968 227.092 256.848 cv
227.092 256.848 li
227.212 256.848 li
227.332 256.968 li
227.452 257.088 li
cp
232.252 253.368 mo
232.252 253.488 232.252 253.488 232.372 253.608 cv
232.372 253.608 232.372 253.608 232.372 253.728 cv
232.372 253.728 232.372 253.728 232.372 253.848 cv
232.372 253.848 li
229.612 256.608 li
229.492 256.728 229.492 256.728 229.372 256.728 cv
229.252 256.728 229.132 256.728 229.012 256.608 cv
223.852 251.448 li
223.732 251.328 223.732 251.328 223.732 251.208 cv
223.732 251.088 223.852 250.968 223.852 250.968 cv
226.612 248.208 li
226.612 248.208 226.612 248.208 226.732 248.088 cv
226.732 248.088 226.732 248.088 226.732 248.208 cv
226.852 248.208 226.852 248.208 226.852 248.208 cv
226.972 248.208 226.972 248.328 227.092 248.328 cv
227.092 248.448 227.212 248.448 227.212 248.568 cv
227.212 248.568 227.212 248.568 227.212 248.688 cv
227.332 248.688 227.332 248.688 227.332 248.688 cv
227.212 248.808 227.212 248.808 227.212 248.808 cv
224.932 251.088 li
226.732 252.888 li
228.652 250.968 li
228.772 250.968 228.772 250.848 228.772 250.848 cv
228.892 250.848 li
228.892 250.968 229.012 250.968 229.012 250.968 cv
229.132 251.088 li
229.252 251.208 229.252 251.208 229.252 251.208 cv
229.372 251.328 229.372 251.328 229.372 251.328 cv
229.372 251.448 229.372 251.448 229.372 251.448 cv
229.372 251.568 li
227.452 253.488 li
229.492 255.528 li
231.772 253.248 li
231.892 253.248 231.892 253.248 231.892 253.248 cv
232.012 253.248 232.012 253.248 232.012 253.248 cv
232.132 253.368 232.132 253.368 232.252 253.368 cv
cp
f
244.252 259.488 mo
244.492 259.848 244.732 260.088 244.852 260.448 cv
244.972 260.808 245.092 261.048 244.972 261.408 cv
244.972 261.768 244.972 262.128 244.732 262.488 cv
244.612 262.848 244.372 263.208 244.012 263.568 cv
243.292 264.168 li
245.332 266.208 li
245.452 266.208 245.452 266.328 245.452 266.328 cv
245.452 266.328 245.452 266.328 245.452 266.448 cv
245.332 266.448 245.332 266.448 245.332 266.568 cv
245.332 266.568 245.212 266.688 245.092 266.808 cv
244.972 266.928 li
244.852 266.928 244.852 267.048 244.852 267.048 cv
244.732 267.048 244.732 267.048 244.732 267.048 cv
244.612 267.048 li
239.332 261.648 li
239.212 261.528 239.212 261.528 239.212 261.408 cv
239.212 261.288 239.212 261.168 239.332 261.048 cv
240.532 259.848 li
240.652 259.728 240.772 259.608 240.892 259.488 cv
241.012 259.368 241.132 259.248 241.372 259.128 cv
241.612 259.008 241.732 259.008 242.092 258.888 cv
242.332 258.768 242.572 258.768 242.812 258.768 cv
243.052 258.888 243.292 258.888 243.532 259.008 cv
243.772 259.128 244.012 259.368 244.252 259.488 cv
cp
243.412 260.448 mo
243.292 260.208 243.052 259.968 242.812 259.968 cv
242.452 259.848 242.332 259.848 242.092 259.968 cv
241.852 259.968 241.732 260.088 241.492 260.208 cv
241.372 260.328 241.252 260.448 241.132 260.568 cv
240.412 261.288 li
242.692 263.568 li
243.412 262.848 li
243.652 262.608 243.772 262.368 243.892 262.248 cv
244.012 262.008 244.012 261.768 244.012 261.528 cv
244.012 261.408 244.012 261.168 243.892 260.928 cv
243.772 260.808 243.652 260.568 243.412 260.448 cv
cp
248.932 254.808 mo
249.172 255.048 249.412 255.408 249.532 255.768 cv
249.652 256.008 249.772 256.368 249.772 256.728 cv
249.772 257.088 249.652 257.448 249.532 257.808 cv
249.292 258.048 249.052 258.408 248.692 258.768 cv
248.092 259.488 li
250.132 261.528 li
250.132 261.528 250.132 261.528 250.132 261.648 cv
250.132 261.648 li
250.132 261.768 250.132 261.768 250.012 261.888 cv
249.892 262.008 li
249.772 262.128 249.772 262.128 249.652 262.248 cv
249.532 262.248 li
249.532 262.368 249.412 262.368 249.412 262.368 cv
249.412 262.368 249.412 262.248 249.292 262.248 cv
244.012 256.968 li
243.892 256.848 243.892 256.728 243.892 256.608 cv
243.892 256.488 243.892 256.488 244.012 256.368 cv
245.212 255.168 li
245.332 255.048 245.452 254.928 245.572 254.808 cv
245.692 254.688 245.932 254.568 246.052 254.448 cv
246.292 254.328 246.532 254.208 246.772 254.208 cv
247.012 254.088 247.252 254.088 247.492 254.088 cv
247.732 254.088 247.972 254.208 248.212 254.328 cv
248.452 254.448 248.692 254.568 248.932 254.808 cv
cp
248.212 255.648 mo
247.972 255.408 247.732 255.288 247.492 255.168 cv
247.252 255.168 247.012 255.168 246.772 255.168 cv
246.652 255.288 246.412 255.288 246.292 255.408 cv
246.052 255.528 245.932 255.648 245.812 255.768 cv
245.092 256.488 li
247.372 258.768 li
248.092 258.168 li
248.332 257.928 248.452 257.688 248.572 257.448 cv
248.692 257.208 248.692 257.088 248.692 256.848 cv
248.692 256.608 248.692 256.488 248.572 256.248 cv
248.452 256.008 248.332 255.888 248.212 255.648 cv
cp
258.172 253.128 mo
258.292 253.128 258.412 253.248 258.412 253.248 cv
258.412 253.248 258.412 253.248 258.412 253.368 cv
258.412 253.488 li
258.292 253.608 258.292 253.608 258.172 253.728 cv
258.052 253.848 258.052 253.848 257.932 253.968 cv
257.812 254.088 li
257.692 254.088 li
257.572 254.088 li
255.652 253.128 li
253.372 255.528 li
254.212 257.328 li
254.212 257.448 254.212 257.448 254.212 257.448 cv
254.212 257.568 254.212 257.568 254.212 257.568 cv
254.212 257.688 254.212 257.688 254.092 257.688 cv
254.092 257.808 254.092 257.808 253.972 257.928 cv
253.852 258.048 253.852 258.048 253.732 258.168 cv
253.612 258.168 253.612 258.168 253.612 258.168 cv
253.492 258.168 253.492 258.168 253.492 258.168 cv
253.372 258.168 253.372 258.048 253.372 257.928 cv
249.892 250.728 li
249.892 250.608 li
249.892 250.488 li
250.012 250.368 250.012 250.368 250.012 250.248 cv
250.132 250.248 250.132 250.128 250.252 250.008 cv
250.372 250.008 250.492 249.888 250.492 249.888 cv
250.612 249.768 250.612 249.768 250.732 249.768 cv
250.732 249.648 250.732 249.648 250.852 249.648 cv
250.852 249.648 250.852 249.648 250.972 249.648 cv
cp
250.972 250.848 mo
250.972 250.848 li
252.892 254.688 li
254.932 252.768 li
cp
f
266.692 270.528 mo
266.692 270.648 266.692 270.648 266.692 270.648 cv
266.692 270.768 li
266.572 270.888 li
266.572 271.008 266.452 271.008 266.452 271.128 cv
266.332 271.128 266.212 271.248 266.212 271.248 cv
266.212 271.368 266.092 271.368 266.092 271.368 cv
265.972 271.368 265.972 271.368 265.972 271.368 cv
265.852 271.368 li
263.332 268.848 li
260.692 271.368 li
263.332 273.888 li
263.332 274.008 263.332 274.008 263.332 274.008 cv
263.332 274.128 li
263.212 274.248 li
263.212 274.368 263.092 274.368 263.092 274.488 cv
262.972 274.488 262.852 274.608 262.852 274.608 cv
262.732 274.728 262.732 274.728 262.732 274.728 cv
262.612 274.728 262.612 274.728 262.612 274.728 cv
262.492 274.728 li
256.972 269.208 li
256.972 269.208 256.972 269.208 256.972 269.088 cv
256.972 269.088 256.972 269.088 256.972 268.968 cv
256.972 268.968 257.092 268.968 257.092 268.848 cv
257.212 268.728 li
257.332 268.608 257.332 268.608 257.452 268.488 cv
257.452 268.488 257.572 268.488 257.572 268.368 cv
257.692 268.368 li
257.692 268.368 257.692 268.368 257.812 268.488 cv
260.092 270.768 li
262.732 268.128 li
260.332 265.848 li
260.332 265.728 li
260.332 265.728 260.332 265.728 260.332 265.608 cv
260.332 265.608 260.452 265.608 260.452 265.488 cv
260.572 265.368 li
260.692 265.248 260.812 265.128 260.812 265.128 cv
260.812 265.128 260.932 265.128 260.932 265.008 cv
261.052 265.008 261.052 265.008 261.052 265.008 cv
261.052 265.008 261.172 265.008 261.172 265.128 cv
cp
272.332 264.528 mo
272.452 264.648 272.452 264.648 272.572 264.648 cv
272.572 264.768 272.572 264.768 272.572 264.768 cv
272.572 264.888 272.572 264.888 272.452 265.008 cv
272.452 265.008 272.332 265.128 272.332 265.248 cv
272.212 265.248 272.092 265.368 272.092 265.368 cv
271.972 265.488 271.972 265.488 271.972 265.488 cv
271.852 265.488 271.852 265.488 271.852 265.488 cv
271.732 265.488 li
269.812 264.648 li
267.412 266.928 li
268.372 268.848 li
268.372 268.848 268.372 268.848 268.372 268.968 cv
268.372 268.968 268.372 268.968 268.372 269.088 cv
268.372 269.088 268.372 269.088 268.252 269.208 cv
268.252 269.208 268.132 269.328 268.132 269.448 cv
268.012 269.448 267.892 269.568 267.892 269.568 cv
267.772 269.688 267.772 269.688 267.772 269.688 cv
267.652 269.688 267.652 269.688 267.532 269.568 cv
267.532 269.568 267.532 269.568 267.412 269.448 cv
264.052 262.128 li
264.052 262.128 264.052 262.128 264.052 262.008 cv
264.052 262.008 264.052 262.008 264.052 261.888 cv
264.172 261.768 li
264.292 261.648 264.292 261.648 264.412 261.528 cv
264.532 261.408 264.532 261.408 264.652 261.288 cv
264.772 261.168 li
264.892 261.168 264.892 261.168 265.012 261.168 cv
265.012 261.168 265.012 261.168 265.132 261.168 cv
cp
265.132 262.368 mo
265.132 262.368 li
267.052 266.208 li
268.972 264.168 li
cp
277.492 259.248 mo
277.612 259.368 277.612 259.368 277.612 259.488 cv
277.732 259.488 277.732 259.608 277.732 259.608 cv
277.732 259.728 277.612 259.728 277.612 259.848 cv
277.612 259.848 277.612 259.848 277.492 259.968 cv
277.252 260.208 li
277.252 260.328 277.132 260.328 277.012 260.328 cv
277.012 260.448 276.892 260.448 276.772 260.448 cv
276.652 260.448 276.532 260.448 276.412 260.448 cv
276.292 260.448 276.172 260.448 276.052 260.328 cv
271.012 258.768 li
270.772 258.768 270.412 258.648 270.172 258.528 cv
269.932 258.528 269.692 258.408 269.332 258.288 cv
269.572 258.528 269.812 258.768 270.052 258.888 cv
270.292 259.128 270.532 259.368 270.652 259.608 cv
274.132 263.088 li
274.252 263.088 li
274.252 263.208 274.252 263.208 274.132 263.208 cv
274.132 263.328 274.132 263.328 274.132 263.328 cv
274.012 263.448 274.012 263.448 273.892 263.568 cv
273.892 263.688 273.772 263.688 273.772 263.808 cv
273.652 263.808 273.652 263.808 273.532 263.808 cv
273.532 263.808 li
273.412 263.808 273.412 263.808 273.412 263.808 cv
268.132 258.528 li
268.012 258.408 267.892 258.288 268.012 258.168 cv
268.012 258.048 268.012 257.928 268.132 257.928 cv
268.492 257.448 li
268.612 257.448 268.612 257.328 268.732 257.328 cv
268.852 257.208 268.852 257.208 268.972 257.208 cv
269.092 257.208 269.092 257.208 269.212 257.208 cv
269.332 257.208 269.452 257.328 269.572 257.328 cv
273.412 258.528 li
273.652 258.528 273.892 258.648 274.132 258.648 cv
274.372 258.768 274.612 258.888 274.852 258.888 cv
274.972 259.008 275.212 259.008 275.452 259.128 cv
275.692 259.128 275.812 259.248 276.052 259.368 cv
275.812 259.128 275.572 258.888 275.332 258.648 cv
275.092 258.288 274.852 258.048 274.612 257.808 cv
271.492 254.808 li
271.492 254.688 271.492 254.688 271.492 254.688 cv
271.492 254.568 li
271.492 254.448 li
271.612 254.328 271.612 254.328 271.732 254.208 cv
271.852 254.208 271.852 254.088 271.972 254.088 cv
271.972 253.968 271.972 253.968 272.092 253.968 cv
272.092 253.968 272.092 253.968 272.212 253.968 cv
272.212 253.968 li
cp
280.852 250.608 mo
281.452 251.088 281.812 251.688 282.052 252.168 cv
282.292 252.648 282.412 253.128 282.412 253.608 cv
282.412 254.088 282.292 254.568 282.052 255.048 cv
281.812 255.528 281.452 256.008 280.972 256.488 cv
279.772 257.688 li
279.652 257.808 279.532 257.808 279.412 257.808 cv
279.412 257.808 279.292 257.808 279.172 257.688 cv
274.012 252.528 li
273.892 252.408 273.892 252.408 273.892 252.288 cv
273.892 252.168 273.892 252.048 274.012 251.928 cv
275.332 250.728 li
275.812 250.248 276.292 249.888 276.772 249.648 cv
277.252 249.408 277.732 249.288 278.212 249.288 cv
278.572 249.288 279.052 249.408 279.532 249.648 cv
280.012 249.888 280.492 250.248 280.852 250.608 cv
cp
280.132 251.448 mo
279.772 251.208 279.532 250.968 279.172 250.728 cv
278.812 250.488 278.452 250.368 278.092 250.368 cv
277.732 250.368 277.372 250.368 277.012 250.608 cv
276.652 250.728 276.292 250.968 275.932 251.328 cv
275.092 252.168 li
279.532 256.608 li
280.372 255.768 li
280.732 255.408 280.972 255.048 281.092 254.808 cv
281.332 254.448 281.332 254.088 281.332 253.728 cv
281.332 253.368 281.212 253.008 280.972 252.648 cv
280.852 252.288 280.492 251.928 280.132 251.448 cv
cp
f
304.612 254.208 mo
304.972 254.568 305.212 254.928 305.452 255.288 cv
305.572 255.648 305.692 256.008 305.692 256.368 cv
305.692 256.728 305.572 257.088 305.452 257.448 cv
305.212 257.808 304.972 258.168 304.612 258.528 cv
304.372 258.888 304.012 259.128 303.652 259.248 cv
303.292 259.488 302.932 259.608 302.572 259.608 cv
302.212 259.608 301.852 259.488 301.492 259.368 cv
301.132 259.128 300.772 258.888 300.412 258.528 cv
296.812 254.928 li
296.812 254.808 li
296.812 254.808 296.812 254.688 296.932 254.688 cv
296.932 254.568 296.932 254.568 297.052 254.448 cv
297.172 254.328 297.172 254.328 297.292 254.328 cv
297.292 254.208 297.412 254.208 297.412 254.208 cv
297.532 254.208 li
301.012 257.688 li
301.372 257.928 301.612 258.168 301.852 258.288 cv
302.092 258.408 302.332 258.528 302.572 258.528 cv
302.932 258.528 303.172 258.408 303.412 258.408 cv
303.652 258.288 303.772 258.048 304.012 257.928 cv
304.252 257.688 304.372 257.448 304.492 257.208 cv
304.612 256.968 304.732 256.728 304.732 256.488 cv
304.612 256.248 304.612 255.888 304.492 255.648 cv
304.372 255.408 304.132 255.168 303.892 254.928 cv
300.412 251.448 li
300.412 251.448 300.412 251.328 300.292 251.328 cv
300.292 251.328 300.292 251.328 300.412 251.208 cv
300.412 251.088 li
300.532 251.088 300.532 250.968 300.652 250.848 cv
300.772 250.728 li
300.892 250.728 300.892 250.608 301.012 250.608 cv
301.012 250.608 li
301.132 250.608 301.132 250.608 301.132 250.608 cv
cp
308.932 253.848 mo
308.932 253.968 308.932 253.968 308.932 253.968 cv
308.932 254.088 li
308.932 254.088 308.932 254.208 308.812 254.208 cv
308.812 254.328 308.692 254.328 308.692 254.448 cv
308.572 254.448 308.572 254.568 308.452 254.568 cv
308.452 254.688 308.332 254.688 308.332 254.688 cv
308.212 254.688 li
308.212 254.688 308.212 254.688 308.092 254.688 cv
302.692 249.168 li
302.572 249.168 302.572 249.168 302.572 249.048 cv
302.572 249.048 302.572 249.048 302.572 248.928 cv
302.692 248.928 302.692 248.928 302.692 248.808 cv
302.812 248.808 302.812 248.688 302.932 248.688 cv
302.932 248.568 303.052 248.568 303.052 248.448 cv
303.172 248.448 303.172 248.448 303.172 248.328 cv
303.292 248.328 303.292 248.328 303.292 248.328 cv
303.412 248.328 303.412 248.328 303.412 248.448 cv
cp
f
324.292 264.168 mo
324.292 264.168 324.292 264.168 324.292 264.288 cv
324.292 264.288 324.292 264.288 324.292 264.408 cv
324.292 264.408 324.172 264.408 324.172 264.528 cv
324.052 264.648 li
323.932 264.768 323.812 264.768 323.812 264.888 cv
323.812 264.888 323.692 264.888 323.692 265.008 cv
323.572 265.008 323.572 265.008 323.572 265.008 cv
323.572 265.008 323.452 265.008 323.452 264.888 cv
317.932 259.488 li
317.932 259.368 317.932 259.368 317.932 259.368 cv
317.932 259.248 li
318.052 259.128 li
318.052 259.008 318.172 259.008 318.172 258.888 cv
318.292 258.888 318.412 258.768 318.412 258.768 cv
318.412 258.648 318.532 258.648 318.532 258.648 cv
318.652 258.648 318.652 258.648 318.652 258.648 cv
318.772 258.648 li
cp
329.932 258.048 mo
329.932 258.168 330.052 258.168 330.052 258.288 cv
330.052 258.408 li
330.052 258.528 330.052 258.528 330.052 258.648 cv
329.932 258.648 329.932 258.768 329.932 258.768 cv
329.692 259.008 li
329.572 259.128 329.452 259.128 329.452 259.248 cv
329.332 259.248 329.212 259.248 329.212 259.248 cv
329.092 259.248 328.972 259.248 328.852 259.248 cv
328.732 259.248 328.612 259.248 328.372 259.128 cv
323.332 257.688 li
323.092 257.568 322.852 257.448 322.612 257.328 cv
322.252 257.328 322.012 257.208 321.772 257.088 cv
322.012 257.328 322.252 257.568 322.372 257.808 cv
322.612 257.928 322.852 258.168 323.092 258.408 cv
326.572 261.888 li
326.572 261.888 326.572 261.888 326.572 262.008 cv
326.572 262.008 li
326.572 262.128 326.572 262.128 326.452 262.248 cv
326.332 262.368 li
326.212 262.488 326.212 262.488 326.092 262.608 cv
325.972 262.608 li
325.972 262.728 325.852 262.728 325.852 262.728 cv
325.852 262.608 325.852 262.608 325.732 262.608 cv
320.452 257.328 li
320.332 257.208 320.332 257.088 320.332 256.968 cv
320.332 256.848 320.452 256.728 320.452 256.728 cv
320.812 256.368 li
320.932 256.248 321.052 256.128 321.052 256.128 cv
321.172 256.128 321.292 256.008 321.292 256.008 cv
321.412 256.008 321.532 256.008 321.652 256.008 cv
321.772 256.008 321.892 256.128 322.012 256.128 cv
325.852 257.328 li
326.092 257.328 326.332 257.448 326.572 257.568 cv
326.812 257.568 326.932 257.688 327.172 257.688 cv
327.412 257.808 327.652 257.808 327.772 257.928 cv
328.012 258.048 328.252 258.048 328.492 258.168 cv
328.252 257.928 328.012 257.688 327.652 257.448 cv
327.412 257.208 327.172 256.968 326.932 256.728 cv
323.812 253.608 li
323.812 253.488 li
323.812 253.488 323.812 253.488 323.812 253.368 cv
323.932 253.248 li
323.932 253.128 324.052 253.128 324.052 253.008 cv
324.172 253.008 324.292 252.888 324.292 252.888 cv
324.412 252.888 324.412 252.768 324.412 252.768 cv
324.532 252.768 324.532 252.768 324.532 252.768 cv
324.652 252.768 li
cp
329.932 247.968 mo
330.052 248.088 li
330.052 248.208 li
330.172 248.208 330.172 248.328 330.052 248.328 cv
330.052 248.448 li
328.492 250.008 li
333.412 255.048 li
333.412 255.168 li
333.412 255.288 li
333.292 255.408 333.292 255.408 333.172 255.528 cv
333.052 255.648 333.052 255.648 332.932 255.648 cv
332.932 255.768 332.932 255.768 332.812 255.768 cv
332.812 255.768 332.812 255.768 332.692 255.768 cv
332.692 255.768 li
327.652 250.728 li
326.092 252.408 li
325.972 252.408 li
325.972 252.408 325.972 252.408 325.852 252.408 cv
325.852 252.408 325.852 252.408 325.732 252.408 cv
325.732 252.288 325.612 252.288 325.612 252.288 cv
325.492 252.168 325.492 252.168 325.492 252.048 cv
325.372 252.048 325.372 251.928 325.372 251.928 cv
325.372 251.808 li
329.452 247.728 li
329.572 247.728 329.572 247.728 329.572 247.728 cv
329.692 247.728 329.692 247.728 329.692 247.848 cv
329.812 247.848 329.812 247.848 329.932 247.968 cv
cp
f
347.572 266.448 mo
347.572 266.448 347.572 266.448 347.572 266.568 cv
347.572 266.568 347.572 266.568 347.572 266.688 cv
347.572 266.688 347.572 266.688 347.452 266.808 cv
347.332 266.928 li
347.212 267.048 347.212 267.048 347.092 267.168 cv
347.092 267.168 346.972 267.168 346.972 267.288 cv
346.852 267.288 li
346.852 267.288 346.852 267.288 346.852 267.168 cv
341.332 261.768 li
341.212 261.648 341.212 261.648 341.212 261.648 cv
341.212 261.648 341.212 261.528 341.332 261.528 cv
341.332 261.408 li
341.452 261.288 341.452 261.288 341.572 261.168 cv
341.692 261.048 li
341.812 260.928 341.812 260.928 341.812 260.928 cv
341.932 260.928 341.932 260.928 341.932 260.928 cv
342.052 260.928 342.052 260.928 342.052 260.928 cv
cp
353.212 260.448 mo
353.332 260.448 353.332 260.448 353.332 260.568 cv
353.332 260.688 353.332 260.688 353.332 260.808 cv
353.332 260.808 353.332 260.808 353.332 260.928 cv
353.212 261.048 li
352.972 261.288 li
352.852 261.408 352.852 261.408 352.732 261.528 cv
352.612 261.528 352.612 261.528 352.492 261.528 cv
352.372 261.528 352.252 261.528 352.132 261.528 cv
352.012 261.528 351.892 261.528 351.652 261.408 cv
346.732 259.968 li
346.372 259.848 346.132 259.728 345.892 259.728 cv
345.652 259.608 345.292 259.488 345.052 259.368 cv
345.292 259.608 345.532 259.848 345.772 260.088 cv
346.012 260.208 346.132 260.448 346.372 260.688 cv
349.852 264.168 li
349.852 264.168 349.852 264.168 349.852 264.288 cv
349.852 264.288 li
349.852 264.408 349.852 264.408 349.732 264.528 cv
349.732 264.528 349.732 264.648 349.612 264.648 cv
349.492 264.768 349.492 264.768 349.372 264.888 cv
349.372 264.888 349.372 264.888 349.252 264.888 cv
349.252 265.008 349.252 265.008 349.132 265.008 cv
349.132 264.888 li
343.852 259.608 li
343.732 259.488 343.612 259.368 343.612 259.248 cv
343.612 259.128 343.732 259.008 343.852 259.008 cv
344.212 258.648 li
344.212 258.528 344.332 258.408 344.452 258.408 cv
344.452 258.408 344.572 258.288 344.692 258.288 cv
344.692 258.288 344.812 258.288 344.932 258.288 cv
345.052 258.288 345.172 258.408 345.292 258.408 cv
349.132 259.608 li
349.372 259.608 349.612 259.728 349.852 259.848 cv
350.092 259.848 350.332 259.968 350.452 259.968 cv
350.692 260.088 350.932 260.088 351.172 260.208 cv
351.292 260.328 351.532 260.328 351.772 260.448 cv
351.532 260.208 351.292 259.968 351.052 259.728 cv
350.812 259.488 350.572 259.248 350.332 259.008 cv
347.212 255.888 li
347.092 255.768 li
347.092 255.768 347.092 255.768 347.092 255.648 cv
347.212 255.648 347.212 255.528 347.212 255.528 cv
347.332 255.528 347.332 255.408 347.452 255.288 cv
347.572 255.168 li
347.692 255.168 347.692 255.048 347.812 255.048 cv
347.812 255.048 li
347.932 255.048 347.932 255.048 347.932 255.048 cv
cp
355.612 258.408 mo
355.732 258.408 355.732 258.408 355.732 258.408 cv
355.732 258.528 li
355.612 258.528 355.612 258.648 355.612 258.648 cv
355.612 258.768 355.492 258.768 355.372 258.888 cv
355.252 259.008 li
355.132 259.128 355.132 259.128 355.132 259.128 cv
355.012 259.128 355.012 259.128 355.012 259.128 cv
354.892 259.128 354.892 259.128 354.892 259.128 cv
349.372 253.608 li
349.372 253.608 349.372 253.608 349.372 253.488 cv
349.372 253.488 349.372 253.488 349.372 253.368 cv
349.372 253.368 349.372 253.368 349.492 253.248 cv
349.612 253.128 li
349.732 253.008 349.732 253.008 349.852 252.888 cv
349.852 252.888 349.972 252.888 349.972 252.768 cv
350.092 252.768 li
350.092 252.768 350.092 252.768 350.212 252.888 cv
cp
355.492 247.968 mo
355.612 247.968 355.612 248.088 355.612 248.088 cv
355.732 248.088 355.732 248.208 355.732 248.208 cv
355.732 248.328 li
355.732 248.328 355.732 248.328 355.612 248.448 cv
354.052 250.008 li
358.972 254.928 li
359.092 255.048 359.092 255.048 359.092 255.048 cv
359.092 255.168 li
358.972 255.288 li
358.972 255.408 358.852 255.408 358.732 255.528 cv
358.612 255.648 li
358.492 255.768 358.492 255.768 358.492 255.768 cv
358.372 255.768 358.372 255.768 358.372 255.768 cv
358.252 255.768 li
353.332 250.728 li
351.652 252.408 li
351.532 252.408 351.532 252.408 351.532 252.408 cv
351.412 252.408 351.412 252.408 351.412 252.408 cv
351.292 252.288 351.292 252.288 351.172 252.168 cv
351.172 252.168 351.052 252.168 351.052 252.048 cv
351.052 251.928 li
350.932 251.928 350.932 251.808 350.932 251.808 cv
351.052 251.808 351.052 251.808 351.052 251.688 cv
355.012 247.728 li
355.132 247.728 li
355.132 247.728 355.132 247.728 355.252 247.728 cv
355.252 247.728 355.252 247.728 355.372 247.848 cv
355.372 247.848 355.492 247.848 355.492 247.968 cv
cp
f
377.572 262.008 mo
377.572 262.128 377.572 262.128 377.572 262.128 cv
377.572 262.248 li
377.572 262.248 377.572 262.368 377.452 262.368 cv
377.452 262.488 377.332 262.488 377.332 262.608 cv
377.212 262.728 377.092 262.728 377.092 262.848 cv
376.972 262.848 376.972 262.848 376.972 262.848 cv
376.852 262.848 376.852 262.848 376.852 262.848 cv
376.732 262.848 376.732 262.848 376.732 262.848 cv
374.812 262.008 li
374.572 261.888 374.332 261.888 374.212 261.768 cv
373.972 261.768 373.852 261.648 373.612 261.648 cv
373.492 261.648 373.252 261.768 373.132 261.768 cv
372.892 261.888 372.772 262.008 372.532 262.128 cv
372.052 262.728 li
374.452 265.128 li
374.452 265.128 374.572 265.128 374.572 265.248 cv
374.572 265.248 374.572 265.248 374.452 265.368 cv
374.452 265.368 374.452 265.368 374.452 265.488 cv
374.332 265.488 374.332 265.608 374.212 265.608 cv
374.212 265.728 374.092 265.728 374.092 265.848 cv
373.972 265.848 373.972 265.848 373.852 265.968 cv
373.852 265.968 li
373.732 265.968 373.732 265.968 373.732 265.848 cv
368.452 260.568 li
368.332 260.448 368.212 260.328 368.212 260.208 cv
368.332 260.088 368.332 260.088 368.332 259.968 cv
369.652 258.768 li
369.772 258.648 369.892 258.528 370.012 258.408 cv
370.132 258.288 370.132 258.288 370.252 258.168 cv
370.492 258.048 370.732 257.808 371.092 257.808 cv
371.332 257.688 371.572 257.688 371.812 257.688 cv
372.052 257.688 372.292 257.688 372.412 257.808 cv
372.652 257.928 372.892 258.048 373.132 258.288 cv
373.252 258.528 373.492 258.648 373.492 258.888 cv
373.612 259.128 373.732 259.248 373.732 259.488 cv
373.732 259.728 373.732 259.968 373.612 260.208 cv
373.612 260.448 373.492 260.568 373.372 260.808 cv
373.612 260.808 373.732 260.808 373.852 260.688 cv
373.972 260.688 374.092 260.688 374.332 260.808 cv
374.452 260.808 374.572 260.808 374.812 260.928 cv
374.932 260.928 375.172 261.048 375.292 261.048 cv
377.092 261.888 li
377.332 261.888 377.332 262.008 377.452 262.008 cv
377.572 262.008 li
cp
372.412 259.128 mo
372.172 259.008 371.932 258.768 371.692 258.768 cv
371.452 258.768 371.092 258.768 370.852 258.888 cv
370.732 259.008 370.612 259.008 370.492 259.128 cv
370.372 259.248 370.252 259.368 370.132 259.488 cv
369.532 260.088 li
371.452 262.128 li
372.172 261.288 li
372.412 261.168 372.532 260.928 372.652 260.688 cv
372.772 260.568 372.772 260.328 372.772 260.208 cv
372.772 259.968 372.772 259.848 372.652 259.608 cv
372.652 259.488 372.532 259.368 372.412 259.128 cv
cp
381.652 257.568 mo
381.772 257.568 381.772 257.688 381.772 257.688 cv
381.892 257.688 381.892 257.808 381.892 257.808 cv
381.892 257.928 li
381.892 257.928 381.892 257.928 381.892 258.048 cv
379.132 260.808 li
379.012 260.808 378.892 260.928 378.772 260.928 cv
378.772 260.928 378.652 260.808 378.532 260.688 cv
373.372 255.648 li
373.252 255.528 373.252 255.408 373.252 255.288 cv
373.252 255.168 373.252 255.048 373.372 255.048 cv
376.012 252.288 li
376.132 252.288 376.132 252.288 376.132 252.288 cv
376.252 252.288 li
376.372 252.288 li
376.372 252.408 376.492 252.408 376.492 252.528 cv
376.612 252.528 376.612 252.528 376.732 252.648 cv
376.732 252.768 li
376.732 252.768 376.732 252.768 376.732 252.888 cv
376.732 252.888 li
374.452 255.168 li
376.252 256.968 li
378.172 255.048 li
378.292 255.048 li
378.292 255.048 378.292 255.048 378.412 255.048 cv
378.412 255.048 378.412 255.048 378.532 255.048 cv
378.532 255.168 378.652 255.168 378.652 255.168 cv
378.652 255.288 378.772 255.288 378.772 255.408 cv
378.772 255.408 378.892 255.408 378.892 255.528 cv
378.892 255.528 378.892 255.528 378.892 255.648 cv
378.772 255.648 li
376.852 257.568 li
378.892 259.608 li
381.172 257.328 li
381.292 257.328 li
381.292 257.328 381.292 257.328 381.412 257.328 cv
381.412 257.328 381.412 257.328 381.532 257.448 cv
381.532 257.448 381.652 257.448 381.652 257.568 cv
cp
384.652 252.048 mo
384.892 252.288 385.132 252.528 385.252 252.888 cv
385.252 253.128 385.372 253.488 385.372 253.848 cv
385.252 254.088 385.132 254.448 385.012 254.808 cv
384.892 255.048 384.652 255.408 384.412 255.648 cv
384.172 255.888 383.932 256.008 383.812 256.128 cv
383.572 256.248 383.452 256.368 383.212 256.488 cv
383.092 256.488 382.852 256.608 382.732 256.608 cv
382.612 256.608 382.492 256.728 382.492 256.728 cv
382.372 256.728 382.252 256.608 382.252 256.608 cv
382.132 256.608 382.132 256.488 382.012 256.368 cv
381.892 256.368 381.892 256.248 381.892 256.248 cv
381.772 256.248 381.772 256.128 381.772 256.128 cv
381.772 256.008 li
381.772 256.008 381.772 256.008 381.772 255.888 cv
381.892 255.888 381.892 255.888 382.012 255.888 cv
382.132 255.768 382.372 255.768 382.492 255.768 cv
382.732 255.648 382.852 255.528 383.092 255.408 cv
383.332 255.288 383.572 255.168 383.812 254.928 cv
383.932 254.808 384.052 254.568 384.172 254.448 cv
384.292 254.208 384.292 254.088 384.292 253.848 cv
384.292 253.728 384.292 253.488 384.292 253.368 cv
384.172 253.248 384.052 253.008 383.932 252.888 cv
383.692 252.768 383.572 252.648 383.332 252.528 cv
383.212 252.528 382.972 252.528 382.732 252.528 cv
382.612 252.648 382.372 252.648 382.132 252.768 cv
381.892 252.768 381.652 252.888 381.412 253.008 cv
381.172 253.128 380.932 253.128 380.692 253.248 cv
380.452 253.248 380.212 253.368 379.972 253.368 cv
379.732 253.248 379.492 253.248 379.252 253.128 cv
379.012 253.128 378.772 252.888 378.532 252.648 cv
378.292 252.408 378.172 252.168 378.052 251.928 cv
377.932 251.688 377.932 251.328 377.932 251.088 cv
377.932 250.848 378.052 250.488 378.172 250.248 cv
378.292 250.008 378.532 249.648 378.772 249.408 cv
378.892 249.288 379.012 249.168 379.132 249.048 cv
379.372 248.928 379.492 248.928 379.612 248.808 cv
379.732 248.688 379.972 248.688 380.092 248.688 cv
380.212 248.568 380.332 248.568 380.332 248.568 cv
380.452 248.568 380.452 248.568 380.452 248.568 cv
380.572 248.568 li
380.572 248.688 380.572 248.688 380.692 248.688 cv
380.692 248.688 380.692 248.808 380.812 248.808 cv
380.812 248.928 380.932 248.928 380.932 248.928 cv
380.932 249.048 381.052 249.048 381.052 249.048 cv
381.052 249.168 381.052 249.168 381.052 249.168 cv
381.052 249.288 381.052 249.288 381.052 249.288 cv
380.932 249.288 380.932 249.288 380.812 249.408 cv
380.692 249.408 380.572 249.408 380.452 249.528 cv
380.212 249.528 380.092 249.648 379.852 249.648 cv
379.732 249.768 379.492 249.888 379.372 250.128 cv
379.252 250.248 379.132 250.368 379.012 250.608 cv
378.892 250.728 378.892 250.848 378.892 251.088 cv
378.892 251.208 378.892 251.328 379.012 251.448 cv
379.012 251.568 379.132 251.688 379.252 251.808 cv
379.372 252.048 379.612 252.048 379.732 252.168 cv
379.972 252.168 380.092 252.168 380.332 252.168 cv
380.572 252.168 380.812 252.048 381.052 251.928 cv
381.292 251.928 381.532 251.808 381.772 251.688 cv
382.012 251.688 382.252 251.568 382.492 251.448 cv
382.732 251.448 382.972 251.328 383.212 251.328 cv
383.452 251.328 383.692 251.448 383.932 251.568 cv
384.172 251.568 384.412 251.808 384.652 252.048 cv
cp
f
397.492 267.288 mo
397.612 267.288 397.612 267.408 397.612 267.408 cv
397.732 267.528 397.732 267.528 397.732 267.648 cv
397.612 267.768 li
397.612 267.888 397.612 267.888 397.492 267.888 cv
397.252 268.128 li
397.252 268.248 397.132 268.368 397.012 268.368 cv
397.012 268.368 396.892 268.488 396.772 268.488 cv
396.652 268.488 396.532 268.488 396.412 268.488 cv
396.292 268.368 396.172 268.368 396.052 268.368 cv
391.012 266.808 li
390.772 266.688 390.412 266.688 390.172 266.568 cv
389.932 266.448 389.692 266.328 389.332 266.328 cv
389.572 266.448 389.812 266.688 390.052 266.928 cv
390.292 267.168 390.532 267.408 390.652 267.528 cv
394.132 271.008 li
394.252 271.008 394.252 271.128 394.252 271.128 cv
394.252 271.128 394.252 271.128 394.252 271.248 cv
394.132 271.248 394.132 271.368 394.132 271.368 cv
394.012 271.368 394.012 271.488 393.892 271.608 cv
393.772 271.728 li
393.652 271.728 393.652 271.848 393.652 271.848 cv
393.532 271.848 393.532 271.848 393.532 271.848 cv
393.412 271.848 393.412 271.848 393.412 271.848 cv
388.132 266.568 li
388.012 266.448 387.892 266.328 388.012 266.208 cv
388.012 266.088 388.012 265.968 388.132 265.848 cv
388.492 265.488 li
388.612 265.368 388.612 265.368 388.732 265.248 cv
388.852 265.248 388.852 265.248 388.972 265.248 cv
389.092 265.248 389.092 265.248 389.212 265.248 cv
389.332 265.248 389.452 265.248 389.572 265.248 cv
393.412 266.448 li
393.652 266.568 393.892 266.568 394.132 266.688 cv
394.372 266.688 394.612 266.808 394.852 266.928 cv
394.972 266.928 395.212 267.048 395.452 267.048 cv
395.692 267.168 395.812 267.288 396.052 267.288 cv
395.812 267.048 395.572 266.808 395.332 266.568 cv
395.092 266.328 394.852 266.088 394.612 265.848 cv
391.492 262.728 li
391.492 262.728 391.492 262.728 391.492 262.608 cv
391.492 262.608 li
391.492 262.488 391.492 262.488 391.612 262.368 cv
391.612 262.368 391.612 262.248 391.732 262.248 cv
391.852 262.128 391.852 262.128 391.972 262.008 cv
391.972 262.008 391.972 262.008 392.092 262.008 cv
392.092 261.888 392.092 261.888 392.212 261.888 cv
392.212 262.008 li
cp
401.572 259.728 mo
401.932 260.088 402.172 260.448 402.292 260.808 cv
402.532 261.168 402.532 261.528 402.532 261.888 cv
402.532 262.248 402.532 262.608 402.292 262.968 cv
402.172 263.328 401.812 263.688 401.572 264.048 cv
401.212 264.408 400.852 264.648 400.492 264.768 cv
400.132 265.008 399.772 265.128 399.412 265.128 cv
399.052 265.128 398.692 265.008 398.332 264.888 cv
397.972 264.648 397.612 264.408 397.252 264.048 cv
393.652 260.448 li
393.652 260.328 li
393.772 260.208 li
393.772 260.088 393.892 260.088 393.892 259.968 cv
394.012 259.848 394.132 259.848 394.132 259.848 cv
394.252 259.728 394.252 259.728 394.252 259.728 cv
394.372 259.728 394.372 259.728 394.372 259.728 cv
394.492 259.728 li
397.972 263.208 li
398.212 263.448 398.452 263.688 398.692 263.808 cv
398.932 263.928 399.292 264.048 399.532 264.048 cv
399.772 264.048 400.012 263.928 400.252 263.928 cv
400.492 263.808 400.732 263.568 400.972 263.448 cv
401.092 263.208 401.332 262.968 401.452 262.728 cv
401.572 262.488 401.572 262.248 401.572 262.008 cv
401.572 261.768 401.452 261.408 401.332 261.168 cv
401.212 260.928 400.972 260.688 400.732 260.448 cv
397.252 256.968 li
397.252 256.848 li
397.252 256.848 397.252 256.848 397.252 256.728 cv
397.252 256.728 397.252 256.608 397.372 256.608 cv
397.372 256.608 397.492 256.488 397.492 256.368 cv
397.612 256.368 397.612 256.248 397.732 256.248 cv
397.852 256.128 li
397.852 256.128 397.852 256.128 397.972 256.128 cv
397.972 256.128 li
cp
411.412 253.848 mo
411.412 253.848 411.412 253.848 411.412 253.968 cv
411.412 253.968 li
411.412 254.088 411.292 254.088 411.292 254.208 cv
411.172 254.328 li
411.052 254.448 411.052 254.448 410.932 254.568 cv
410.812 254.568 li
410.812 254.688 410.692 254.688 410.692 254.688 cv
410.692 254.688 410.692 254.568 410.572 254.568 cv
405.652 249.648 li
408.652 256.608 li
408.652 256.728 408.652 256.728 408.652 256.728 cv
408.652 256.728 408.652 256.848 408.532 256.848 cv
408.532 256.968 li
408.412 256.968 408.412 257.088 408.412 257.088 cv
408.292 257.208 408.292 257.208 408.172 257.328 cv
408.052 257.328 li
408.052 257.448 407.932 257.448 407.932 257.448 cv
407.932 257.448 407.932 257.448 407.812 257.448 cv
400.972 254.328 li
405.892 259.248 li
405.892 259.368 405.892 259.368 405.892 259.368 cv
406.012 259.368 405.892 259.488 405.892 259.488 cv
405.892 259.608 li
405.772 259.728 405.772 259.728 405.652 259.848 cv
405.532 259.848 405.532 259.968 405.412 259.968 cv
405.412 260.088 405.412 260.088 405.292 260.088 cv
405.292 260.088 405.292 260.088 405.172 260.088 cv
405.172 260.088 li
399.892 254.808 li
399.772 254.688 399.652 254.568 399.652 254.448 cv
399.772 254.328 399.772 254.208 399.892 254.088 cv
400.372 253.608 li
400.372 253.608 400.492 253.488 400.612 253.488 cv
400.732 253.368 400.732 253.368 400.852 253.368 cv
400.972 253.368 401.092 253.368 401.092 253.368 cv
401.212 253.368 401.332 253.368 401.452 253.488 cv
407.212 256.008 li
407.212 255.888 li
404.812 250.128 li
404.812 250.008 404.692 249.888 404.692 249.768 cv
404.692 249.648 404.692 249.528 404.692 249.528 cv
404.692 249.408 404.692 249.288 404.812 249.288 cv
404.812 249.168 404.812 249.168 404.932 249.048 cv
405.412 248.568 li
405.532 248.448 405.532 248.448 405.532 248.448 cv
405.652 248.448 405.652 248.448 405.772 248.448 cv
405.892 248.448 li
406.012 248.448 406.012 248.448 406.132 248.568 cv
cp
f
406.732 283.728 mo
406.852 283.848 406.852 283.848 406.972 283.848 cv
406.972 283.968 406.972 283.968 406.972 283.968 cv
406.972 284.088 406.972 284.088 406.852 284.208 cv
406.852 284.208 406.732 284.328 406.732 284.448 cv
406.612 284.448 406.492 284.568 406.492 284.568 cv
406.372 284.688 406.372 284.688 406.372 284.688 cv
406.252 284.688 406.252 284.688 406.252 284.688 cv
406.132 284.688 406.132 284.688 406.132 284.688 cv
404.212 283.848 li
401.812 286.128 li
402.772 288.048 li
402.772 288.048 402.772 288.048 402.772 288.168 cv
402.772 288.168 402.772 288.168 402.772 288.288 cv
402.772 288.288 402.772 288.288 402.652 288.408 cv
402.652 288.408 402.532 288.528 402.532 288.648 cv
402.412 288.648 402.292 288.768 402.292 288.768 cv
402.172 288.888 402.172 288.888 402.052 288.888 cv
402.052 288.888 402.052 288.888 401.932 288.768 cv
401.932 288.768 401.932 288.768 401.812 288.648 cv
398.452 281.328 li
398.452 281.328 398.452 281.328 398.452 281.208 cv
398.452 281.208 398.452 281.208 398.452 281.088 cv
398.572 280.968 li
398.692 280.848 398.692 280.848 398.812 280.728 cv
398.932 280.608 398.932 280.608 399.052 280.488 cv
399.172 280.368 li
399.292 280.368 399.292 280.368 399.292 280.368 cv
399.412 280.368 399.412 280.368 399.532 280.368 cv
cp
399.532 281.568 mo
399.532 281.568 li
401.452 285.408 li
403.372 283.368 li
cp
410.092 276.648 mo
410.452 277.008 410.692 277.368 410.932 277.848 cv
411.052 278.208 411.172 278.568 411.172 278.928 cv
411.172 279.288 411.052 279.648 410.932 280.008 cv
410.692 280.368 410.452 280.728 410.092 281.088 cv
409.732 281.448 409.492 281.688 409.132 281.808 cv
408.772 282.048 408.412 282.048 408.052 282.048 cv
407.692 282.168 407.332 282.048 406.972 281.808 cv
406.492 281.688 406.132 281.448 405.892 281.088 cv
402.292 277.488 li
402.172 277.368 402.292 277.368 402.292 277.368 cv
402.292 277.248 402.292 277.248 402.292 277.248 cv
402.412 277.128 402.412 277.128 402.532 277.008 cv
402.532 276.888 402.652 276.888 402.772 276.888 cv
402.772 276.768 402.772 276.768 402.892 276.768 cv
402.892 276.768 402.892 276.768 403.012 276.768 cv
403.012 276.768 li
406.492 280.248 li
406.732 280.488 407.092 280.728 407.332 280.848 cv
407.572 280.968 407.812 281.088 408.052 281.088 cv
408.292 281.088 408.532 280.968 408.772 280.848 cv
409.012 280.848 409.252 280.608 409.492 280.368 cv
409.732 280.248 409.852 280.008 409.972 279.768 cv
410.092 279.528 410.092 279.288 410.092 279.048 cv
410.092 278.688 410.092 278.448 409.972 278.208 cv
409.852 277.968 409.612 277.728 409.372 277.488 cv
405.892 274.008 li
405.772 273.888 405.772 273.888 405.772 273.888 cv
405.772 273.768 li
405.892 273.768 405.892 273.648 405.892 273.648 cv
405.892 273.528 406.012 273.528 406.132 273.408 cv
406.252 273.288 li
406.372 273.288 406.372 273.168 406.372 273.168 cv
406.492 273.168 406.492 273.168 406.492 273.168 cv
406.612 273.168 li
cp
412.012 268.248 mo
412.132 268.248 412.132 268.368 412.132 268.368 cv
412.252 268.368 412.252 268.488 412.252 268.488 cv
412.252 268.608 li
412.252 268.608 412.252 268.608 412.252 268.728 cv
410.572 270.288 li
415.492 275.208 li
415.612 275.328 415.612 275.328 415.612 275.328 cv
415.612 275.448 li
415.492 275.568 li
415.492 275.688 415.372 275.688 415.252 275.808 cv
415.132 275.928 li
415.012 276.048 415.012 276.048 415.012 276.048 cv
414.892 276.048 414.892 276.048 414.892 276.048 cv
414.772 276.048 li
409.852 271.008 li
408.172 272.688 li
408.052 272.688 408.052 272.688 408.052 272.688 cv
407.932 272.688 407.932 272.688 407.932 272.688 cv
407.812 272.568 407.812 272.568 407.692 272.448 cv
407.692 272.448 407.692 272.328 407.572 272.328 cv
407.572 272.208 li
407.452 272.208 407.452 272.088 407.452 272.088 cv
407.572 272.088 407.572 272.088 407.572 271.968 cv
411.532 268.008 li
411.652 268.008 li
411.652 268.008 411.652 268.008 411.772 268.008 cv
411.772 268.008 411.772 268.008 411.892 268.008 cv
411.892 268.128 412.012 268.128 412.012 268.248 cv
cp
422.212 268.608 mo
422.212 268.608 422.212 268.608 422.212 268.728 cv
422.212 268.728 422.212 268.728 422.212 268.848 cv
422.212 268.848 422.212 268.848 422.092 268.968 cv
422.092 268.968 422.092 269.088 421.972 269.088 cv
421.852 269.208 421.852 269.208 421.732 269.328 cv
421.612 269.328 li
421.612 269.448 421.612 269.448 421.492 269.448 cv
421.492 269.328 li
418.852 266.808 li
416.332 269.448 li
418.852 271.968 li
418.852 271.968 418.852 271.968 418.852 272.088 cv
418.852 272.088 418.852 272.088 418.852 272.208 cv
418.852 272.208 418.852 272.208 418.732 272.328 cv
418.732 272.328 418.732 272.448 418.612 272.448 cv
418.492 272.568 418.492 272.568 418.372 272.688 cv
418.372 272.688 418.252 272.688 418.252 272.808 cv
418.132 272.808 li
418.132 272.808 418.132 272.808 418.132 272.688 cv
412.612 267.288 li
412.492 267.168 412.492 267.168 412.492 267.168 cv
412.492 267.048 li
412.612 267.048 412.612 266.928 412.612 266.928 cv
412.732 266.808 412.732 266.808 412.852 266.688 cv
412.972 266.568 li
413.092 266.448 413.092 266.448 413.092 266.448 cv
413.212 266.448 413.212 266.448 413.212 266.448 cv
413.332 266.448 413.332 266.448 413.332 266.448 cv
415.612 268.728 li
418.252 266.208 li
415.972 263.808 li
415.852 263.808 li
415.852 263.808 415.852 263.688 415.972 263.688 cv
415.972 263.568 li
416.092 263.448 416.092 263.448 416.212 263.328 cv
416.212 263.208 416.332 263.208 416.332 263.208 cv
416.452 263.088 416.452 263.088 416.572 263.088 cv
416.572 263.088 li
416.692 263.088 416.692 263.088 416.692 263.088 cv
cp
426.772 263.688 mo
426.892 263.808 li
426.892 263.928 li
427.012 263.928 427.012 264.048 427.012 264.048 cv
426.892 264.048 426.892 264.048 426.892 264.168 cv
424.132 266.928 li
424.132 266.928 424.012 267.048 423.892 267.048 cv
423.772 267.048 423.652 266.928 423.532 266.808 cv
418.492 261.768 li
418.372 261.648 418.252 261.528 418.252 261.408 cv
418.372 261.288 418.372 261.168 418.372 261.168 cv
421.132 258.408 li
421.252 258.408 li
421.252 258.408 421.252 258.408 421.372 258.408 cv
421.372 258.408 421.372 258.408 421.492 258.408 cv
421.492 258.528 421.612 258.528 421.612 258.648 cv
421.732 258.648 421.732 258.648 421.732 258.768 cv
421.852 258.888 li
421.852 258.888 421.852 258.888 421.852 259.008 cv
421.852 259.008 421.852 259.008 421.732 259.008 cv
419.572 261.288 li
421.372 263.088 li
423.292 261.168 li
423.412 261.168 423.412 261.168 423.412 261.168 cv
423.532 261.168 423.532 261.168 423.532 261.168 cv
423.652 261.288 423.652 261.288 423.772 261.288 cv
423.772 261.408 423.772 261.408 423.892 261.528 cv
423.892 261.528 423.892 261.528 423.892 261.648 cv
423.892 261.648 423.892 261.648 423.892 261.768 cv
423.892 261.768 li
421.972 263.688 li
424.012 265.728 li
426.292 263.448 li
426.292 263.448 426.292 263.448 426.412 263.448 cv
426.412 263.448 li
426.532 263.448 426.532 263.448 426.652 263.568 cv
426.652 263.568 426.652 263.568 426.772 263.688 cv
cp
432.292 258.168 mo
432.292 258.168 432.292 258.288 432.412 258.288 cv
432.412 258.408 432.412 258.408 432.412 258.528 cv
432.412 258.528 432.412 258.648 432.292 258.648 cv
432.292 258.768 432.292 258.768 432.292 258.768 cv
432.052 259.128 li
431.932 259.128 431.812 259.248 431.812 259.248 cv
431.692 259.248 431.572 259.368 431.452 259.368 cv
431.452 259.368 431.332 259.368 431.212 259.368 cv
431.092 259.248 430.852 259.248 430.732 259.248 cv
425.692 257.688 li
425.452 257.568 425.212 257.568 424.852 257.448 cv
424.612 257.328 424.372 257.208 424.132 257.208 cv
424.252 257.328 424.492 257.568 424.732 257.808 cv
424.972 258.048 425.212 258.288 425.452 258.528 cv
428.932 261.888 li
428.932 262.008 428.932 262.008 428.932 262.008 cv
428.932 262.128 li
428.812 262.248 li
428.812 262.368 428.692 262.368 428.692 262.488 cv
428.572 262.488 428.452 262.608 428.452 262.608 cv
428.332 262.728 428.332 262.728 428.332 262.728 cv
428.212 262.728 428.212 262.728 428.212 262.728 cv
428.092 262.728 li
422.812 257.448 li
422.692 257.328 422.692 257.208 422.692 257.088 cv
422.692 256.968 422.692 256.848 422.812 256.728 cv
423.172 256.368 li
423.292 256.248 423.412 256.248 423.412 256.128 cv
423.532 256.128 423.532 256.128 423.652 256.128 cv
423.772 256.128 423.892 256.128 423.892 256.128 cv
424.012 256.128 424.132 256.128 424.372 256.128 cv
428.212 257.328 li
428.452 257.448 428.692 257.448 428.812 257.568 cv
429.052 257.688 429.292 257.688 429.532 257.808 cv
429.772 257.808 429.892 257.928 430.132 257.928 cv
430.372 258.048 430.612 258.168 430.732 258.168 cv
430.492 257.928 430.252 257.688 430.012 257.448 cv
429.772 257.208 429.532 256.968 429.292 256.728 cv
426.172 253.608 li
426.172 253.488 426.172 253.488 426.172 253.488 cv
426.172 253.368 426.172 253.368 426.292 253.248 cv
426.412 253.128 li
426.532 253.008 426.532 253.008 426.652 252.888 cv
426.772 252.888 li
426.772 252.888 426.892 252.768 426.892 252.888 cv
426.892 252.888 426.892 252.888 427.012 252.888 cv
cp
432.292 247.848 mo
432.412 247.968 432.412 247.968 432.532 248.088 cv
432.532 248.088 432.532 248.088 432.532 248.208 cv
432.532 248.208 432.532 248.208 432.532 248.328 cv
432.532 248.328 li
430.852 250.008 li
435.892 254.928 li
435.892 254.928 435.892 254.928 435.892 255.048 cv
435.892 255.048 435.892 255.048 435.892 255.168 cv
435.892 255.168 435.892 255.168 435.772 255.288 cv
435.652 255.408 li
435.532 255.528 435.532 255.528 435.412 255.648 cv
435.412 255.648 435.292 255.648 435.292 255.768 cv
435.172 255.768 li
435.172 255.768 435.172 255.768 435.172 255.648 cv
430.132 250.728 li
428.572 252.288 li
428.452 252.408 428.452 252.408 428.452 252.408 cv
428.332 252.408 li
428.212 252.288 li
428.092 252.168 li
427.972 252.168 427.972 252.048 427.972 252.048 cv
427.852 251.928 427.852 251.928 427.852 251.928 cv
427.852 251.808 427.852 251.808 427.852 251.808 cv
427.852 251.688 427.852 251.688 427.852 251.688 cv
431.812 247.728 li
431.932 247.728 431.932 247.608 431.932 247.608 cv
432.052 247.608 li
432.052 247.728 432.172 247.728 432.172 247.728 cv
432.292 247.728 432.292 247.848 432.292 247.848 cv
cp
f
437.932 277.128 mo
437.932 277.248 437.932 277.248 438.052 277.248 cv
438.052 277.368 438.052 277.368 438.052 277.368 cv
438.052 277.368 438.052 277.488 438.172 277.488 cv
438.172 277.608 li
438.172 277.728 438.052 277.728 438.052 277.968 cv
438.052 278.088 437.932 278.328 437.932 278.448 cv
437.812 278.688 437.692 278.928 437.572 279.048 cv
437.452 279.288 437.212 279.528 436.972 279.768 cv
436.612 280.128 436.252 280.368 435.892 280.608 cv
435.412 280.728 434.932 280.848 434.572 280.848 cv
434.092 280.728 433.612 280.608 433.132 280.368 cv
432.652 280.128 432.172 279.768 431.692 279.288 cv
431.212 278.808 430.852 278.328 430.612 277.848 cv
430.372 277.368 430.252 276.888 430.252 276.408 cv
430.132 275.928 430.252 275.448 430.372 274.968 cv
430.612 274.608 430.852 274.128 431.212 273.768 cv
431.452 273.648 431.572 273.528 431.812 273.408 cv
431.932 273.168 432.172 273.168 432.292 273.048 cv
432.532 272.928 432.652 272.928 432.892 272.808 cv
433.012 272.808 433.132 272.808 433.252 272.808 cv
433.372 272.808 li
433.492 272.808 li
433.612 272.928 li
433.732 273.048 li
433.852 273.168 433.852 273.168 433.852 273.168 cv
433.972 273.288 433.972 273.288 433.972 273.288 cv
433.972 273.408 433.972 273.408 433.972 273.408 cv
433.972 273.528 433.972 273.528 433.972 273.528 cv
433.852 273.528 433.852 273.648 433.732 273.648 cv
433.492 273.648 433.372 273.648 433.252 273.768 cv
433.012 273.768 432.772 273.888 432.532 274.008 cv
432.412 274.008 432.172 274.248 431.932 274.488 cv
431.692 274.728 431.452 274.968 431.332 275.328 cv
431.212 275.688 431.212 275.928 431.212 276.288 cv
431.332 276.648 431.452 277.008 431.692 277.368 cv
431.812 277.728 432.172 278.088 432.532 278.448 cv
432.892 278.808 433.252 279.168 433.612 279.288 cv
433.972 279.528 434.332 279.648 434.572 279.648 cv
434.932 279.768 435.292 279.648 435.532 279.528 cv
435.892 279.408 436.132 279.288 436.492 278.928 cv
436.732 278.808 436.852 278.568 436.972 278.328 cv
437.092 278.088 437.212 277.848 437.212 277.728 cv
437.212 277.488 437.332 277.368 437.332 277.248 cv
437.332 277.008 437.332 277.008 437.452 276.888 cv
437.452 276.888 li
437.572 276.888 437.572 276.888 437.572 276.888 cv
437.572 276.888 437.692 276.888 437.692 277.008 cv
437.692 277.008 437.812 277.128 437.932 277.128 cv
cp
443.452 273.048 mo
443.452 273.048 li
443.452 273.168 li
443.332 273.288 li
443.332 273.408 443.212 273.408 443.092 273.528 cv
443.092 273.648 442.972 273.648 442.972 273.768 cv
442.852 273.768 442.852 273.768 442.852 273.768 cv
442.732 273.888 442.732 273.888 442.732 273.888 cv
442.612 273.768 442.612 273.768 442.492 273.768 cv
440.692 272.928 li
440.452 272.928 440.212 272.808 440.092 272.688 cv
439.852 272.688 439.612 272.688 439.492 272.688 cv
439.252 272.688 439.132 272.688 438.892 272.688 cv
438.772 272.808 438.532 272.928 438.412 273.168 cv
437.932 273.648 li
440.332 276.048 li
440.332 276.168 li
440.332 276.168 440.332 276.168 440.332 276.288 cv
440.332 276.288 440.332 276.288 440.332 276.408 cv
440.212 276.408 440.212 276.528 440.092 276.648 cv
439.972 276.648 439.972 276.768 439.852 276.768 cv
439.852 276.768 439.852 276.888 439.732 276.888 cv
439.732 276.888 439.732 276.888 439.612 276.888 cv
439.612 276.888 439.612 276.888 439.612 276.768 cv
434.332 271.488 li
434.212 271.368 434.092 271.248 434.092 271.128 cv
434.092 271.128 434.212 271.008 434.212 270.888 cv
435.412 269.688 li
435.652 269.568 435.772 269.448 435.892 269.328 cv
435.892 269.328 436.012 269.208 436.132 269.088 cv
436.372 268.968 436.612 268.848 436.852 268.728 cv
437.092 268.608 437.332 268.608 437.692 268.608 cv
437.932 268.608 438.052 268.728 438.292 268.728 cv
438.532 268.848 438.772 269.088 439.012 269.208 cv
439.132 269.448 439.252 269.568 439.372 269.808 cv
439.492 270.048 439.612 270.288 439.612 270.408 cv
439.612 270.648 439.612 270.888 439.492 271.128 cv
439.492 271.368 439.372 271.608 439.252 271.728 cv
439.372 271.728 439.612 271.728 439.732 271.728 cv
439.852 271.728 439.972 271.728 440.092 271.728 cv
440.332 271.728 440.452 271.728 440.692 271.848 cv
440.812 271.848 441.052 271.968 441.172 272.088 cv
442.972 272.808 li
443.092 272.808 443.212 272.928 443.332 272.928 cv
443.332 272.928 443.332 272.928 443.452 273.048 cv
cp
438.172 270.168 mo
438.052 269.928 437.812 269.808 437.452 269.688 cv
437.212 269.688 436.972 269.688 436.612 269.928 cv
436.612 269.928 436.492 270.048 436.372 270.048 cv
436.252 270.168 436.132 270.288 436.012 270.408 cv
435.412 271.128 li
437.332 273.048 li
438.052 272.208 li
438.292 272.088 438.412 271.848 438.532 271.728 cv
438.532 271.488 438.652 271.248 438.652 271.128 cv
438.652 270.888 438.652 270.768 438.532 270.528 cv
438.532 270.408 438.412 270.288 438.172 270.168 cv
cp
444.292 267.888 mo
446.332 270.048 li
446.332 270.048 446.452 270.048 446.452 270.168 cv
446.452 270.168 li
446.332 270.288 446.332 270.288 446.332 270.408 cv
446.212 270.408 446.212 270.528 446.092 270.528 cv
446.092 270.648 445.972 270.648 445.972 270.768 cv
445.852 270.768 445.852 270.768 445.732 270.768 cv
445.732 270.888 445.732 270.888 445.732 270.888 cv
445.612 270.888 445.612 270.768 445.612 270.768 cv
443.452 268.728 li
438.652 267.048 li
438.532 267.048 438.412 267.048 438.412 266.928 cv
438.412 266.928 438.292 266.928 438.292 266.808 cv
438.412 266.808 438.412 266.808 438.412 266.688 cv
438.532 266.688 438.532 266.568 438.652 266.448 cv
438.772 266.328 438.772 266.328 438.892 266.208 cv
439.012 266.208 li
439.132 266.088 439.132 266.088 439.132 266.088 cv
439.132 266.088 439.252 266.088 439.252 266.208 cv
441.652 267.048 li
441.892 267.048 442.132 267.168 442.372 267.288 cv
442.612 267.408 442.972 267.528 443.212 267.528 cv
443.092 267.288 442.972 267.048 442.852 266.808 cv
442.732 266.568 442.732 266.328 442.612 266.088 cv
441.772 263.688 li
441.772 263.688 441.772 263.568 441.652 263.568 cv
441.652 263.568 441.652 263.448 441.772 263.448 cv
441.772 263.328 li
441.892 263.208 441.892 263.208 442.012 263.088 cv
442.132 262.968 442.252 262.968 442.252 262.848 cv
442.372 262.848 442.372 262.848 442.492 262.848 cv
442.492 262.848 li
442.612 262.848 442.612 262.968 442.612 263.088 cv
cp
448.492 260.088 mo
448.732 260.328 448.972 260.688 449.092 260.928 cv
449.212 261.288 449.332 261.648 449.332 262.008 cv
449.332 262.248 449.212 262.608 448.972 262.968 cv
448.852 263.328 448.612 263.688 448.252 264.048 cv
447.652 264.648 li
449.692 266.808 li
449.692 266.928 li
449.692 266.928 449.692 267.048 449.572 267.048 cv
449.572 267.168 449.452 267.168 449.452 267.288 cv
449.332 267.288 449.332 267.408 449.212 267.408 cv
449.212 267.528 449.092 267.528 449.092 267.528 cv
448.972 267.528 li
448.972 267.528 448.972 267.528 448.852 267.528 cv
443.572 262.248 li
443.452 262.128 443.452 262.008 443.452 261.888 cv
443.452 261.768 443.452 261.648 443.572 261.648 cv
444.772 260.328 li
444.892 260.208 445.012 260.088 445.132 259.968 cv
445.252 259.968 445.492 259.848 445.612 259.728 cv
445.852 259.608 446.092 259.488 446.332 259.368 cv
446.572 259.368 446.812 259.368 447.052 259.368 cv
447.292 259.368 447.532 259.488 447.772 259.608 cv
448.012 259.728 448.252 259.848 448.492 260.088 cv
cp
447.772 260.928 mo
447.532 260.688 447.292 260.568 447.052 260.448 cv
446.812 260.448 446.572 260.328 446.332 260.448 cv
446.092 260.448 445.972 260.568 445.852 260.688 cv
445.612 260.808 445.492 260.928 445.372 261.048 cv
444.652 261.768 li
446.932 264.048 li
447.652 263.328 li
447.892 263.088 448.012 262.968 448.132 262.728 cv
448.252 262.488 448.252 262.248 448.252 262.128 cv
448.252 261.888 448.252 261.648 448.132 261.528 cv
448.012 261.288 447.892 261.048 447.772 260.928 cv
cp
451.972 253.968 mo
451.972 253.968 451.972 253.968 452.092 254.088 cv
452.092 254.208 li
452.092 254.208 452.092 254.208 452.092 254.328 cv
452.092 254.328 li
450.532 256.008 li
455.452 260.928 li
455.452 261.048 li
455.452 261.168 li
455.452 261.168 455.452 261.288 455.332 261.288 cv
455.332 261.408 455.332 261.408 455.212 261.528 cv
455.092 261.528 455.092 261.648 454.972 261.648 cv
454.852 261.768 li
454.852 261.768 454.852 261.768 454.732 261.768 cv
454.732 261.768 li
449.692 256.728 li
448.132 258.408 li
448.012 258.408 li
448.012 258.408 448.012 258.408 447.892 258.408 cv
447.892 258.408 447.892 258.408 447.772 258.288 cv
447.772 258.288 447.652 258.288 447.652 258.168 cv
447.532 258.168 447.532 258.048 447.532 258.048 cv
447.412 258.048 447.412 257.928 447.412 257.928 cv
447.412 257.808 li
447.412 257.688 li
451.492 253.728 li
451.612 253.728 451.612 253.728 451.612 253.728 cv
451.732 253.728 li
451.852 253.848 451.852 253.848 451.972 253.968 cv
cp
460.132 250.728 mo
460.492 251.208 460.852 251.688 461.212 252.168 cv
461.452 252.648 461.572 253.128 461.572 253.608 cv
461.692 254.088 461.572 254.448 461.452 254.928 cv
461.212 255.408 460.972 255.888 460.492 256.368 cv
460.012 256.728 459.652 257.088 459.172 257.208 cv
458.692 257.448 458.332 257.568 457.852 257.448 cv
457.372 257.448 456.892 257.328 456.412 256.968 cv
455.932 256.728 455.572 256.368 455.092 255.888 cv
454.612 255.528 454.252 255.048 454.012 254.568 cv
453.772 254.088 453.532 253.608 453.532 253.128 cv
453.532 252.648 453.532 252.168 453.772 251.688 cv
453.892 251.208 454.252 250.728 454.732 250.368 cv
455.092 249.888 455.572 249.648 455.932 249.408 cv
456.412 249.168 456.892 249.168 457.372 249.168 cv
457.732 249.168 458.212 249.408 458.692 249.648 cv
459.172 249.888 459.652 250.248 460.132 250.728 cv
cp
459.292 251.568 mo
459.052 251.208 458.692 250.968 458.332 250.728 cv
457.972 250.488 457.612 250.368 457.372 250.248 cv
457.012 250.248 456.652 250.248 456.292 250.368 cv
455.932 250.488 455.572 250.728 455.332 250.968 cv
454.972 251.328 454.732 251.688 454.612 252.048 cv
454.492 252.408 454.492 252.768 454.612 253.128 cv
454.612 253.368 454.852 253.728 454.972 254.088 cv
455.212 254.448 455.452 254.808 455.812 255.048 cv
456.172 255.408 456.532 255.648 456.772 255.888 cv
457.132 256.128 457.492 256.248 457.852 256.368 cv
458.212 256.488 458.452 256.368 458.812 256.248 cv
459.172 256.248 459.532 256.008 459.892 255.648 cv
460.132 255.288 460.372 254.928 460.492 254.568 cv
460.612 254.208 460.612 253.848 460.612 253.608 cv
460.492 253.248 460.372 252.888 460.132 252.528 cv
459.892 252.168 459.652 251.808 459.292 251.568 cv
cp
f
471.892 270.168 mo
471.892 270.168 471.892 270.168 471.892 270.288 cv
471.892 270.288 li
471.892 270.408 471.892 270.408 471.772 270.528 cv
471.772 270.528 471.652 270.648 471.532 270.648 cv
471.532 270.768 471.412 270.888 471.412 270.888 cv
471.292 270.888 471.292 271.008 471.292 271.008 cv
471.172 271.008 471.172 271.008 471.172 271.008 cv
471.052 271.008 471.052 271.008 470.932 270.888 cv
469.132 270.168 li
468.892 270.048 468.652 269.928 468.532 269.928 cv
468.292 269.808 468.052 269.808 467.932 269.808 cv
467.692 269.808 467.572 269.808 467.332 269.928 cv
467.212 269.928 467.092 270.048 466.852 270.288 cv
466.372 270.768 li
468.772 273.168 li
468.772 273.288 468.772 273.288 468.892 273.288 cv
468.772 273.408 li
468.772 273.528 li
468.652 273.648 468.652 273.648 468.532 273.768 cv
468.412 273.888 li
468.292 274.008 468.292 274.008 468.172 274.008 cv
468.172 274.008 468.172 274.008 468.052 274.008 cv
468.052 274.008 li
462.772 268.728 li
462.652 268.608 462.532 268.488 462.532 268.368 cv
462.532 268.248 462.652 268.128 462.652 268.128 cv
463.972 266.808 li
464.092 266.688 464.212 266.568 464.332 266.568 cv
464.332 266.448 464.452 266.328 464.572 266.328 cv
464.812 266.088 465.052 265.968 465.292 265.848 cv
465.532 265.728 465.892 265.728 466.132 265.728 cv
466.372 265.728 466.612 265.848 466.732 265.968 cv
466.972 266.088 467.212 266.208 467.452 266.448 cv
467.572 266.568 467.692 266.808 467.812 266.928 cv
467.932 267.168 468.052 267.408 468.052 267.648 cv
468.052 267.768 468.052 268.008 467.932 268.248 cv
467.932 268.488 467.812 268.728 467.692 268.968 cv
467.932 268.848 468.052 268.848 468.172 268.848 cv
468.292 268.848 468.412 268.848 468.652 268.848 cv
468.772 268.848 468.892 268.968 469.132 268.968 cv
469.252 268.968 469.492 269.088 469.612 269.208 cv
471.412 269.928 li
471.532 270.048 471.652 270.048 471.772 270.048 cv
471.772 270.048 471.772 270.168 471.892 270.168 cv
cp
466.732 267.288 mo
466.492 267.048 466.252 266.928 466.012 266.808 cv
465.652 266.808 465.412 266.808 465.172 267.048 cv
465.052 267.048 464.932 267.168 464.812 267.288 cv
464.692 267.288 464.572 267.408 464.452 267.528 cv
463.852 268.248 li
465.772 270.168 li
466.492 269.448 li
466.732 269.208 466.852 268.968 466.972 268.848 cv
466.972 268.608 467.092 268.488 467.092 268.248 cv
467.092 268.128 467.092 267.888 466.972 267.768 cv
466.972 267.528 466.852 267.408 466.732 267.288 cv
cp
477.172 264.528 mo
477.172 264.648 477.292 264.648 477.292 264.648 cv
477.412 264.768 477.412 264.768 477.412 264.768 cv
477.412 264.888 477.292 264.888 477.292 265.008 cv
477.292 265.008 477.172 265.128 477.052 265.248 cv
477.052 265.248 476.932 265.368 476.812 265.368 cv
476.812 265.488 476.812 265.488 476.692 265.488 cv
476.692 265.488 476.692 265.488 476.572 265.488 cv
476.572 265.488 476.572 265.488 476.452 265.488 cv
474.652 264.648 li
472.252 266.928 li
473.092 268.848 li
473.212 268.848 473.212 268.848 473.212 268.968 cv
473.212 268.968 473.212 268.968 473.212 269.088 cv
473.092 269.088 473.092 269.088 473.092 269.208 cv
472.972 269.208 472.972 269.328 472.852 269.448 cv
472.852 269.448 472.732 269.568 472.612 269.568 cv
472.612 269.688 472.492 269.688 472.492 269.688 cv
472.492 269.688 472.372 269.688 472.372 269.568 cv
472.372 269.568 472.252 269.568 472.252 269.448 cv
468.892 262.128 li
468.892 262.128 468.772 262.128 468.772 262.008 cv
468.772 262.008 468.892 262.008 468.892 261.888 cv
468.892 261.888 468.892 261.768 469.012 261.768 cv
469.012 261.648 469.132 261.648 469.252 261.528 cv
469.252 261.408 469.372 261.408 469.492 261.288 cv
469.612 261.168 li
469.732 261.168 li
469.852 261.168 li
cp
469.972 262.368 mo
469.972 262.368 li
471.772 266.208 li
473.812 264.168 li
cp
482.332 259.248 mo
482.332 259.368 482.452 259.368 482.452 259.488 cv
482.452 259.608 li
482.452 259.728 482.452 259.728 482.452 259.848 cv
482.332 259.848 482.332 259.848 482.332 259.968 cv
482.092 260.208 li
481.972 260.328 481.852 260.328 481.852 260.328 cv
481.732 260.448 481.612 260.448 481.612 260.448 cv
481.492 260.448 481.372 260.448 481.252 260.448 cv
481.132 260.448 481.012 260.448 480.772 260.328 cv
475.732 258.768 li
475.492 258.768 475.252 258.648 475.012 258.528 cv
474.652 258.528 474.412 258.408 474.172 258.288 cv
474.412 258.528 474.652 258.768 474.772 258.888 cv
475.012 259.128 475.252 259.368 475.492 259.608 cv
478.972 263.088 li
478.972 263.208 478.972 263.208 478.972 263.208 cv
478.972 263.328 478.972 263.328 478.852 263.328 cv
478.852 263.448 478.732 263.448 478.732 263.568 cv
478.612 263.688 478.612 263.688 478.492 263.808 cv
478.372 263.808 li
478.252 263.808 li
478.252 263.808 478.252 263.808 478.132 263.808 cv
472.852 258.528 li
472.732 258.408 472.732 258.288 472.732 258.168 cv
472.732 258.048 472.852 257.928 472.852 257.928 cv
473.212 257.448 li
473.332 257.448 473.452 257.328 473.572 257.328 cv
473.572 257.208 473.692 257.208 473.692 257.208 cv
473.812 257.208 473.932 257.208 474.052 257.208 cv
474.172 257.208 474.292 257.328 474.412 257.328 cv
478.252 258.528 li
478.492 258.528 478.732 258.648 478.972 258.648 cv
479.212 258.768 479.332 258.888 479.572 258.888 cv
479.812 259.008 480.052 259.008 480.172 259.128 cv
480.412 259.128 480.652 259.248 480.892 259.368 cv
480.652 259.128 480.412 258.888 480.172 258.648 cv
479.812 258.288 479.572 258.048 479.332 257.808 cv
476.332 254.808 li
476.212 254.688 476.212 254.688 476.212 254.688 cv
476.212 254.568 li
476.332 254.448 li
476.332 254.328 476.452 254.328 476.572 254.208 cv
476.692 254.088 li
476.812 253.968 476.812 253.968 476.812 253.968 cv
476.932 253.968 476.932 253.968 476.932 253.968 cv
477.052 253.968 li
cp
485.692 250.608 mo
486.172 251.088 486.532 251.688 486.772 252.168 cv
487.012 252.648 487.132 253.128 487.132 253.608 cv
487.132 254.088 487.012 254.568 486.772 255.048 cv
486.532 255.528 486.172 256.008 485.692 256.488 cv
484.492 257.688 li
484.492 257.808 484.372 257.808 484.252 257.808 cv
484.132 257.808 484.012 257.808 483.892 257.688 cv
478.852 252.528 li
478.732 252.408 478.612 252.408 478.612 252.288 cv
478.732 252.168 478.732 252.048 478.732 251.928 cv
480.052 250.728 li
480.532 250.248 481.012 249.888 481.492 249.648 cv
481.972 249.408 482.452 249.288 482.932 249.288 cv
483.412 249.288 483.892 249.408 484.372 249.648 cv
484.852 249.888 485.212 250.248 485.692 250.608 cv
cp
484.972 251.448 mo
484.612 251.208 484.252 250.968 483.892 250.728 cv
483.652 250.488 483.292 250.368 482.932 250.368 cv
482.572 250.368 482.212 250.368 481.852 250.608 cv
481.492 250.728 481.012 250.968 480.652 251.328 cv
479.932 252.168 li
484.372 256.608 li
485.092 255.768 li
485.452 255.408 485.812 255.048 485.932 254.808 cv
486.052 254.448 486.172 254.088 486.172 253.728 cv
486.172 253.368 486.052 253.008 485.812 252.648 cv
485.572 252.288 485.332 251.928 484.972 251.448 cv
cp
f
504.652 262.488 mo
504.772 262.608 504.772 262.608 504.892 262.608 cv
504.892 262.728 504.892 262.728 504.892 262.728 cv
504.892 262.848 504.892 262.848 504.892 262.848 cv
504.892 262.968 504.892 262.968 504.892 262.968 cv
502.132 265.728 li
502.012 265.848 502.012 265.848 501.892 265.848 cv
501.772 265.848 501.652 265.848 501.532 265.728 cv
496.372 260.568 li
496.252 260.448 496.252 260.328 496.252 260.208 cv
496.252 260.088 496.372 260.088 496.372 259.968 cv
499.132 257.208 li
499.252 257.208 499.252 257.208 499.252 257.208 cv
499.372 257.208 499.372 257.328 499.372 257.328 cv
499.492 257.328 499.492 257.328 499.612 257.448 cv
499.732 257.568 li
499.732 257.688 499.732 257.688 499.732 257.688 cv
499.732 257.808 499.732 257.808 499.732 257.808 cv
499.732 257.928 li
497.452 260.088 li
499.252 261.888 li
501.172 259.968 li
501.292 259.968 501.292 259.968 501.292 259.968 cv
501.412 259.968 li
501.412 259.968 501.532 259.968 501.532 260.088 cv
501.532 260.088 501.652 260.088 501.652 260.208 cv
501.772 260.208 501.772 260.328 501.772 260.328 cv
501.892 260.328 501.892 260.448 501.892 260.448 cv
501.892 260.568 li
501.892 260.568 501.892 260.568 501.892 260.688 cv
499.852 262.608 li
502.012 264.648 li
504.292 262.368 li
504.292 262.248 li
504.412 262.248 li
504.532 262.368 li
504.652 262.368 504.652 262.488 504.652 262.488 cv
cp
510.052 257.568 mo
510.052 257.688 li
510.052 257.688 510.052 257.688 510.052 257.808 cv
510.052 257.808 510.052 257.808 509.932 257.928 cv
509.932 257.928 509.812 258.048 509.812 258.168 cv
509.692 258.168 509.572 258.288 509.572 258.288 cv
509.452 258.408 509.452 258.408 509.452 258.408 cv
509.332 258.408 509.332 258.408 509.332 258.408 cv
509.212 258.408 509.212 258.408 509.212 258.408 cv
507.292 257.568 li
507.052 257.448 506.812 257.328 506.692 257.328 cv
506.452 257.208 506.332 257.208 506.092 257.208 cv
505.852 257.208 505.732 257.208 505.492 257.328 cv
505.372 257.448 505.252 257.568 505.012 257.688 cv
504.532 258.168 li
506.932 260.688 li
507.052 260.688 li
507.052 260.808 507.052 260.808 506.932 260.808 cv
506.932 260.928 506.932 260.928 506.932 260.928 cv
506.812 261.048 506.812 261.048 506.692 261.168 cv
506.692 261.288 506.572 261.288 506.572 261.288 cv
506.452 261.408 506.452 261.408 506.332 261.408 cv
506.332 261.408 li
506.212 261.408 506.212 261.408 506.212 261.408 cv
500.932 256.128 li
500.812 256.008 500.692 255.888 500.692 255.768 cv
500.692 255.648 500.812 255.528 500.812 255.528 cv
502.132 254.328 li
502.252 254.208 502.372 254.088 502.492 253.968 cv
502.612 253.848 502.612 253.728 502.732 253.728 cv
502.972 253.488 503.212 253.368 503.452 253.248 cv
503.812 253.248 504.052 253.128 504.292 253.248 cv
504.532 253.248 504.772 253.248 504.892 253.368 cv
505.132 253.488 505.372 253.608 505.612 253.848 cv
505.732 253.968 505.852 254.208 505.972 254.448 cv
506.092 254.568 506.212 254.808 506.212 255.048 cv
506.212 255.288 506.212 255.528 506.092 255.648 cv
506.092 255.888 505.972 256.128 505.852 256.368 cv
506.092 256.368 506.212 256.248 506.332 256.248 cv
506.452 256.248 506.572 256.248 506.812 256.248 cv
506.932 256.248 507.052 256.368 507.292 256.368 cv
507.412 256.488 507.652 256.488 507.772 256.608 cv
509.572 257.328 li
509.692 257.448 509.812 257.448 509.932 257.448 cv
509.932 257.568 510.052 257.568 510.052 257.568 cv
cp
504.892 254.688 mo
504.652 254.448 504.412 254.328 504.172 254.328 cv
503.812 254.208 503.572 254.328 503.332 254.448 cv
503.212 254.568 503.092 254.568 502.972 254.688 cv
502.852 254.808 502.732 254.928 502.612 255.048 cv
502.012 255.648 li
503.932 257.568 li
504.652 256.848 li
504.892 256.608 505.012 256.488 505.132 256.248 cv
505.132 256.008 505.252 255.888 505.252 255.648 cv
505.252 255.528 505.252 255.288 505.132 255.168 cv
505.132 255.048 505.012 254.808 504.892 254.688 cv
cp
512.572 252.048 mo
512.932 252.288 513.052 252.528 513.172 252.888 cv
513.292 253.128 513.292 253.488 513.292 253.848 cv
513.292 254.088 513.172 254.448 513.052 254.808 cv
512.812 255.048 512.692 255.408 512.332 255.648 cv
512.212 255.888 511.972 256.008 511.732 256.128 cv
511.612 256.248 511.372 256.368 511.252 256.488 cv
511.012 256.488 510.892 256.608 510.772 256.608 cv
510.652 256.608 510.532 256.728 510.412 256.728 cv
510.412 256.728 510.292 256.608 510.172 256.608 cv
510.172 256.608 510.052 256.488 509.932 256.368 cv
509.932 256.368 509.932 256.248 509.812 256.248 cv
509.812 256.128 li
509.692 256.128 509.692 256.008 509.692 256.008 cv
509.812 256.008 509.812 256.008 509.812 255.888 cv
509.812 255.888 509.932 255.888 510.052 255.888 cv
510.172 255.768 510.292 255.768 510.532 255.768 cv
510.652 255.648 510.892 255.528 511.132 255.408 cv
511.252 255.288 511.492 255.168 511.732 254.928 cv
511.972 254.808 512.092 254.568 512.092 254.448 cv
512.212 254.208 512.332 254.088 512.332 253.848 cv
512.332 253.728 512.332 253.488 512.212 253.368 cv
512.212 253.248 512.092 253.008 511.852 252.888 cv
511.732 252.768 511.612 252.648 511.372 252.528 cv
511.132 252.528 511.012 252.528 510.772 252.528 cv
510.532 252.648 510.412 252.648 510.172 252.768 cv
509.932 252.768 509.692 252.888 509.452 253.008 cv
509.212 253.128 508.972 253.128 508.732 253.248 cv
508.492 253.248 508.252 253.368 508.012 253.368 cv
507.772 253.248 507.532 253.248 507.292 253.128 cv
507.052 253.128 506.812 252.888 506.572 252.648 cv
506.332 252.408 506.092 252.168 505.972 251.928 cv
505.972 251.688 505.852 251.328 505.852 251.088 cv
505.972 250.848 505.972 250.488 506.212 250.248 cv
506.332 250.008 506.572 249.648 506.812 249.408 cv
506.932 249.288 507.052 249.168 507.172 249.048 cv
507.292 248.928 507.532 248.928 507.652 248.808 cv
507.772 248.688 507.892 248.688 508.012 248.688 cv
508.252 248.568 508.252 248.568 508.372 248.568 cv
508.492 248.568 li
508.492 248.568 508.492 248.568 508.612 248.568 cv
508.612 248.688 508.612 248.688 508.612 248.688 cv
508.732 248.688 508.732 248.808 508.852 248.808 cv
508.852 248.928 508.852 248.928 508.972 248.928 cv
508.972 249.048 508.972 249.048 508.972 249.048 cv
509.092 249.168 509.092 249.168 509.092 249.168 cv
509.092 249.288 508.972 249.288 508.972 249.288 cv
508.972 249.288 508.852 249.288 508.852 249.408 cv
508.732 249.408 508.492 249.408 508.372 249.528 cv
508.252 249.528 508.132 249.648 507.892 249.648 cv
507.772 249.768 507.532 249.888 507.412 250.128 cv
507.172 250.248 507.052 250.368 507.052 250.608 cv
506.932 250.728 506.932 250.848 506.932 251.088 cv
506.932 251.208 506.932 251.328 506.932 251.448 cv
507.052 251.568 507.172 251.688 507.292 251.808 cv
507.412 252.048 507.532 252.048 507.772 252.168 cv
507.892 252.168 508.132 252.168 508.372 252.168 cv
508.612 252.168 508.732 252.048 508.972 251.928 cv
509.212 251.928 509.452 251.808 509.692 251.688 cv
509.932 251.688 510.172 251.568 510.412 251.448 cv
510.652 251.448 510.892 251.328 511.132 251.328 cv
511.372 251.328 511.732 251.448 511.972 251.568 cv
512.212 251.568 512.452 251.808 512.572 252.048 cv
cp
f
528.652 264.528 mo
528.652 264.648 li
528.652 264.768 li
528.652 264.888 528.532 264.888 528.532 265.008 cv
528.412 265.008 528.412 265.128 528.292 265.128 cv
528.292 265.248 528.172 265.248 528.172 265.368 cv
528.052 265.368 528.052 265.488 528.052 265.488 cv
527.932 265.488 527.932 265.488 527.932 265.488 cv
527.812 265.608 527.812 265.608 527.812 265.608 cv
527.692 265.608 li
527.692 265.608 527.692 265.608 527.572 265.488 cv
520.372 262.128 li
520.372 262.008 520.252 262.008 520.252 262.008 cv
520.132 261.888 520.132 261.888 520.132 261.888 cv
520.132 261.768 520.252 261.768 520.252 261.648 cv
520.372 261.648 520.372 261.528 520.492 261.408 cv
520.612 261.288 520.612 261.288 520.732 261.288 cv
520.732 261.168 520.852 261.168 520.852 261.168 cv
520.852 261.168 520.852 261.168 520.972 261.168 cv
520.972 261.168 520.972 261.168 521.092 261.168 cv
527.572 264.408 li
527.572 264.288 li
524.332 257.928 li
524.212 257.808 li
524.212 257.808 524.212 257.808 524.212 257.688 cv
524.332 257.688 524.332 257.568 524.332 257.568 cv
524.452 257.448 524.452 257.448 524.572 257.328 cv
524.692 257.208 524.692 257.208 524.812 257.088 cv
524.932 257.088 li
525.052 257.088 525.052 257.088 525.052 257.088 cv
525.052 257.208 525.172 257.208 525.172 257.328 cv
cp
534.532 258.288 mo
534.652 258.408 li
534.652 258.528 534.772 258.528 534.772 258.528 cv
534.772 258.648 534.772 258.648 534.772 258.648 cv
534.772 258.648 534.772 258.768 534.652 258.768 cv
531.892 261.528 li
531.892 261.528 531.772 261.648 531.652 261.648 cv
531.532 261.648 531.412 261.528 531.292 261.528 cv
526.252 256.368 li
526.132 256.248 526.012 256.128 526.132 256.008 cv
526.132 255.888 526.132 255.888 526.252 255.768 cv
528.892 253.008 li
529.012 253.008 li
529.132 253.008 li
529.132 253.008 529.252 253.008 529.252 253.128 cv
529.252 253.128 529.372 253.128 529.372 253.248 cv
529.492 253.248 529.492 253.368 529.492 253.368 cv
529.612 253.368 529.612 253.488 529.612 253.488 cv
529.612 253.608 li
529.612 253.608 529.612 253.608 529.612 253.728 cv
527.332 255.888 li
529.132 257.688 li
531.052 255.768 li
531.052 255.768 531.052 255.768 531.172 255.768 cv
531.172 255.768 li
531.292 255.768 531.292 255.768 531.412 255.768 cv
531.412 255.888 531.412 255.888 531.532 256.008 cv
531.532 256.008 531.652 256.008 531.652 256.128 cv
531.652 256.248 li
531.772 256.248 531.772 256.248 531.652 256.368 cv
531.652 256.368 li
529.732 258.288 li
531.772 260.328 li
534.052 258.168 li
534.052 258.048 534.052 258.048 534.172 258.048 cv
534.172 258.048 534.172 258.048 534.292 258.048 cv
534.292 258.048 534.292 258.048 534.412 258.168 cv
534.412 258.168 534.532 258.168 534.532 258.288 cv
cp
539.692 253.488 mo
539.692 253.488 539.812 253.488 539.812 253.608 cv
539.812 253.608 li
539.692 253.728 539.692 253.728 539.692 253.848 cv
539.572 253.848 539.572 253.968 539.452 254.088 cv
539.332 254.088 539.332 254.208 539.212 254.208 cv
539.212 254.208 539.212 254.328 539.092 254.328 cv
538.972 254.328 li
538.852 254.328 li
536.932 253.488 li
536.812 253.368 536.572 253.248 536.332 253.248 cv
536.212 253.128 535.972 253.128 535.852 253.128 cv
535.612 253.128 535.372 253.128 535.252 253.248 cv
535.132 253.248 534.892 253.368 534.772 253.608 cv
534.172 254.088 li
536.692 256.488 li
536.692 256.608 536.692 256.608 536.692 256.608 cv
536.692 256.728 li
536.692 256.728 536.692 256.848 536.572 256.848 cv
536.572 256.968 536.452 256.968 536.452 257.088 cv
536.332 257.088 536.332 257.208 536.212 257.208 cv
536.212 257.328 536.092 257.328 536.092 257.328 cv
535.972 257.328 li
535.972 257.328 535.972 257.328 535.852 257.328 cv
530.572 252.048 li
530.452 251.928 530.452 251.808 530.452 251.688 cv
530.452 251.568 530.452 251.448 530.572 251.448 cv
531.772 250.248 li
531.892 250.008 532.012 249.888 532.132 249.888 cv
532.252 249.768 532.372 249.648 532.492 249.648 cv
532.732 249.408 532.972 249.288 533.212 249.168 cv
533.452 249.168 533.692 249.048 533.932 249.048 cv
534.172 249.048 534.412 249.168 534.652 249.288 cv
534.892 249.408 535.132 249.528 535.252 249.768 cv
535.492 249.888 535.612 250.128 535.732 250.368 cv
535.852 250.488 535.852 250.728 535.852 250.968 cv
535.852 251.208 535.852 251.328 535.852 251.568 cv
535.852 251.808 535.732 252.048 535.612 252.288 cv
535.732 252.168 535.852 252.168 535.972 252.168 cv
536.212 252.168 536.332 252.168 536.452 252.168 cv
536.572 252.168 536.812 252.288 536.932 252.288 cv
537.172 252.408 537.292 252.408 537.532 252.528 cv
539.332 253.248 li
539.452 253.368 539.572 253.368 539.572 253.368 cv
539.692 253.488 539.692 253.488 539.692 253.488 cv
cp
534.532 250.608 mo
534.292 250.368 534.052 250.248 533.812 250.128 cv
533.572 250.128 533.332 250.248 532.972 250.368 cv
532.852 250.368 532.852 250.488 532.732 250.608 cv
532.612 250.608 532.492 250.728 532.372 250.968 cv
531.652 251.568 li
533.572 253.488 li
534.292 252.768 li
534.532 252.528 534.652 252.288 534.772 252.168 cv
534.892 251.928 534.892 251.808 535.012 251.568 cv
535.012 251.448 534.892 251.208 534.892 251.088 cv
534.772 250.848 534.652 250.728 534.532 250.608 cv
cp
f
541.972 276.528 mo
542.092 276.528 542.212 276.528 542.212 276.648 cv
542.212 276.648 542.332 276.648 542.212 276.768 cv
542.212 276.768 542.212 276.768 542.212 276.888 cv
542.092 276.888 542.092 277.008 541.972 277.128 cv
541.852 277.248 541.852 277.248 541.732 277.368 cv
541.612 277.368 li
541.612 277.488 541.492 277.488 541.492 277.488 cv
541.492 277.488 541.492 277.368 541.372 277.368 cv
539.572 276.528 li
537.172 278.928 li
538.012 280.728 li
538.012 280.728 538.012 280.848 538.132 280.848 cv
538.012 280.968 li
538.012 281.088 li
537.892 281.208 537.892 281.208 537.772 281.328 cv
537.652 281.448 537.652 281.448 537.532 281.568 cv
537.412 281.568 li
537.292 281.568 537.292 281.568 537.292 281.568 cv
537.292 281.448 537.172 281.448 537.172 281.328 cv
533.692 274.128 li
533.692 274.008 533.692 274.008 533.692 274.008 cv
533.692 273.888 533.692 273.888 533.812 273.768 cv
533.812 273.768 533.812 273.768 533.812 273.648 cv
533.932 273.648 534.052 273.528 534.052 273.408 cv
534.172 273.288 534.292 273.288 534.292 273.168 cv
534.412 273.168 534.412 273.048 534.532 273.048 cv
534.652 273.048 li
534.772 273.048 li
cp
534.892 274.248 mo
534.892 274.248 li
536.692 278.088 li
538.732 276.048 li
cp
541.372 266.808 mo
541.492 266.928 541.492 266.928 541.492 267.048 cv
541.612 267.048 541.612 267.048 541.612 267.168 cv
541.612 267.168 541.612 267.168 541.612 267.288 cv
541.612 267.288 li
539.932 268.968 li
544.852 273.888 li
544.972 273.888 544.972 273.888 544.972 274.008 cv
544.972 274.008 544.972 274.008 544.972 274.128 cv
544.972 274.128 544.852 274.128 544.852 274.248 cv
544.732 274.368 li
544.612 274.488 544.492 274.488 544.492 274.608 cv
544.372 274.608 544.372 274.608 544.372 274.728 cv
544.252 274.728 544.252 274.728 544.252 274.728 cv
544.252 274.728 544.132 274.728 544.132 274.608 cv
539.212 269.688 li
537.532 271.248 li
537.532 271.368 537.532 271.368 537.532 271.368 cv
537.412 271.368 537.412 271.368 537.412 271.368 cv
537.292 271.368 537.292 271.248 537.292 271.248 cv
537.172 271.248 537.172 271.128 537.052 271.128 cv
537.052 271.128 537.052 271.008 536.932 271.008 cv
536.932 270.888 536.932 270.888 536.932 270.888 cv
536.812 270.768 536.812 270.768 536.932 270.768 cv
536.932 270.648 536.932 270.648 536.932 270.648 cv
540.892 266.688 li
541.012 266.568 li
541.012 266.568 541.012 266.568 541.132 266.568 cv
541.132 266.688 541.132 266.688 541.252 266.688 cv
541.372 266.808 li
cp
545.812 262.368 mo
545.932 262.368 545.932 262.488 546.052 262.488 cv
546.052 262.608 546.052 262.608 546.052 262.608 cv
546.052 262.728 546.052 262.728 546.052 262.728 cv
546.052 262.848 li
544.372 264.408 li
549.412 269.448 li
549.412 269.568 549.412 269.568 549.412 269.568 cv
549.412 269.688 549.412 269.688 549.292 269.688 cv
549.292 269.808 549.172 269.808 549.172 269.928 cv
549.052 270.048 549.052 270.048 548.932 270.168 cv
548.812 270.168 li
548.812 270.168 548.692 270.288 548.692 270.168 cv
548.692 270.168 548.692 270.168 548.572 270.168 cv
543.652 265.248 li
542.092 266.808 li
541.972 266.808 541.972 266.808 541.972 266.808 cv
541.972 266.928 541.852 266.928 541.852 266.808 cv
541.732 266.808 li
541.612 266.688 li
541.492 266.568 541.492 266.568 541.492 266.448 cv
541.372 266.448 541.372 266.448 541.372 266.328 cv
541.372 266.328 541.372 266.328 541.372 266.208 cv
541.372 266.208 li
545.332 262.128 li
545.452 262.128 545.452 262.128 545.452 262.128 cv
545.572 262.128 li
545.572 262.128 545.692 262.128 545.692 262.248 cv
545.812 262.248 545.812 262.368 545.812 262.368 cv
cp
558.292 260.568 mo
558.292 260.568 li
558.292 260.688 558.292 260.688 558.292 260.688 cv
558.292 260.808 558.292 260.808 558.172 260.808 cv
558.172 260.928 558.052 260.928 558.052 261.048 cv
557.932 261.168 557.932 261.168 557.812 261.288 cv
557.692 261.288 li
557.692 261.288 557.572 261.408 557.572 261.288 cv
557.572 261.288 557.572 261.288 557.452 261.288 cv
552.532 256.248 li
552.532 256.368 li
555.532 263.328 li
555.532 263.448 li
555.532 263.568 li
555.412 263.568 555.412 263.688 555.412 263.688 cv
555.292 263.808 li
555.172 263.928 555.172 263.928 555.052 264.048 cv
554.932 264.048 li
554.812 264.168 li
554.812 264.048 li
547.852 261.048 li
552.772 265.968 li
552.772 266.088 552.892 266.088 552.892 266.088 cv
552.892 266.088 552.892 266.208 552.772 266.208 cv
552.772 266.328 li
552.652 266.448 552.652 266.448 552.532 266.568 cv
552.412 266.688 li
552.292 266.808 552.292 266.808 552.172 266.808 cv
552.172 266.808 li
552.052 266.808 552.052 266.808 552.052 266.808 cv
546.772 261.528 li
546.652 261.408 546.532 261.288 546.652 261.168 cv
546.652 261.048 546.652 260.928 546.772 260.808 cv
547.252 260.328 li
547.252 260.328 547.372 260.208 547.492 260.088 cv
547.612 260.088 547.612 260.088 547.732 260.088 cv
547.852 259.968 547.972 259.968 548.092 260.088 cv
548.092 260.088 548.212 260.088 548.332 260.208 cv
554.092 262.728 li
554.092 262.608 li
551.692 256.848 li
551.692 256.728 551.572 256.608 551.572 256.488 cv
551.572 256.368 551.572 256.248 551.572 256.248 cv
551.572 256.128 551.572 256.008 551.692 256.008 cv
551.692 255.888 551.812 255.768 551.812 255.768 cv
552.292 255.288 li
552.412 255.168 552.412 255.168 552.412 255.168 cv
552.532 255.168 552.532 255.048 552.652 255.048 cv
552.772 255.168 li
552.892 255.168 552.892 255.168 553.012 255.288 cv
cp
560.572 258.288 mo
560.572 258.288 li
560.572 258.408 560.572 258.408 560.572 258.408 cv
560.572 258.528 560.572 258.528 560.452 258.648 cv
560.332 258.768 li
560.212 258.888 560.212 258.888 560.092 259.008 cv
559.972 259.008 li
559.972 259.128 559.852 259.128 559.852 259.128 cv
559.852 259.008 559.852 259.008 559.732 259.008 cv
554.332 253.488 li
554.212 253.488 554.212 253.488 554.212 253.488 cv
554.212 253.368 554.212 253.368 554.212 253.368 cv
554.332 253.248 554.332 253.248 554.332 253.248 cv
554.332 253.128 554.452 253.128 554.572 253.008 cv
554.572 252.888 554.692 252.888 554.692 252.888 cv
554.812 252.768 554.812 252.768 554.812 252.768 cv
554.932 252.768 554.932 252.768 554.932 252.768 cv
555.052 252.768 li
cp
560.332 247.848 mo
560.452 247.848 560.452 247.968 560.572 247.968 cv
560.572 248.088 560.572 248.088 560.572 248.088 cv
560.572 248.208 560.572 248.208 560.572 248.208 cv
560.572 248.328 li
558.892 249.888 li
563.932 254.928 li
563.932 255.048 563.932 255.048 563.932 255.048 cv
563.932 255.168 563.932 255.168 563.812 255.168 cv
563.812 255.288 563.692 255.408 563.692 255.408 cv
563.572 255.528 563.572 255.528 563.452 255.648 cv
563.332 255.648 li
563.332 255.648 563.212 255.768 563.212 255.648 cv
563.212 255.648 563.212 255.648 563.092 255.648 cv
558.172 250.728 li
556.612 252.288 li
556.492 252.288 556.492 252.288 556.492 252.408 cv
556.492 252.408 556.372 252.408 556.372 252.288 cv
556.252 252.288 li
556.132 252.168 li
556.012 252.048 556.012 252.048 556.012 251.928 cv
555.892 251.928 555.892 251.928 555.892 251.808 cv
555.892 251.808 555.892 251.808 555.892 251.688 cv
555.892 251.688 li
559.852 247.728 li
559.972 247.608 559.972 247.608 559.972 247.608 cv
560.092 247.608 li
560.212 247.728 li
560.332 247.848 li
cp
f
577.372 267.048 mo
577.492 267.048 li
577.492 267.168 577.492 267.168 577.372 267.168 cv
577.372 267.288 577.372 267.288 577.372 267.288 cv
577.252 267.408 577.252 267.408 577.132 267.528 cv
577.132 267.648 577.012 267.648 577.012 267.648 cv
576.892 267.768 576.892 267.768 576.772 267.768 cv
576.772 267.768 li
576.652 267.768 576.652 267.768 576.652 267.768 cv
571.612 262.728 li
574.612 269.808 li
574.612 269.928 li
574.612 269.928 574.612 269.928 574.612 270.048 cv
574.612 270.048 574.612 270.168 574.492 270.168 cv
574.372 270.288 li
574.252 270.408 574.252 270.408 574.252 270.408 cv
574.132 270.528 574.132 270.528 574.012 270.528 cv
574.012 270.528 li
573.892 270.528 573.892 270.528 573.892 270.528 cv
566.932 267.528 li
571.972 272.448 li
571.972 272.568 li
571.972 272.568 571.972 272.568 571.972 272.688 cv
571.852 272.808 li
571.852 272.928 571.732 272.928 571.732 273.048 cv
571.612 273.048 571.492 273.168 571.492 273.168 cv
571.372 273.168 571.372 273.288 571.372 273.288 cv
571.252 273.288 571.252 273.288 571.252 273.288 cv
571.132 273.288 li
565.852 268.008 li
565.732 267.888 565.732 267.768 565.732 267.648 cv
565.732 267.528 565.732 267.408 565.852 267.288 cv
566.332 266.808 li
566.452 266.688 566.572 266.688 566.572 266.568 cv
566.692 266.568 566.812 266.568 566.932 266.568 cv
566.932 266.448 567.052 266.448 567.172 266.568 cv
567.292 266.568 567.412 266.568 567.412 266.688 cv
573.292 269.088 li
570.892 263.328 li
570.772 263.208 570.772 263.088 570.772 262.968 cv
570.652 262.848 570.652 262.728 570.652 262.728 cv
570.772 262.608 570.772 262.488 570.772 262.488 cv
570.772 262.368 570.892 262.248 571.012 262.248 cv
571.492 261.768 li
571.492 261.648 571.492 261.648 571.612 261.648 cv
571.612 261.528 571.732 261.528 571.732 261.528 cv
571.852 261.528 571.852 261.528 571.972 261.648 cv
571.972 261.648 572.092 261.648 572.092 261.768 cv
cp
583.012 261.048 mo
583.132 261.048 583.252 261.168 583.252 261.168 cv
583.252 261.288 li
583.252 261.408 li
583.132 261.528 583.132 261.648 583.012 261.648 cv
582.892 261.768 582.892 261.888 582.772 261.888 cv
582.652 262.008 li
582.532 262.008 li
582.412 262.008 li
580.492 261.048 li
578.212 263.448 li
579.052 265.368 li
579.052 265.488 579.052 265.488 579.052 265.488 cv
579.052 265.608 579.052 265.608 578.932 265.728 cv
578.932 265.728 578.932 265.848 578.812 265.848 cv
578.692 265.968 578.692 266.088 578.572 266.088 cv
578.452 266.208 li
578.332 266.208 578.332 266.088 578.332 266.088 cv
578.212 266.088 578.212 265.968 578.212 265.968 cv
574.732 258.648 li
574.732 258.528 li
574.732 258.408 li
574.852 258.408 574.852 258.288 574.852 258.288 cv
574.972 258.168 574.972 258.048 575.092 258.048 cv
575.212 257.928 575.332 257.808 575.332 257.808 cv
575.452 257.688 575.452 257.688 575.572 257.688 cv
575.572 257.568 575.572 257.568 575.692 257.568 cv
575.692 257.568 575.692 257.688 575.812 257.688 cv
cp
575.932 258.768 mo
575.812 258.768 li
577.732 262.728 li
579.772 260.688 li
cp
584.932 259.368 mo
585.052 259.488 585.052 259.488 585.052 259.488 cv
585.052 259.608 li
584.932 259.728 li
584.932 259.848 584.812 259.848 584.692 259.968 cv
584.572 260.088 li
584.452 260.208 584.452 260.208 584.452 260.208 cv
584.332 260.208 584.332 260.208 584.332 260.208 cv
584.212 260.208 li
578.692 254.688 li
578.692 254.568 li
578.692 254.568 578.692 254.568 578.692 254.448 cv
578.692 254.448 578.812 254.448 578.812 254.328 cv
578.932 254.208 li
579.052 254.088 579.052 253.968 579.172 253.968 cv
579.292 253.848 li
579.412 253.848 li
579.412 253.848 579.412 253.848 579.532 253.968 cv
cp
587.932 250.728 mo
588.532 251.208 588.892 251.808 589.132 252.288 cv
589.372 252.768 589.492 253.248 589.492 253.728 cv
589.492 254.208 589.372 254.688 589.132 255.168 cv
588.892 255.648 588.532 256.128 588.052 256.608 cv
586.852 257.808 li
586.732 257.928 586.612 257.928 586.492 257.928 cv
586.492 257.928 586.372 257.928 586.252 257.808 cv
581.092 252.648 li
580.972 252.528 580.972 252.408 580.972 252.408 cv
580.972 252.288 580.972 252.168 581.092 252.048 cv
582.412 250.848 li
582.892 250.248 583.372 250.008 583.852 249.768 cv
584.332 249.528 584.812 249.408 585.292 249.408 cv
585.652 249.408 586.132 249.528 586.612 249.768 cv
587.092 250.008 587.572 250.368 587.932 250.728 cv
cp
587.212 251.568 mo
586.852 251.328 586.612 251.088 586.252 250.848 cv
585.892 250.608 585.532 250.488 585.172 250.488 cv
584.812 250.488 584.452 250.488 584.092 250.728 cv
583.732 250.848 583.372 251.088 583.012 251.448 cv
582.172 252.288 li
586.612 256.728 li
587.452 255.888 li
587.812 255.528 588.052 255.168 588.172 254.808 cv
588.412 254.568 588.412 254.208 588.412 253.848 cv
588.412 253.488 588.292 253.128 588.052 252.768 cv
587.932 252.408 587.572 251.928 587.212 251.568 cv
cp
f
607.012 262.968 mo
607.012 262.968 607.132 262.968 607.132 263.088 cv
607.132 263.088 607.132 263.088 607.012 263.088 cv
607.012 263.208 607.012 263.208 607.012 263.328 cv
606.892 263.328 606.892 263.448 606.772 263.448 cv
606.772 263.568 606.652 263.568 606.652 263.688 cv
606.532 263.688 606.532 263.688 606.412 263.688 cv
606.412 263.808 606.412 263.808 606.412 263.808 cv
606.292 263.808 606.292 263.688 606.292 263.688 cv
601.252 258.768 li
604.252 265.728 li
604.252 265.848 604.252 265.848 604.252 265.848 cv
604.252 265.968 li
604.252 265.968 604.252 266.088 604.132 266.088 cv
604.132 266.208 604.132 266.208 604.012 266.208 cv
604.012 266.328 603.892 266.328 603.892 266.448 cv
603.772 266.448 603.772 266.448 603.772 266.448 cv
603.652 266.568 603.652 266.568 603.652 266.568 cv
603.532 266.568 603.532 266.568 603.532 266.568 cv
596.572 263.448 li
601.612 268.488 li
601.612 268.608 li
601.492 268.728 li
601.492 268.848 601.372 268.848 601.372 268.968 cv
601.252 269.088 601.132 269.088 601.132 269.088 cv
601.132 269.208 601.012 269.208 601.012 269.208 cv
600.892 269.208 li
600.892 269.208 600.892 269.208 600.772 269.208 cv
595.492 263.928 li
595.372 263.808 595.372 263.688 595.372 263.568 cv
595.372 263.448 595.492 263.328 595.492 263.208 cv
595.972 262.728 li
596.092 262.728 596.212 262.608 596.212 262.608 cv
596.332 262.488 596.452 262.488 596.572 262.488 cv
596.572 262.488 596.692 262.488 596.812 262.488 cv
596.932 262.488 597.052 262.488 597.172 262.608 cv
602.932 265.128 li
600.532 259.248 li
600.412 259.128 600.412 259.008 600.412 258.888 cv
600.412 258.768 600.292 258.648 600.412 258.648 cv
600.412 258.528 600.412 258.408 600.412 258.408 cv
600.532 258.288 600.532 258.288 600.652 258.168 cv
601.132 257.688 li
601.132 257.568 601.252 257.568 601.252 257.568 cv
601.372 257.568 li
601.492 257.568 601.492 257.568 601.612 257.568 cv
601.612 257.568 601.732 257.568 601.732 257.688 cv
cp
612.652 256.968 mo
612.772 257.088 612.892 257.088 612.892 257.088 cv
612.892 257.208 612.892 257.208 612.892 257.208 cv
612.892 257.328 612.892 257.328 612.892 257.448 cv
612.772 257.448 612.772 257.568 612.652 257.688 cv
612.532 257.688 612.532 257.808 612.412 257.808 cv
612.412 257.928 612.292 257.928 612.292 257.928 cv
612.172 257.928 li
612.172 257.928 612.172 257.928 612.052 257.928 cv
610.132 257.088 li
607.852 259.368 li
608.692 261.288 li
608.692 261.288 608.692 261.288 608.692 261.408 cv
608.812 261.408 608.692 261.408 608.692 261.528 cv
608.692 261.528 608.692 261.528 608.692 261.648 cv
608.572 261.648 608.572 261.768 608.452 261.888 cv
608.332 261.888 608.332 262.008 608.212 262.008 cv
608.212 262.128 608.092 262.128 608.092 262.128 cv
607.972 262.128 607.972 262.128 607.972 262.008 cv
607.852 262.008 607.852 261.888 607.852 261.888 cv
604.372 254.568 li
604.372 254.568 604.372 254.568 604.372 254.448 cv
604.372 254.448 604.372 254.448 604.372 254.328 cv
604.492 254.328 604.492 254.208 604.492 254.208 cv
604.612 254.088 604.612 254.088 604.732 253.968 cv
604.852 253.848 604.972 253.728 604.972 253.728 cv
605.092 253.728 605.092 253.608 605.212 253.608 cv
605.212 253.608 605.212 253.608 605.332 253.608 cv
605.452 253.608 li
cp
605.572 254.808 mo
605.572 254.808 li
607.372 258.648 li
609.412 256.608 li
cp
616.612 252.888 mo
616.732 253.008 616.732 253.008 616.732 253.128 cv
616.852 253.128 616.852 253.128 616.852 253.248 cv
616.852 253.248 616.852 253.248 616.852 253.368 cv
616.852 253.368 li
614.332 256.008 li
614.212 256.008 614.092 256.008 613.972 256.128 cv
613.852 256.128 613.852 256.008 613.732 255.888 cv
608.332 250.608 li
608.332 250.608 608.332 250.608 608.332 250.488 cv
608.332 250.488 li
608.332 250.368 608.452 250.368 608.452 250.248 cv
608.572 250.128 li
608.692 250.008 608.812 250.008 608.812 249.888 cv
608.932 249.888 li
609.052 249.768 609.052 249.768 609.052 249.768 cv
609.172 249.888 li
614.092 254.808 li
616.132 252.768 li
616.252 252.768 li
616.252 252.648 616.252 252.768 616.372 252.768 cv
616.372 252.768 616.372 252.768 616.492 252.768 cv
616.492 252.888 616.612 252.888 616.612 252.888 cv
cp
f
625.252 268.968 mo
625.372 269.088 li
625.372 269.088 625.372 269.208 625.492 269.208 cv
625.492 269.328 li
625.492 269.328 625.492 269.328 625.492 269.448 cv
625.492 269.448 625.492 269.568 625.492 269.808 cv
625.372 269.928 625.372 270.048 625.252 270.288 cv
625.132 270.528 625.132 270.648 624.892 270.888 cv
624.772 271.128 624.652 271.368 624.412 271.608 cv
624.052 271.968 623.572 272.208 623.212 272.448 cv
622.732 272.568 622.372 272.688 621.892 272.568 cv
621.412 272.568 620.932 272.448 620.452 272.208 cv
620.092 271.968 619.612 271.608 619.132 271.128 cv
618.652 270.648 618.292 270.168 618.052 269.688 cv
617.812 269.208 617.572 268.728 617.572 268.248 cv
617.572 267.768 617.572 267.288 617.812 266.808 cv
617.932 266.448 618.292 265.968 618.652 265.608 cv
618.772 265.488 619.012 265.248 619.132 265.128 cv
619.372 265.008 619.492 264.888 619.732 264.888 cv
619.852 264.768 620.092 264.768 620.212 264.648 cv
620.332 264.648 620.452 264.648 620.572 264.648 cv
620.692 264.648 620.692 264.648 620.692 264.648 cv
620.812 264.648 620.812 264.648 620.812 264.648 cv
620.932 264.648 620.932 264.768 620.932 264.768 cv
621.052 264.768 621.052 264.768 621.052 264.888 cv
621.172 264.888 621.172 265.008 621.292 265.008 cv
621.292 265.128 621.292 265.128 621.292 265.128 cv
621.292 265.248 621.412 265.248 621.292 265.248 cv
621.292 265.368 li
621.292 265.368 621.172 265.368 621.052 265.488 cv
620.932 265.488 620.812 265.488 620.572 265.488 cv
620.332 265.608 620.212 265.608 619.972 265.728 cv
619.732 265.848 619.492 266.088 619.252 266.328 cv
619.012 266.568 618.772 266.808 618.772 267.168 cv
618.652 267.408 618.532 267.768 618.652 268.128 cv
618.652 268.488 618.772 268.848 619.012 269.208 cv
619.252 269.568 619.492 269.928 619.852 270.288 cv
620.212 270.648 620.572 270.888 620.932 271.128 cv
621.292 271.368 621.652 271.488 622.012 271.488 cv
622.372 271.488 622.612 271.488 622.972 271.368 cv
623.212 271.248 623.572 271.128 623.812 270.768 cv
624.052 270.528 624.172 270.408 624.292 270.168 cv
624.412 269.928 624.532 269.688 624.532 269.448 cv
624.652 269.328 624.652 269.088 624.652 268.968 cv
624.772 268.848 624.772 268.848 624.772 268.728 cv
624.892 268.728 li
625.012 268.728 625.012 268.728 625.012 268.848 cv
625.132 268.848 625.132 268.848 625.252 268.968 cv
cp
628.972 261.048 mo
629.452 261.528 629.812 262.008 630.052 262.488 cv
630.292 262.968 630.412 263.448 630.532 263.928 cv
630.532 264.408 630.412 264.888 630.292 265.368 cv
630.052 265.728 629.812 266.208 629.332 266.688 cv
628.852 267.048 628.492 267.408 628.012 267.648 cv
627.532 267.768 627.172 267.888 626.692 267.768 cv
626.212 267.768 625.732 267.648 625.252 267.408 cv
624.892 267.048 624.412 266.688 623.932 266.208 cv
623.452 265.848 623.092 265.368 622.852 264.888 cv
622.612 264.408 622.372 263.928 622.372 263.448 cv
622.372 262.968 622.372 262.488 622.612 262.008 cv
622.852 261.528 623.092 261.048 623.572 260.688 cv
623.932 260.208 624.412 259.968 624.892 259.728 cv
625.252 259.608 625.732 259.488 626.212 259.488 cv
626.572 259.488 627.052 259.728 627.532 259.968 cv
628.012 260.208 628.492 260.568 628.972 261.048 cv
cp
628.132 261.888 mo
627.892 261.528 627.532 261.288 627.172 261.048 cv
626.812 260.808 626.572 260.688 626.212 260.688 cv
625.852 260.568 625.492 260.568 625.132 260.688 cv
624.772 260.808 624.532 261.048 624.172 261.288 cv
623.812 261.648 623.572 262.008 623.452 262.368 cv
623.452 262.728 623.332 263.088 623.452 263.448 cv
623.572 263.808 623.692 264.048 623.932 264.408 cv
624.052 264.768 624.412 265.128 624.652 265.368 cv
625.012 265.728 625.372 265.968 625.732 266.208 cv
625.972 266.448 626.332 266.568 626.692 266.688 cv
627.052 266.808 627.412 266.688 627.652 266.688 cv
628.012 266.568 628.372 266.328 628.732 265.968 cv
629.092 265.608 629.212 265.248 629.332 264.888 cv
629.452 264.648 629.452 264.288 629.452 263.928 cv
629.332 263.568 629.212 263.208 628.972 262.848 cv
628.732 262.488 628.492 262.248 628.132 261.888 cv
cp
637.132 258.048 mo
637.252 258.168 637.252 258.168 637.252 258.288 cv
637.252 258.408 li
637.252 258.528 637.252 258.528 637.252 258.648 cv
637.252 258.648 637.132 258.648 637.132 258.768 cv
636.892 259.008 li
636.772 259.008 636.772 259.128 636.652 259.128 cv
636.532 259.248 636.532 259.248 636.412 259.248 cv
636.292 259.248 636.172 259.248 636.052 259.248 cv
635.932 259.248 635.812 259.128 635.572 259.128 cv
630.532 257.568 li
630.292 257.568 630.052 257.448 629.812 257.328 cv
629.452 257.208 629.212 257.208 628.972 257.088 cv
629.212 257.328 629.452 257.448 629.692 257.688 cv
629.812 257.928 630.052 258.168 630.292 258.408 cv
633.772 261.888 li
633.772 262.008 633.772 262.008 633.772 262.008 cv
633.772 262.008 633.772 262.128 633.652 262.128 cv
633.652 262.248 633.652 262.248 633.532 262.368 cv
633.412 262.488 633.412 262.488 633.292 262.488 cv
633.292 262.608 633.172 262.608 633.172 262.608 cv
633.052 262.608 li
627.652 257.328 li
627.532 257.208 627.532 257.088 627.532 256.968 cv
627.532 256.848 627.652 256.728 627.652 256.608 cv
628.132 256.248 li
628.132 256.248 628.252 256.128 628.372 256.128 cv
628.372 256.008 628.492 256.008 628.612 256.008 cv
628.612 256.008 628.732 256.008 628.852 256.008 cv
628.972 256.008 629.092 256.008 629.212 256.128 cv
633.052 257.328 li
633.292 257.328 633.532 257.448 633.772 257.448 cv
634.012 257.568 634.252 257.568 634.372 257.688 cv
634.612 257.808 634.852 257.808 635.092 257.928 cv
635.212 257.928 635.452 258.048 635.692 258.048 cv
635.452 257.928 635.212 257.688 634.972 257.328 cv
634.612 257.088 634.372 256.848 634.132 256.608 cv
631.132 253.488 li
631.012 253.488 631.012 253.488 631.012 253.488 cv
631.012 253.368 li
631.132 253.368 631.132 253.248 631.132 253.248 cv
631.132 253.128 631.252 253.128 631.372 253.008 cv
631.372 252.888 631.492 252.888 631.492 252.888 cv
631.612 252.768 631.612 252.768 631.612 252.768 cv
631.732 252.768 631.732 252.768 631.732 252.768 cv
631.852 252.768 631.852 252.768 631.852 252.768 cv
cp
637.132 247.968 mo
637.132 247.968 637.252 247.968 637.252 248.088 cv
637.252 248.088 637.252 248.208 637.372 248.208 cv
637.372 248.328 li
637.252 248.328 li
635.692 250.008 li
640.612 254.928 li
640.612 255.048 640.732 255.048 640.732 255.048 cv
640.732 255.048 640.732 255.168 640.612 255.168 cv
640.612 255.288 li
640.492 255.408 640.492 255.408 640.372 255.528 cv
640.252 255.648 li
640.132 255.648 640.132 255.768 640.012 255.768 cv
640.012 255.768 li
639.892 255.768 639.892 255.768 639.892 255.768 cv
634.852 250.728 li
633.292 252.408 li
633.292 252.408 633.292 252.408 633.172 252.408 cv
633.172 252.408 633.172 252.408 633.052 252.408 cv
633.052 252.408 633.052 252.408 632.932 252.288 cv
632.932 252.288 632.932 252.288 632.812 252.168 cv
632.692 252.048 li
632.572 251.928 li
632.572 251.808 li
632.572 251.808 632.572 251.688 632.692 251.688 cv
636.652 247.728 li
636.652 247.728 636.652 247.728 636.772 247.728 cv
636.772 247.728 li
636.892 247.728 636.892 247.728 637.012 247.728 cv
637.012 247.848 637.012 247.848 637.132 247.968 cv
cp
f
655.972 265.128 mo
656.092 265.248 656.092 265.248 656.092 265.248 cv
656.092 265.368 li
655.972 265.368 655.972 265.488 655.972 265.488 cv
655.852 265.608 655.852 265.608 655.732 265.728 cv
655.612 265.848 li
655.492 265.968 655.492 265.968 655.492 265.968 cv
655.372 265.968 655.372 265.968 655.372 265.968 cv
655.252 265.968 655.252 265.968 655.252 265.968 cv
650.212 260.928 li
653.212 268.008 li
653.212 268.008 653.212 268.008 653.212 268.128 cv
653.212 268.128 653.212 268.128 653.212 268.248 cv
653.212 268.248 653.212 268.248 653.092 268.368 cv
653.092 268.368 653.092 268.488 652.972 268.488 cv
652.972 268.608 652.852 268.608 652.852 268.608 cv
652.732 268.728 652.732 268.728 652.732 268.728 cv
652.612 268.728 652.612 268.728 652.612 268.728 cv
652.492 268.728 li
645.532 265.608 li
650.572 270.648 li
650.572 270.648 650.572 270.648 650.572 270.768 cv
650.572 270.768 650.572 270.768 650.572 270.888 cv
650.572 270.888 650.572 270.888 650.452 271.008 cv
650.332 271.128 li
650.212 271.248 650.212 271.368 650.092 271.368 cv
649.972 271.488 li
649.852 271.488 li
649.852 271.488 649.852 271.488 649.732 271.368 cv
644.452 266.088 li
644.332 265.968 644.332 265.848 644.332 265.728 cv
644.332 265.608 644.452 265.608 644.452 265.488 cv
644.932 265.008 li
645.052 264.888 645.172 264.888 645.172 264.768 cv
645.292 264.768 645.412 264.648 645.532 264.648 cv
645.652 264.648 645.652 264.648 645.772 264.648 cv
645.892 264.768 646.012 264.768 646.132 264.768 cv
651.892 267.288 li
649.492 261.408 li
649.372 261.288 649.372 261.168 649.372 261.168 cv
649.372 261.048 649.372 260.928 649.372 260.808 cv
649.372 260.808 649.372 260.688 649.372 260.568 cv
649.492 260.568 649.492 260.448 649.612 260.328 cv
650.092 259.848 li
650.092 259.848 650.212 259.848 650.212 259.728 cv
650.332 259.728 li
650.452 259.728 650.452 259.728 650.572 259.728 cv
650.572 259.848 650.692 259.848 650.692 259.968 cv
cp
658.252 262.968 mo
658.372 262.968 li
658.372 262.968 658.372 263.088 658.252 263.088 cv
658.252 263.208 li
658.132 263.328 658.132 263.328 658.012 263.448 cv
657.892 263.568 li
657.772 263.688 657.772 263.688 657.652 263.688 cv
657.652 263.688 li
657.532 263.688 657.532 263.688 657.532 263.688 cv
652.012 258.168 li
652.012 258.168 652.012 258.168 652.012 258.048 cv
652.012 258.048 652.012 258.048 652.012 257.928 cv
652.012 257.928 652.012 257.928 652.132 257.808 cv
652.252 257.688 li
652.372 257.568 652.372 257.568 652.492 257.448 cv
652.492 257.448 652.612 257.448 652.612 257.328 cv
652.732 257.328 li
652.732 257.328 652.732 257.328 652.732 257.448 cv
cp
661.372 256.848 mo
661.732 257.088 661.852 257.328 661.972 257.688 cv
662.092 257.928 662.092 258.288 662.092 258.648 cv
662.092 258.888 661.972 259.248 661.852 259.608 cv
661.612 259.848 661.372 260.208 661.132 260.448 cv
661.012 260.688 660.772 260.808 660.532 260.928 cv
660.412 261.048 660.172 261.168 660.052 261.288 cv
659.812 261.288 659.692 261.408 659.572 261.408 cv
659.452 261.408 659.332 261.528 659.212 261.528 cv
659.212 261.528 659.092 261.408 658.972 261.408 cv
658.972 261.408 658.852 261.288 658.732 261.168 cv
658.612 261.048 li
658.612 261.048 658.612 260.928 658.492 260.928 cv
658.492 260.808 li
658.612 260.808 li
658.612 260.688 658.732 260.688 658.852 260.688 cv
658.972 260.568 659.092 260.568 659.332 260.568 cv
659.452 260.448 659.692 260.328 659.932 260.208 cv
660.052 260.088 660.292 259.968 660.532 259.728 cv
660.652 259.608 660.772 259.368 660.892 259.248 cv
661.012 259.008 661.132 258.888 661.132 258.648 cv
661.132 258.528 661.132 258.288 661.012 258.168 cv
661.012 258.048 660.892 257.808 660.652 257.688 cv
660.532 257.568 660.412 257.448 660.172 257.328 cv
659.932 257.328 659.812 257.328 659.572 257.328 cv
659.332 257.448 659.092 257.448 658.972 257.568 cv
658.732 257.568 658.492 257.688 658.252 257.808 cv
658.012 257.928 657.772 257.928 657.532 258.048 cv
657.292 258.048 657.052 258.168 656.812 258.168 cv
656.572 258.168 656.332 258.048 655.972 257.928 cv
655.732 257.928 655.492 257.688 655.372 257.448 cv
655.132 257.208 654.892 256.968 654.772 256.728 cv
654.652 256.488 654.652 256.128 654.652 255.888 cv
654.772 255.648 654.772 255.288 655.012 255.048 cv
655.132 254.808 655.252 254.448 655.612 254.208 cv
655.732 254.088 655.852 253.968 655.972 253.848 cv
656.092 253.728 656.332 253.728 656.452 253.608 cv
656.572 253.488 656.692 253.488 656.812 253.488 cv
656.932 253.368 657.052 253.368 657.172 253.368 cv
657.292 253.368 li
657.412 253.488 657.412 253.488 657.412 253.488 cv
657.532 253.488 657.532 253.608 657.532 253.608 cv
657.652 253.728 657.652 253.728 657.772 253.728 cv
657.772 253.848 657.772 253.848 657.772 253.848 cv
657.772 253.968 657.892 253.968 657.892 253.968 cv
657.772 254.088 657.772 254.088 657.772 254.088 cv
657.772 254.088 657.652 254.088 657.532 254.208 cv
657.532 254.208 657.292 254.208 657.172 254.328 cv
657.052 254.328 656.812 254.448 656.692 254.448 cv
656.452 254.568 656.332 254.688 656.212 254.928 cv
655.972 255.048 655.852 255.168 655.852 255.408 cv
655.732 255.528 655.732 255.648 655.732 255.888 cv
655.732 256.008 655.732 256.128 655.732 256.248 cv
655.852 256.368 655.972 256.488 655.972 256.608 cv
656.212 256.848 656.332 256.848 656.572 256.968 cv
656.692 256.968 656.932 256.968 657.172 256.968 cv
657.412 256.968 657.532 256.848 657.772 256.728 cv
658.012 256.728 658.252 256.608 658.492 256.488 cv
658.732 256.488 658.972 256.368 659.212 256.248 cv
659.452 256.248 659.692 256.248 659.932 256.248 cv
660.172 256.248 660.412 256.248 660.652 256.368 cv
660.892 256.368 661.132 256.608 661.372 256.848 cv
cp
667.132 252.648 mo
667.252 252.648 667.252 252.768 667.252 252.768 cv
667.372 252.768 667.372 252.768 667.372 252.888 cv
667.372 252.888 667.372 252.888 667.372 253.008 cv
667.492 253.008 667.492 253.008 667.492 253.128 cv
667.492 253.128 667.372 253.248 667.372 253.368 cv
667.372 253.608 667.252 253.728 667.252 253.968 cv
667.132 254.088 667.012 254.328 666.892 254.568 cv
666.772 254.808 666.532 255.048 666.292 255.288 cv
665.932 255.648 665.572 255.888 665.092 256.008 cv
664.732 256.248 664.252 256.248 663.892 256.248 cv
663.412 256.248 662.932 256.128 662.452 255.888 cv
661.972 255.648 661.492 255.288 661.012 254.808 cv
660.532 254.328 660.172 253.848 659.932 253.368 cv
659.692 252.888 659.572 252.408 659.572 251.928 cv
659.452 251.448 659.572 250.968 659.692 250.488 cv
659.932 250.008 660.172 249.648 660.532 249.288 cv
660.772 249.048 660.892 248.928 661.132 248.808 cv
661.252 248.688 661.492 248.568 661.612 248.568 cv
661.852 248.448 661.972 248.328 662.212 248.328 cv
662.332 248.328 662.452 248.208 662.572 248.208 cv
662.572 248.208 662.692 248.208 662.692 248.328 cv
662.812 248.328 li
662.812 248.328 662.812 248.328 662.932 248.448 cv
662.932 248.448 663.052 248.448 663.052 248.568 cv
663.172 248.568 663.172 248.688 663.172 248.688 cv
663.292 248.688 663.292 248.808 663.292 248.808 cv
663.292 248.928 li
663.292 248.928 663.292 248.928 663.292 249.048 cv
663.172 249.048 663.172 249.048 663.052 249.048 cv
662.812 249.168 662.692 249.168 662.572 249.168 cv
662.332 249.288 662.092 249.288 661.852 249.408 cv
661.732 249.528 661.492 249.768 661.252 249.888 cv
661.012 250.248 660.772 250.488 660.652 250.848 cv
660.532 251.088 660.532 251.448 660.532 251.808 cv
660.652 252.168 660.772 252.528 661.012 252.888 cv
661.132 253.248 661.492 253.608 661.852 253.968 cv
662.212 254.328 662.572 254.568 662.932 254.808 cv
663.292 255.048 663.652 255.168 663.892 255.168 cv
664.252 255.168 664.612 255.168 664.852 255.048 cv
665.212 254.928 665.452 254.688 665.812 254.448 cv
666.052 254.208 666.172 253.968 666.292 253.728 cv
666.412 253.488 666.532 253.368 666.532 253.128 cv
666.532 253.008 666.652 252.768 666.652 252.648 cv
666.652 252.528 666.652 252.408 666.772 252.408 cv
666.772 252.408 li
666.892 252.408 li
667.012 252.408 li
667.012 252.528 667.132 252.528 667.132 252.648 cv
cp
f
grestore
3.29162 2.80786 mo
3.29162 2.56786 3.53162 2.32786 3.77162 2.32786 cv
693.652 2.32786 li
693.892 2.32786 694.132 2.56786 694.132 2.80786 cv
694.132 300.888 li
694.132 301.128 693.892 301.368 693.652 301.368 cv
3.77162 301.368 li
3.53162 301.368 3.29162 301.128 3.29162 300.888 cv
cp
4.37162 300.888 mo
3.77162 300.288 li
693.652 300.288 li
693.052 300.888 li
693.052 2.80786 li
693.652 3.28786 li
3.77162 3.28786 li
4.37162 2.80786 li
cp
.152804 .110048 .088716 0 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VFJKBN+CIDFont+F1*1 uf
/VFJKBN+CIDFont+F1 uf
/PBAAAA+CIDFont+F1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: cweEvidences.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: I333624
%%CreationDate: 2017/4/9, 0:13:35
%%BoundingBox: -1 0 699 309
%%HiResBoundingBox: 0 0 698.4631 308.5444
%%CropBox: 0 0 698.4631 308.5444
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 781 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-04-08T20:24:57+08:00"
   xmp:ModifyDate="2017-04-08T20:24:57+08:00"
   pdf:Producer="Microsoft: Print To PDF">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>I333624</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Book1</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -308.544 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-3.05176e-5 0 mo
-3.05176e-5 308.544 li
698.463 308.544 li
698.463 0 li
cp
clp
3.77161 5.35083 mo
693.532 5.35083 li
693.532 303.431 li
3.77161 303.431 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
37.8516 216.671 mo
677.932 216.671 li
677.932 217.751 li
37.8516 217.751 li
37.8516 216.671 li
cp
37.8516 194.951 mo
677.932 194.951 li
677.932 195.911 li
37.8516 195.911 li
37.8516 194.951 li
cp
37.8516 173.231 mo
677.932 173.231 li
677.932 174.191 li
37.8516 174.191 li
37.8516 173.231 li
cp
37.8516 151.271 mo
677.932 151.271 li
677.932 152.351 li
37.8516 152.351 li
37.8516 151.271 li
cp
37.8516 129.551 mo
677.932 129.551 li
677.932 130.631 li
37.8516 130.631 li
37.8516 129.551 li
cp
37.8516 107.591 mo
677.932 107.591 li
677.932 108.671 li
37.8516 108.671 li
37.8516 107.591 li
cp
37.8516 85.8708 mo
677.932 85.8708 li
677.932 86.9508 li
37.8516 86.9508 li
37.8516 85.8708 li
cp
37.8516 64.1508 mo
677.932 64.1508 li
677.932 65.2308 li
37.8516 65.2308 li
37.8516 64.1508 li
cp
37.8516 42.3108 mo
677.932 42.3108 li
677.932 43.3908 li
37.8516 43.3908 li
37.8516 42.3108 li
cp
37.8516 20.4708 mo
677.932 20.4708 li
677.932 21.5508 li
37.8516 21.5508 li
37.8516 20.4708 li
cp
.149752 .107332 .088716 0 cmyk
f
45.6516 204.191 mo
55.7316 204.191 li
55.7316 238.991 li
45.6516 238.991 li
45.6516 204.191 li
cp
71.0916 195.431 mo
81.4116 195.431 li
81.4116 238.991 li
71.0916 238.991 li
71.0916 195.431 li
cp
96.7716 143.111 mo
107.092 143.111 li
107.092 238.991 li
96.7716 238.991 li
96.7716 143.111 li
cp
122.452 199.871 mo
132.532 199.871 li
132.532 238.991 li
122.452 238.991 li
122.452 199.871 li
cp
148.012 34.1508 mo
158.212 34.1508 li
158.212 238.991 li
148.012 238.991 li
148.012 34.1508 li
cp
173.572 164.951 mo
183.892 164.951 li
183.892 238.991 li
173.572 238.991 li
173.572 164.951 li
cp
199.132 125.591 mo
209.332 125.591 li
209.332 238.991 li
199.132 238.991 li
199.132 125.591 li
cp
224.812 217.151 mo
235.012 217.151 li
235.012 238.991 li
224.812 238.991 li
224.812 217.151 li
cp
250.492 156.311 mo
260.572 156.311 li
260.572 238.991 li
250.492 238.991 li
250.492 156.311 li
cp
275.932 217.151 mo
286.252 217.151 li
286.252 238.991 li
275.932 238.991 li
275.932 217.151 li
cp
301.612 204.191 mo
311.812 204.191 li
311.812 238.991 li
301.612 238.991 li
301.612 204.191 li
cp
327.052 217.151 mo
337.372 217.151 li
337.372 238.991 li
327.052 238.991 li
327.052 217.151 li
cp
352.732 212.831 mo
363.052 212.831 li
363.052 238.991 li
352.732 238.991 li
352.732 212.831 li
cp
378.412 191.111 mo
388.732 191.111 li
388.732 238.991 li
378.412 238.991 li
378.412 191.111 li
cp
403.852 212.831 mo
414.172 212.831 li
414.172 238.991 li
403.852 238.991 li
403.852 212.831 li
cp
429.532 191.111 mo
439.852 191.111 li
439.852 238.991 li
429.532 238.991 li
429.532 191.111 li
cp
455.212 182.471 mo
465.292 182.471 li
465.292 238.991 li
455.212 238.991 li
455.212 182.471 li
cp
480.772 199.871 mo
490.972 199.871 li
490.972 238.991 li
480.772 238.991 li
480.772 199.871 li
cp
506.332 221.591 mo
516.652 221.591 li
516.652 238.991 li
506.332 238.991 li
506.332 221.591 li
cp
531.892 208.631 mo
542.092 208.631 li
542.092 238.991 li
531.892 238.991 li
531.892 208.631 li
cp
557.572 225.911 mo
567.772 225.911 li
567.772 238.991 li
557.572 238.991 li
557.572 225.911 li
cp
583.252 234.671 mo
593.452 234.671 li
593.452 238.991 li
583.252 238.991 li
583.252 234.671 li
cp
608.692 212.831 mo
619.012 212.831 li
619.012 238.991 li
608.692 238.991 li
608.692 212.831 li
cp
634.372 225.911 mo
644.572 225.911 li
644.572 238.991 li
634.372 238.991 li
634.372 225.911 li
cp
660.052 208.631 mo
670.132 208.631 li
670.132 238.991 li
660.052 238.991 li
660.052 208.631 li
cp
.791074 .550103 0 0 cmyk
f
37.8516 238.511 mo
677.932 238.511 li
677.932 239.591 li
37.8516 239.591 li
cp
.149752 .107332 .088716 0 cmyk
f
.642176 .562799 .502098 .254337 cmyk
%ADOBeginSubsetFont: HIBBAA+CIDFont+F1 Initial
ct_T42Dict begin
-0.5 -0.305 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+CIDFont+F1
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9dcd85d000000cc000000606376
7420b09bc4d20000012c0000051c6670676d73ee3d400000064800000d17
676c79660882732e0000974800003d6668656164f30a56fb000013600000
0036686865610dad0c030000139800000024686d7478f66016de000013bc
000031c26c6f6361e1e4f0f400004580000020406d617870210925080000
65c0000000206e616d65f02620c7000065e000000d4470726570a1c4507b
0000732400002422676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
20850600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e40598574737271706f6e6d6c
6b6a696867666564625f5e5d5c5b5a59585554535251504f4e4d4c4b4a49
4847464544434241403f3e3d3c3b3a39383736352f2e2d2c282625242322
1f181411100f0d0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
042651582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
282370b101283e01b0282370b10228453ab10200080d2d2c2045b0032545
6164b050515845441b2121592d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b0
2c234445b02b23442d2c4b525845441b2121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b0805158
0c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c642364
8bb81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d
2c4523456023456023456023766818b08062202d2cb00426b00426b00425
b0042545234520b003266062636820b0032661658a2344442d2c2045b000
5458b040442045b04061441b2121592d2c45b1302f4523456160b0016069
442d2c4b5158b02f2370b01423421b2121592d2c4b515820b00325456953
58441b2121591b2121592d2c45b01443b0006063b0016069442d2cb02f45
442d2c452320458a60442d2c45234560442d2c4b235158b90033ffe0b134
201bb3330034005944442d2cb0164358b00326458a586466b01f601b64b0
20606620581b21b04059b001615923586559b02923442310b029e01b2121
212121592d2cb0164358b004254564b020606620581b21b04059b0016123
586559b0292344b00425b00725082058021b0359b0052510b004252046b0
042523423cb0072510b006252046b00425b0016023423c2058011b0059b0
052510b00425b029e0b0072510b00625b029e0b00425b00725082058021b
0359b00425b003254348b00625b00325b0016043481b2159212121212121
212d2cb0164358b004254564b020606620581b21b04059b0016123581b65
59b0292344b00525b00825082058021b0359b0042510b005252046b00425
23423cb00425b0072508b0072510b006252046b00425b0016023423c2058
011b0059b0042510b00525b029e0b02920456544b0072510b00625b029e0
b00525b00825082058021b0359b00525b003254348b00425b0072508b006
25b00325b0016043481b2159212121212121212d2c02b00425202046b004
252342b0052508b003254548212121212d2c02b0032520b0042508b00225
43482121212d2c452320451820b00050205823652359236820b040505821
b04059235865598a60442d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2cb000
214b5458381b2121592d2cb002435458b0462b1b21212121592d2cb00243
5458b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb002
435458b0492b1b212121592d2c2320b000508a8a64b10003255458b0401b
b10103255458b005438b59b04f2b5923b0622b2321235865592d2cb10800
0c215460432d2c014623466023466123201020468a61b8ff80628ab14040
8a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a59
2d2cb012004b014b54422d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b1
2601885158b94000020063b80400885458b202400243604259b940000400
63b80800885458b202800243604259b12801885158b94000080063b81000
885458ba00020100000243604259595959595959b10002435458400a0540
084009400c020d021bb10102435458b2054008ba010000090100b30c010d
011bb18002435258b2054008b80180b109401bb901000002435258b20540
08ba0180000901401bb901800002435258b2054008b80200b109401bb205
4008ba010000090100595959b9400000808855b94000020063b804008855
5a58b30c000d011bb30c000d0159595942424242422d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d2cb0022563b0206066b00225b82000626023622d2c20456944
2d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002
256164b00343525821206459b1024e2b23b000505865592d2c238a4a2345
64b0022564b002256164b00343525821206459b1014e2b23b00050586559
2d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2c
b00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2c
b0032546b003254660b004252eb00425b00425b0042620b000505821b06a
1bb06c592bb0032546b00325466061b08062208a2010233a232010233a2d
2cb0032547b003254760b0052547b0806361b00225b00625496323b00525
4ab080632058621b2159b0042646608a468a4660b02063612d2cb00426b0
0425b00425b00426b06e2b208a2010233a232010233a2d2c2320b0015458
21b00225b1024e2bb0805020605920606020b001515821211b20b0055158
21206661b0402361b100032550b00325b00325505a5820b00325618a5358
21b000591b21591bb00754582066616523211b2121b000595959b1024e2b
2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0042546206661
20b00526b0062649b00526b00526b0702b236165b02060206661b0206165
2d2cb0022546208a20b000505821b1024e2b1b452321596165b00225103b
2d2cb0042620b802006220b80200638a236120b05d602bb00525118a128a
20398a58ba005d10000004266356602b23212010204620b1024e2b23611b
2321208a201049b1024e2b593b2d2cba005d10000009256356602bb00525
b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525b06f2b
ba005d10000008266356602b20b0005258b0502bb00525b00525b00725b0
0725b00525b0712bb0021738b00052b00225b001525a58b00425b0062549
b00325b00525496020b0405258211bb000525820b0025458b00425b00425
b00725b0072549b00217381bb00425b00425b00425b0062549b002173859
5959595921212121212d2cb12501885058b94000020063b8040088545cb0
164b525b1bb001592d000001000000061eb822940b6d5f0f3cf500190800
00000000bbeb7ccc00000000d20670b8fbfafd8b09ec0836000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008c2040e00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000046500a100000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000060600a10000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003ed00a100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043400600000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002e50048000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000001f6
006c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002303ec0062
03ec00510455002203d7005100000000000000000000000000000000040e
0048040e00ae040e0072040e0067040e0020040e00650000000000000000
000000000000000004430067028d00190381005c0373005903ac00260368
006100000000000000000000000000000000039f0050039f008d039f0065
039f0062039f003a039f0067000000000000000000000000000000000494
005f02cb002303ec006203ec00510428002203d700510000000000000000
0000000000000000040e0048040e00ae040e0072040e0067040e0030040e
0065000000000000000000000000000000000321004801f8002302b0004b
02ad004102db002502a60045000000000000000000000000000000000000
0000000000000000000000000000000000000321004801f8002302b0004b
02ad004102db002502a60045000000000000000000000000000000000000
000000000000000000000000000000000000029d003801f500310252003c
0249002d024a00140246003200000000000000000000000000000000029d
003801f500310252003c0249002d024a0014024600320000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000046d008e00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000046d008e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf01810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
018101810181018101810181018101810181018101810181018101810181
01810181018101d101d101d101d101d101d101d101d101d101d101d101d1
01d101d101d101d101d101d101d101d101d101d101d101d101d101d101d1
01d101d101d101d101d101d101d101d101d101d101d101d101d101d101d1
01d101d10259025902590259025902590259025902590259025902590259
02590259025902590259025902590259025902e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e602e6
02e602e602e602e602e602e602e602e602e602e602e602e602e602e60395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
039503950395039503950395039503950395039503950395039503950395
03950395039503950395039503950395041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f041f041f041f041f041f041f041f041f
041f041f041f041f041f041f041f04990499049904990499049904990499
04990499049904990499049904fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc04fc
04fc04fc04fc04fc04fc04fc054e054e054e054e054e054e054e054e054e
054e054e054e054e054e054e054e054e054e054e054e054e054e054e054e
054e054e054e054e054e054e054e054e054e054e054e05ac05fe068e0749
07bf084a084a084a084a084a08a8091509970a500ac50b560b560b560b56
0b560bb40c040c8e0d410dba0e4b0e4b0e4b0e4b0e4b0ea60f110f190f21
0f9710291029102910291029108910d611691222129c1330133013301330
133013f414be1579168e1768183b183b183b183b183b1844184d1856185f
1868187118711871187118711871187118711871187118ca191b198c1a32
1aa71b291b291b291b291b291b291b291b291b291b291b821bd11c471cf9
1d6f1df01df01df01df01df01df91e021e0b1e141e1d1e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e261e261e261e261e261e261e261e261e261e261e261e261e261e261e26
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e1e2e
1e2e1e2e1e2e1e2e1e2e1e2e1e2e1eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb31eb3
1eb31eb31eb31eb300010000101f005b00050059000200020010002f0086
0000104b2422000100010000002d02220000000300000000006400000000
000300000001000e00640000000300000002000e03040000000300000003
002403120000000300000004000e00640000000300000005001803360000
000300000006000e006400000003000000070076034e0000000300000008
002a000e0000000300000009002003c4000000030000000a02a000640000
00030000000b005603e4000000030000000c002a043a000000030000000d
02980464000000030000000e006c06fc0001000000000000003207680001
0000000000010007079a0001000000000002000708ea0001000000000003
001808f100010000000000040007079a0001000000000005000c09090001
0000000000060007079a0001000000000007003b09150001000000000008
0015076f000100000000000900100950000100000000000a0150079a0001
00000000000b002b0960000100000000000c0015098b000100000000000d
014c09a0000100000000000e00360aec0003000104090000006400000003
000104090001000e00640003000104090002000e03040003000104090003
002403120003000104090004000e00640003000104090005001803360003
000104090006000e006400030001040900070076034e0003000104090008
002a000e0003000104090009002003c4000300010409000a02a000640003
00010409000b005603e4000300010409000c002a043a000300010409000d
02980464000300010409000e006c06fc00a9002000320030003100350020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c0069006200720069002000690073002000610020006d006f00640065
0072006e002000730061006e007300200073006500720069006600200066
0061006d0069006c00790020007700690074006800200073007500620074
006c006500200072006f0075006e00640069006e006700730020006f006e
0020007300740065006d007300200061006e006400200063006f0072006e
006500720073002e00200049007400200066006500610074007500720065
00730020007200650061006c0020006900740061006c006900630073002c
00200073006d0061006c006c00200063006100700073002c00200061006e
00640020006d0075006c007400690070006c00650020006e0075006d0065
00720061006c00200073006500740073002e002000490074007300200070
0072006f0070006f007200740069006f006e007300200061006c006c006f
00770020006800690067006800200069006d007000610063007400200069
006e002000740069006700680074006c007900200073006500740020006c
0069006e006500730020006f0066002000620069006700200061006e0064
00200073006d0061006c006c0020007400650078007400200061006c0069
006b0065002e002000430061006c0069006200720069002700730020006d
0061006e0079002000630075007200760065007300200061006e00640020
0074006800650020006e0065007700200072006100730074006500720069
0073006500720020007400650061006d00200075007000200069006e0020
006200690067006700650072002000730069007a0065007300200074006f
002000720065007600650061006c002000610020007700610072006d0020
0061006e006400200073006f006600740020006300680061007200610063
007400650072002e0052006500670075006c00610072004d006900630072
006f0073006f00660074003a002000430061006c00690062007200690056
0065007200730069006f006e00200036002e0031003200430061006c0069
00620072006900200069007300200061002000740072006100640065006d
00610072006b0020006f006600200074006800650020004d006900630072
006f0073006f00660074002000670072006f007500700020006f00660020
0063006f006d00700061006e006900650073002e004c0075006300280061
00730029002000640065002000470072006f006f00740068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f006300740066006f006e007400730068007400740070003a002f
002f0066006f006e007400660061006200720069006b002e0063006f006d
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e00740020006100730020007000650072006d0069
00740074006500640020006200790020007400680065002000450055004c
004100200066006f00720020007400680065002000700072006f00640075
0063007400200069006e0020007700680069006300680020007400680069
007300200066006f006e007400200069007300200069006e0063006c0075
00640065006400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e0074002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e00740073002f0064
0065006600610075006c0074002e0061007300700078a92032303135204d
6963726f736f667420436f72706f726174696f6e2e20416c6c2052696768
74732052657365727665642e43616c696272692069732061206d6f646572
6e2073616e732073657269662066616d696c79207769746820737562746c
6520726f756e64696e6773206f6e207374656d7320616e6420636f726e65
72732e204974206665617475726573207265616c206974616c6963732c20
736d616c6c20636170732c20616e64206d756c7469706c65206e756d6572
616c20736574732e204974732070726f706f7274696f6e7320616c6c6f77
206869676820696d7061637420696e2074696768746c7920736574206c69
6e6573206f662062696720616e6420736d616c6c207465787420616c696b
652e2043616c696272692773206d616e792063757276657320616e642074
6865206e65772072617374657269736572207465616d20757020696e2062
69676765722073697a657320746f2072657665616c2061207761726d2061
6e6420736f6674206368617261637465722e526567756c61724d6963726f
736f66743a2043616c696272693a203230303556657273696f6e20362e31
3243616c6962726920697320612074726164656d61726b206f6620746865
204d6963726f736f66742067726f7570206f6620636f6d70616e6965732e
4c7563286173292064652047726f6f74687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f666f6e7466616272696b2e636f6d596f75206d6179207573
65207468697320666f6e74206173207065726d6974746564206279207468
652045554c4120666f72207468652070726f6475637420696e2077686963
68207468697320666f6e7420697320696e636c7564656420746f20646973
706c617920616e64207072696e7420636f6e74656e742e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f
6e74732f64656661756c742e6173707800>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143404114801f85
8503251f8403381f8301381f8255805581ab80557f557d557eab7d550b7d
010b7d1b7d4b7d7b7dab7ddb7d060a7c557a557bab7a557955775578ab77
55ba028600660285403c5576ab755504751475747503f47501ab75014475
0130750102007510752075030c7455725573ab7255007250728072b07204
3bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d104671556f
5570ab6f556e666d556a03251f6938675568ab67556638645565ab645563
386255613860555f385d555eab5d555c385a555bab5a5559385855570325
1f5638545555ab54555338515552ab51554f384e554e03251f4d384b554c
ab4b554a38485549ab4855473846554503381f001c101c201c0310b8ffc0
404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b03120f1a1f
1a02290f1901434f19016f197f198f19030f18cf18024018292c460f17cf
17df17ef1704134017292e460016101620160315b8ffc0b3164d5446b8ff
c0b3163f4446b8ffc0b316313546b8ffc0401f162326460f15010f151f15
0245ef1501850003012001010001100120010308b8ffc0b401151f4603bd
0100010000050001019000542b4bb80800524bb008505bb00188b02553b0
0188b040515ab00688b000555a5b58b101018e59b101024354b0144b515a
58b101018e59858d8d001d424bb01d5358b203a0a01d42594bb0805358b2
0340401d42594bb0ff5358b20300001d42592b5e7375732b58404a080011
e011f0110315bf10cf10020f0f010f0fff0f020f0e1f0e020f0e1f0eff0e
030f0d1f0d020f0d1f0dff0d03160f0b1f0b02553f0b4f0b0208400f3135
46400e313746400d313746b8ffc0400e0c505446400b3f4346400b2d3046
2b2b2b2b2b2b5e745e735e737473747374745e735e5901755e73742b2b2b
2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b
5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b58b80142b2
12461fb80141b212461fb80140b212461fb8013fb212461fb8013eb21244
1fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b1fb8
0139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb80135
b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131b211
551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211591f
b8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1fb801
28b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb80124b2
11561fb80123b211571fb80122b211581fb80121b211591fb80120b2115a
1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b1fb8
011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb80117
b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113b210
5f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb2105f1f
b8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1fb801
0ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2
105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2105f
1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641ffc0f
621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f641f
f40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f
621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e671f
e50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681fde0e
681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d311f
d60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1fcf0d
2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1f
c70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f40d4
c00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741fb90c
741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c741f
b10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b
7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1f
a20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b
7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b7e1f
930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0a
a71f2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b1b59012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
b1000243545841ff0284006402830064028200640281006402800064027f
0064027e0064027d0064027c0064027b0064027a00640279006402780064
02770064027600640275006402740064027300640271006402700064026f
0064026e0064026d0064026c0064026b0064026a00640269006402680064
026700640266006402650064026400640263006402620064026100640260
0064025f0064025e0064025d0064025c0064025b0064025a006402590064
025800640257006402560064025500640254006402530064025200640251
006402500064024f0064024e0064024d0064024c0064024b0064024a0064
024900640248006402470064024600640245006402440064024300640242
00640241006402400064023f0064023e0064023d0064023c0064023b0064
023a00640239006402380064023700640236006402350064023400640233
0064023200640231006402300064022f0064022e0064022d0064022c0064
022b0064022a006402290064022800640227006402260064022500640224
006402230064022200640221006402200064021f0064021e0064021d0064
021c0064021b0064021a0064021900640218006402170064021600640215
00640214006402130064021200640211006402100064020f0064020e0064
020d0064020c0064020b0064020a00640209006402080064020700640206
006402050064020441ff00640203006402020064020100640200006401ff
006401fe006401fd006401fc006401fb006401fa006401f9006401f80064
01f7006401f6006401f5006401f4006401f3006401f2006401f1006401f0
006401ef006401ee006401ed006401ec006401eb006401ea006401e90064
01e8006401e7006401e6006401e5006401e4006401e3006401e2006401e1
006401e0006401df006401de006401dd006401dc006401db006401da0064
01d9006401d8006401d7006401d6006401d5006401d4006401d3006401d2
006401d1006401d0006401cf006401ce006401cd006401cc006401cb0064
01ca006401c9006401c8006401c7006401c6006401c5006401c4006401c3
006401c2006401c1006401c0006401bf006401be006401bd006401bc0064
01bb006401ba006401b9006401b8006401b7006401b6006401b5006401b4
006401b3006401b2006401b1006401b0006401af006401ae006401ad0064
01ac006401ab006401aa006401a9006401a8006401a7006401a6006401a5
006401a4006401a3006401a2006401a1006401a00064019f0064019e0064
019d0064019c0064019b0064019a00640199006401980064019700640196
0064019500640194006401930064019200640191006401900064018f0064
018e0064018d0064018c0064018b0064018a006401890064018800640187
006401860064018500644180018400640183006401820064018100640180
0064017f0064017e0064017d0064017c0064017b0064017a006401790064
017800640177006401760064017500640174006401730064017200640171
006401700064016f0064016e0064016d0064016c0064016b0064016a0064
016900640168006401670064016600640165006401640064016300640162
00640161006401600064015f0064015e0064015d0064015c0064015b0064
015a00640159006401580064015700640156006401550064015400640153
00640152006401500064014f0064014e0064014c0064014b0064014a0064
014900640148006401470064014600640145006401440064014300642b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b185f5e000000>
[15719 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 9824 1004 <00020048ffed03c705210013002b010bb0852b584019281201291101260d
01260c012608012507012a03012902012db8ffc040250f024d602d011418
10014d14100f014d14160d014d140a0c014d14200b014d14180c014d14bb
022d00000020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8
fff6b30c014d20b8ffe8b60c014d24200120b8022d40090a200030004000
030ab8fff040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00
b8ffc0400a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003f
ed3fed11120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b
2b2b31305d2b5d5d5d5d5d5d5d5d1bb10f1bb8010ab46c0f530525b8010a
b26c055600183f2b3f2b30315901140e0223222e0235343e0233321e0207
342e0423220e0215141e0233323e0403c72f6db0817aa7662b306cb0807b
a7662bb00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b161
57a9f7a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e72
8500>HIBBAA+CIDFont+F1 AddT42Char 
2 10216 1005 <000100ae0000039f0517002e010cb0852b584024241e01241d01241c0123
1b01241a01241901261801261701291201291101122010014d30b8ffc040
0d0f024d60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29
b8fff0b30d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e
18200b014d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8
ffc0b310014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b01
4da01101111312b8013fb323522910b80107b10654003fed323ffdcd012f
5d2b2b2b2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d
5d5d5d5d5d5d5d1bb313402312b8013fb56c2352290610b80107b26c0654
00183f2b323f2b1acd30315925140e022321222e0235343e023321110706
06262635343e0237253e0333321e02151133321e02039f060a0d07fd5c07
0c0b0606090d08010efa13170e0503060b09012a040c12181218201206ea
080e090544131a100707101a13121a110903d8950a040d1e171118100c06
bf0304040104070b06fb8f09111a>HIBBAA+CIDFont+F1 AddT42Char 
2 10620 1006 <000100720000039c0521003e00cab0852b58400d2936012b1e01291d0126
1e0140b8ffc040170f024d604001161810014d16100c0d014c16200b014d
16b8022db633253325330039b8ffe8b310014d39ba027f000bffc0b30c01
4d0bb8ffe0400b0f014d0b1138392020391bb8012eb63316062e531039b8
0128b10654003fed323f123939ed11392f123939012f2b2be12bcd39392f
2f10e12b2b2b31305d2b005d015d5d5d1bb71138392020392e1bb8012e40
096c3316062e53100639b80128b26c065400183f2b323f1239392b11392f
12393930315925140e022321222e0235343e0237133e0335342e0223220e
0223222e0235343e0633321e0215140e02070721321e02039c05090f09fd
350e150f07030a0f0cfb576939121c3550343d6149310c070b0704020508
183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c130907101e1614
1e17170d010a5c9278622b2b4d3a2222282208121e150f16100e15242318
355c7a453e7b8faf72d609121b00>HIBBAA+CIDFont+F1 AddT42Char 
2 10994 1007 <00010067ffed0392052100580147b0852b58b9005affc0401c0f024d605a
01310810014d31100f014d31100c0d014c31200b014d31b80235400a4e53
264e4e1813014d40b8ffe840260f014d26200f014d40264e4e2640030e1b
0810014d1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8
022db500080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b3
0f014d0eb8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ff
c0b30f014d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf3
202005495316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b
5d2b2b012f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910
e12b2b2b2b31305d2b1b400c0f3b010b033b113b11164936b8010b400d6c
53202cf36c20200549530516b8010bb26c055600183f2b3f12392f2b392b
1139392f2f5f5e5d30315901140e0223222e0635343633321e0233323e02
35342e022323222e0235343e023333323e0235342e0223220e0223222e02
35343e0633321e0215140e0207151e0303923e74aa6b4171583a0f080603
0e0d0935536f44426444222b53794d7b080f0b07060b0e0971426949271a
3451353a614c320a070b0703020608133a556f405a885b2d203e5a3b436f
502d0172598f6637151d1f0e0e141d15241c202520223e55323758402207
101a1513190f07224059372849361f232823050f1b160f17110e13242318
2e5475473d6951390b020735506b>HIBBAA+CIDFont+F1 AddT42Char 
2 11548 1008 <00020030fffa03d30514002a002e0125b0852b58403a252e01262d01272c
01242701242601251c01261b01231a012419012518012517012616012615
01261401261001260f012405012404012b1b0130b8ffc040120f024d6030
012d16180f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c
2e2e10b8fffc401d0f024d101810014d10100f014d10100d014d100a0c01
4d10100b014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8
ffe0400a0b014d0404302f271b2eb8010b400a042b2110100a21520a5500
3f3f12392f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133
cd2b2b2b2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d
5d1bb3271b102eb8010b400b6c042b2110100a21520a5500183f3f12392f
1239332b3232303159011406232311140e0223222e02351121222e023534
3e0237013e0333321e0215113332160123012103d3141292081420191820
1307fdea0c100d0502060a0701d205131e2c1e21311e10921115fea102fe
5b01a701702126fef0080b080404080b08011006101e18131e19170d0312
080c080305080d09fcc62302e9fd3a00>HIBBAA+CIDFont+F1 AddT42Char 
2 11984 1009 <00010065ffed0396050e003e00fcb0852b58400d27370127360126080126
030140b8ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c
37ba02110028ffc0402810014d28400f014d280e4f326f327f3203321d18
10014d1d100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f02
4d00b8ffc0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c
3af42022012222052c5118b8010bb10556003fed3f12392f5ded10ed1139
2f2b0110d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d
5d1bb41313182c36b8012c40116c223af46c0022010b032222052c510518
b8010bb26c055600183f2b3f12392f5f5e5d2b2b11392f30315901140e02
23222e0635343e0233321e0233323e0235342e0223220623222635113436
3321321e02151406232111363633321e0203964680b16c3c6c54360f0605
0203080b070a2a4769484370512e27517c563d58261c181f1d023d080f0a
051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b1108
191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe9505023561
8a00>HIBBAA+CIDFont+F1 AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>HIBBAA+CIDFont+F1 AddT42Char 
HIBBAA+CIDFont+F1 /CharStrings get begin
/zero 1004 def
/one 1005 def
/two 1006 def
/three 1007 def
/four 1008 def
/five 1009 def
end
HIBBAA+CIDFont+F1 /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
pop
end
%ADOEndSubsetFont
/HUBKFC+CIDFont+F1 /HIBBAA+CIDFont+F1 findfont ct_VMDictPut
/HUBKFC+CIDFont+F1*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
HUBKFC+CIDFont+F1 nf
HUBKFC+CIDFont+F1*1 [12.8316 0 0 -12.8316 0 0 ]msf
19.6094 242.586 mo
(0)sh
19.6094 220.751 mo
(5)sh
13.0119 199.029 mo
(10)
[6.54405 0 ]xsh
13.0119 177.188 mo
(15)
[6.54405 0 ]xsh
13.0119 155.346 mo
(20)
[6.54405 0 ]xsh
13.0119 133.63 mo
(25)
[6.54405 0 ]xsh
13.0119 111.789 mo
(30)
[6.54405 0 ]xsh
13.0119 89.9476 mo
(35)
[6.54405 0 ]xsh
13.0119 68.2316 mo
(40)
[6.54405 0 ]xsh
13.0119 46.3903 mo
(45)
[6.54405 0 ]xsh
13.0119 24.549 mo
(50)
[6.54405 0 ]xsh
gsave
2.93161 -97.7292 mo
2.93161 406.271 li
694.132 406.271 li
694.132 -97.7292 li
cp
eclp
37.6116 268.751 mo
37.7316 268.871 37.8516 269.111 37.9716 269.231 cv
38.0916 269.471 38.2116 269.711 38.2116 269.831 cv
38.2116 270.071 38.2116 270.311 38.2116 270.431 cv
38.2116 270.671 38.0916 270.911 38.0916 271.151 cv
37.9716 271.271 37.8516 271.511 37.7316 271.751 cv
37.6116 271.871 37.3716 272.111 37.2516 272.351 cv
35.6916 273.791 li
35.6916 273.911 35.5716 273.911 35.4516 273.911 cv
35.3316 274.031 35.2116 273.911 35.0916 273.791 cv
30.0516 268.751 li
29.9316 268.631 29.8116 268.511 29.8116 268.391 cv
29.8116 268.271 29.9316 268.151 29.9316 268.151 cv
31.2516 266.831 li
31.6116 266.471 31.9716 266.231 32.2116 266.111 cv
32.4516 265.871 32.8116 265.871 33.0516 265.751 cv
33.2916 265.751 33.5316 265.751 33.7716 265.871 cv
34.1316 265.991 34.3716 266.231 34.4916 266.471 cv
34.7316 266.591 34.8516 266.711 34.8516 266.831 cv
34.9716 267.071 35.0916 267.191 35.0916 267.311 cv
35.0916 267.551 35.0916 267.671 35.0916 267.911 cv
35.0916 268.031 35.0916 268.271 34.9716 268.391 cv
35.2116 268.271 35.4516 268.151 35.5716 268.151 cv
35.8116 268.031 36.0516 268.031 36.2916 268.031 cv
36.5316 268.031 36.6516 268.151 36.8916 268.271 cv
37.1316 268.391 37.3716 268.511 37.6116 268.751 cv
cp
33.8916 267.311 mo
33.6516 267.191 33.5316 267.071 33.4116 266.951 cv
33.2916 266.831 33.0516 266.831 32.9316 266.831 cv
32.8116 266.831 32.5716 266.951 32.4516 266.951 cv
32.2116 267.071 32.0916 267.191 31.8516 267.431 cv
31.0116 268.271 li
32.9316 270.071 li
33.7716 269.231 li
34.0116 268.991 34.1316 268.871 34.1316 268.631 cv
34.2516 268.511 34.2516 268.391 34.2516 268.151 cv
34.2516 268.031 34.2516 267.791 34.1316 267.671 cv
34.0116 267.551 34.0116 267.431 33.8916 267.311 cv
cp
36.7716 269.591 mo
36.6516 269.351 36.4116 269.231 36.2916 269.111 cv
36.0516 269.111 35.9316 269.111 35.6916 269.111 cv
35.4516 269.111 35.3316 269.111 35.0916 269.231 cv
34.8516 269.351 34.7316 269.591 34.4916 269.831 cv
33.5316 270.671 li
35.5716 272.711 li
36.6516 271.631 li
36.7716 271.511 37.0116 271.271 37.0116 271.151 cv
37.1316 270.911 37.1316 270.791 37.2516 270.551 cv
37.2516 270.431 37.2516 270.191 37.1316 270.071 cv
37.0116 269.831 37.0116 269.711 36.7716 269.591 cv
cp
42.5316 262.751 mo
42.8916 263.111 43.1316 263.471 43.3716 263.831 cv
43.4916 264.191 43.6116 264.551 43.6116 264.911 cv
43.6116 265.271 43.4916 265.751 43.3716 266.111 cv
43.1316 266.471 42.8916 266.831 42.5316 267.191 cv
42.2916 267.431 41.9316 267.671 41.5716 267.911 cv
41.2116 268.031 40.8516 268.151 40.4916 268.151 cv
40.1316 268.151 39.7716 268.031 39.4116 267.911 cv
39.0516 267.671 38.6916 267.431 38.3316 267.071 cv
34.7316 263.591 li
34.7316 263.471 34.7316 263.471 34.7316 263.471 cv
34.7316 263.351 li
34.7316 263.351 34.7316 263.231 34.8516 263.231 cv
34.8516 263.111 34.9716 263.111 34.9716 262.991 cv
35.0916 262.991 35.0916 262.871 35.2116 262.871 cv
35.3316 262.751 li
35.4516 262.751 li
38.9316 266.231 li
39.2916 266.471 39.5316 266.711 39.7716 266.831 cv
40.0116 266.951 40.2516 267.071 40.4916 267.071 cv
40.8516 267.071 41.0916 267.071 41.3316 266.951 cv
41.5716 266.831 41.6916 266.711 41.9316 266.471 cv
42.1716 266.231 42.2916 265.991 42.4116 265.751 cv
42.5316 265.511 42.6516 265.271 42.6516 265.031 cv
42.6516 264.791 42.5316 264.551 42.4116 264.311 cv
42.2916 263.951 42.0516 263.711 41.8116 263.471 cv
38.3316 259.991 li
38.3316 259.991 38.3316 259.991 38.2116 259.871 cv
38.2116 259.871 38.2116 259.871 38.3316 259.751 cv
38.3316 259.751 38.3316 259.751 38.3316 259.631 cv
38.4516 259.631 38.4516 259.511 38.5716 259.511 cv
38.5716 259.391 38.6916 259.391 38.6916 259.271 cv
38.8116 259.271 38.8116 259.271 38.9316 259.151 cv
38.9316 259.151 li
39.0516 259.151 39.0516 259.151 39.0516 259.271 cv
cp
43.8516 254.951 mo
43.8516 254.951 43.8516 255.071 43.9716 255.071 cv
43.9716 255.191 43.9716 255.191 43.9716 255.191 cv
43.9716 255.311 43.9716 255.311 43.9716 255.311 cv
43.9716 255.431 li
41.8116 257.471 li
43.8516 259.511 li
45.7716 257.471 li
45.8916 257.471 li
45.8916 257.471 45.8916 257.471 46.0116 257.471 cv
46.0116 257.471 46.0116 257.471 46.1316 257.471 cv
46.2516 257.591 li
46.3716 257.711 46.3716 257.711 46.3716 257.831 cv
46.3716 257.831 46.4916 257.831 46.4916 257.951 cv
46.4916 257.951 46.4916 257.951 46.4916 258.071 cv
46.4916 258.071 46.4916 258.071 46.3716 258.071 cv
44.4516 260.111 li
46.8516 262.511 li
46.8516 262.631 46.8516 262.631 46.8516 262.631 cv
46.8516 262.751 46.8516 262.751 46.7316 262.751 cv
46.7316 262.871 46.6116 262.871 46.6116 262.991 cv
46.4916 263.111 46.4916 263.111 46.3716 263.111 cv
46.3716 263.231 46.2516 263.231 46.2516 263.231 cv
46.1316 263.231 li
46.1316 263.231 46.1316 263.231 46.0116 263.231 cv
40.7316 257.951 li
40.6116 257.831 40.6116 257.711 40.6116 257.591 cv
40.6116 257.471 40.6116 257.351 40.7316 257.351 cv
43.3716 254.711 li
43.4916 254.711 li
43.4916 254.711 43.6116 254.711 43.6116 254.831 cv
43.7316 254.831 43.7316 254.831 43.8516 254.951 cv
cp
47.9316 250.871 mo
47.9316 250.871 48.0516 250.871 48.0516 250.991 cv
48.0516 251.111 li
48.1716 251.111 48.1716 251.231 48.1716 251.231 cv
48.0516 251.231 48.0516 251.231 48.0516 251.231 cv
46.0116 253.391 li
47.9316 255.311 li
49.8516 253.391 li
49.9716 253.391 49.9716 253.271 49.9716 253.271 cv
50.0916 253.271 li
50.2116 253.391 li
50.3316 253.511 li
50.4516 253.631 50.4516 253.631 50.4516 253.631 cv
50.5716 253.751 50.5716 253.751 50.5716 253.751 cv
50.5716 253.871 50.5716 253.871 50.5716 253.871 cv
50.5716 253.991 50.5716 253.991 50.5716 253.991 cv
48.5316 256.031 li
50.9316 258.311 li
50.9316 258.431 50.9316 258.431 50.9316 258.431 cv
51.0516 258.431 50.9316 258.551 50.9316 258.551 cv
50.9316 258.671 li
50.8116 258.791 50.8116 258.791 50.6916 258.911 cv
50.5716 259.031 li
50.4516 259.151 50.4516 259.151 50.3316 259.151 cv
50.3316 259.151 50.3316 259.151 50.2116 259.151 cv
50.2116 259.151 li
44.9316 253.871 li
44.8116 253.751 44.6916 253.631 44.6916 253.511 cv
44.6916 253.391 44.8116 253.271 44.8116 253.271 cv
47.4516 250.631 li
47.5716 250.631 47.5716 250.631 47.5716 250.631 cv
47.6916 250.631 47.6916 250.631 47.6916 250.631 cv
47.8116 250.751 47.8116 250.751 47.9316 250.871 cv
cp
f
64.4916 267.431 mo
64.7316 267.671 64.9716 267.911 65.0916 268.271 cv
65.2116 268.631 65.2116 268.871 65.2116 269.231 cv
65.2116 269.591 65.0916 269.831 64.8516 270.191 cv
64.7316 270.431 64.4916 270.791 64.2516 271.031 cv
64.0116 271.271 63.8916 271.391 63.6516 271.511 cv
63.5316 271.631 63.2916 271.751 63.0516 271.871 cv
62.9316 271.991 62.8116 271.991 62.6916 271.991 cv
62.4516 272.111 62.4516 272.111 62.3316 272.111 cv
62.2116 272.111 62.2116 272.111 62.0916 271.991 cv
62.0916 271.991 61.9716 271.871 61.8516 271.871 cv
61.8516 271.751 61.7316 271.751 61.7316 271.631 cv
61.6116 271.511 li
61.6116 271.511 61.6116 271.511 61.6116 271.391 cv
61.6116 271.391 61.6116 271.391 61.7316 271.391 cv
61.7316 271.271 61.8516 271.271 61.9716 271.271 cv
62.0916 271.271 62.2116 271.151 62.3316 271.151 cv
62.5716 271.031 62.8116 271.031 62.9316 270.911 cv
63.1716 270.791 63.4116 270.551 63.6516 270.311 cv
63.7716 270.191 63.8916 270.071 64.0116 269.831 cv
64.1316 269.711 64.1316 269.471 64.1316 269.351 cv
64.2516 269.111 64.1316 268.991 64.1316 268.751 cv
64.0116 268.631 63.8916 268.391 63.7716 268.271 cv
63.6516 268.151 63.4116 268.031 63.2916 268.031 cv
63.0516 267.911 62.9316 267.911 62.6916 268.031 cv
62.4516 268.031 62.2116 268.031 61.9716 268.151 cv
61.7316 268.271 61.6116 268.271 61.3716 268.391 cv
61.1316 268.511 60.8916 268.511 60.6516 268.631 cv
60.2916 268.631 60.0516 268.751 59.8116 268.751 cv
59.5716 268.751 59.3316 268.631 59.0916 268.631 cv
58.8516 268.511 58.6116 268.271 58.3716 268.031 cv
58.1316 267.791 58.0116 267.551 57.8916 267.311 cv
57.7716 267.071 57.7716 266.711 57.7716 266.471 cv
57.7716 266.231 57.8916 265.871 58.0116 265.631 cv
58.2516 265.391 58.3716 265.151 58.6116 264.791 cv
58.7316 264.671 58.9716 264.551 59.0916 264.551 cv
59.2116 264.431 59.3316 264.311 59.5716 264.191 cv
59.6916 264.191 59.8116 264.071 59.9316 264.071 cv
60.0516 263.951 60.1716 263.951 60.2916 263.951 cv
60.2916 263.951 60.2916 263.951 60.4116 263.951 cv
60.4116 263.951 60.4116 263.951 60.4116 264.071 cv
60.5316 264.071 60.5316 264.071 60.5316 264.071 cv
60.5316 264.191 60.6516 264.191 60.6516 264.191 cv
60.7716 264.311 60.7716 264.311 60.7716 264.431 cv
60.8916 264.431 60.8916 264.431 60.8916 264.551 cv
60.8916 264.551 li
60.8916 264.671 60.8916 264.671 60.8916 264.671 cv
60.8916 264.671 60.7716 264.791 60.6516 264.791 cv
60.5316 264.791 60.4116 264.791 60.2916 264.911 cv
60.1716 264.911 59.9316 265.031 59.8116 265.151 cv
59.5716 265.151 59.4516 265.391 59.2116 265.511 cv
59.0916 265.631 58.9716 265.871 58.8516 265.991 cv
58.8516 266.111 58.8516 266.351 58.7316 266.471 cv
58.7316 266.591 58.8516 266.711 58.8516 266.831 cv
58.9716 266.951 58.9716 267.071 59.0916 267.191 cv
59.3316 267.431 59.4516 267.551 59.6916 267.551 cv
59.8116 267.551 60.0516 267.551 60.2916 267.551 cv
60.4116 267.551 60.6516 267.431 60.8916 267.431 cv
61.1316 267.311 61.3716 267.191 61.6116 267.071 cv
61.8516 267.071 62.0916 266.951 62.3316 266.951 cv
62.5716 266.831 62.8116 266.831 63.0516 266.831 cv
63.2916 266.831 63.5316 266.831 63.7716 266.951 cv
64.0116 267.071 64.2516 267.191 64.4916 267.431 cv
cp
69.2916 265.511 mo
69.4116 265.631 69.4116 265.631 69.4116 265.631 cv
69.4116 265.751 69.4116 265.751 69.2916 265.751 cv
69.2916 265.871 69.2916 265.871 69.1716 265.991 cv
69.1716 265.991 69.0516 266.111 69.0516 266.231 cv
68.9316 266.231 68.9316 266.351 68.8116 266.351 cv
68.6916 266.471 li
68.6916 266.471 68.5716 266.471 68.5716 266.591 cv
68.5716 266.591 68.5716 266.591 68.4516 266.591 cv
68.4516 266.591 li
68.3316 266.591 68.3316 266.591 68.3316 266.591 cv
61.1316 263.111 li
61.0116 262.991 61.0116 262.991 60.8916 262.991 cv
60.8916 262.871 li
60.8916 262.751 60.8916 262.751 61.0116 262.631 cv
61.0116 262.631 61.1316 262.511 61.1316 262.391 cv
61.2516 262.391 61.3716 262.271 61.3716 262.271 cv
61.4916 262.151 61.4916 262.151 61.4916 262.151 cv
61.6116 262.151 61.6116 262.151 61.6116 262.151 cv
61.7316 262.151 li
68.2116 265.391 li
64.9716 258.911 li
64.9716 258.911 64.9716 258.911 64.9716 258.791 cv
64.9716 258.791 64.9716 258.791 64.9716 258.671 cv
64.9716 258.671 64.9716 258.671 65.0916 258.551 cv
65.0916 258.551 65.2116 258.431 65.3316 258.311 cv
65.3316 258.191 65.4516 258.191 65.4516 258.191 cv
65.5716 258.071 65.5716 258.071 65.6916 258.071 cv
65.6916 258.071 65.6916 258.071 65.8116 258.191 cv
65.8116 258.191 65.8116 258.191 65.9316 258.311 cv
cp
78.4116 256.391 mo
78.5316 256.511 78.5316 256.511 78.5316 256.511 cv
78.5316 256.631 li
78.4116 256.751 li
78.4116 256.871 78.2916 256.871 78.1716 256.991 cv
78.0516 257.111 li
77.9316 257.111 77.9316 257.231 77.9316 257.231 cv
77.8116 257.231 77.8116 257.231 77.8116 257.231 cv
77.6916 257.231 li
72.7716 252.191 li
72.6516 252.191 li
75.6516 259.271 li
75.7716 259.271 75.7716 259.271 75.7716 259.391 cv
75.6516 259.391 li
75.6516 259.511 75.6516 259.511 75.6516 259.631 cv
75.5316 259.631 75.5316 259.631 75.4116 259.751 cv
75.2916 259.871 li
75.1716 259.871 75.1716 259.991 75.1716 259.991 cv
75.0516 259.991 75.0516 259.991 75.0516 259.991 cv
74.9316 259.991 li
67.9716 256.871 li
73.0116 261.911 li
73.0116 261.911 73.0116 261.911 73.0116 262.031 cv
73.0116 262.031 li
73.0116 262.151 73.0116 262.151 72.8916 262.271 cv
72.7716 262.391 li
72.6516 262.511 72.6516 262.511 72.5316 262.631 cv
72.5316 262.631 72.4116 262.631 72.4116 262.751 cv
72.2916 262.751 li
72.2916 262.631 li
67.0116 257.351 li
66.8916 257.231 66.7716 257.111 66.7716 256.991 cv
66.7716 256.871 66.8916 256.751 66.8916 256.751 cv
67.3716 256.271 li
67.4916 256.151 67.6116 256.031 67.7316 256.031 cv
67.7316 256.031 67.8516 255.911 67.9716 255.911 cv
68.0916 255.911 68.0916 255.911 68.2116 255.911 cv
68.3316 255.911 68.4516 256.031 68.5716 256.031 cv
74.3316 258.551 li
71.9316 252.671 li
71.8116 252.551 71.8116 252.431 71.8116 252.311 cv
71.8116 252.311 71.8116 252.191 71.8116 252.071 cv
71.8116 251.951 71.8116 251.951 71.8116 251.831 cv
71.9316 251.831 71.9316 251.711 72.0516 251.591 cv
72.5316 251.111 li
72.5316 251.111 72.6516 251.111 72.6516 250.991 cv
72.7716 250.991 72.7716 250.991 72.8916 250.991 cv
73.0116 250.991 li
73.1316 251.111 73.1316 251.111 73.2516 251.111 cv
cp
f
89.0916 268.511 mo
89.3316 268.751 89.5716 268.991 89.5716 269.351 cv
89.6916 269.591 89.8116 269.951 89.6916 270.311 cv
89.6916 270.551 89.5716 270.911 89.4516 271.271 cv
89.3316 271.511 89.0916 271.871 88.8516 272.111 cv
88.6116 272.351 88.3716 272.471 88.2516 272.591 cv
88.0116 272.711 87.8916 272.831 87.6516 272.951 cv
87.5316 272.951 87.2916 273.071 87.1716 273.071 cv
87.0516 273.071 86.9316 273.191 86.9316 273.191 cv
86.8116 273.191 86.6916 273.071 86.6916 273.071 cv
86.5716 273.071 86.5716 272.951 86.4516 272.831 cv
86.3316 272.831 86.3316 272.711 86.2116 272.711 cv
86.2116 272.591 li
86.2116 272.471 li
86.2116 272.471 86.2116 272.471 86.2116 272.351 cv
86.2116 272.351 86.3316 272.351 86.4516 272.351 cv
86.5716 272.231 86.8116 272.231 86.9316 272.231 cv
87.0516 272.111 87.2916 271.991 87.5316 271.871 cv
87.7716 271.751 88.0116 271.631 88.1316 271.391 cv
88.3716 271.271 88.4916 271.031 88.6116 270.911 cv
88.6116 270.671 88.7316 270.551 88.7316 270.311 cv
88.7316 270.191 88.7316 269.951 88.6116 269.831 cv
88.6116 269.711 88.4916 269.471 88.3716 269.351 cv
88.1316 269.231 88.0116 269.111 87.7716 268.991 cv
87.6516 268.991 87.4116 268.991 87.1716 268.991 cv
87.0516 269.111 86.8116 269.111 86.5716 269.231 cv
86.3316 269.231 86.0916 269.351 85.8516 269.471 cv
85.6116 269.591 85.3716 269.591 85.1316 269.711 cv
84.8916 269.711 84.6516 269.831 84.4116 269.711 cv
84.1716 269.711 83.9316 269.711 83.6916 269.591 cv
83.4516 269.591 83.2116 269.351 82.9716 269.111 cv
82.7316 268.871 82.6116 268.631 82.4916 268.391 cv
82.3716 268.151 82.3716 267.791 82.3716 267.551 cv
82.3716 267.311 82.4916 266.951 82.6116 266.711 cv
82.7316 266.351 82.9716 266.111 83.2116 265.871 cv
83.3316 265.751 83.4516 265.631 83.5716 265.511 cv
83.8116 265.391 83.9316 265.391 84.0516 265.271 cv
84.1716 265.151 84.4116 265.151 84.5316 265.151 cv
84.6516 265.031 84.7716 265.031 84.7716 265.031 cv
84.8916 265.031 84.8916 265.031 84.8916 265.031 cv
85.0116 265.031 li
85.0116 265.151 85.0116 265.151 85.1316 265.151 cv
85.1316 265.151 85.1316 265.271 85.2516 265.271 cv
85.2516 265.391 85.3716 265.391 85.3716 265.391 cv
85.3716 265.511 85.4916 265.511 85.4916 265.511 cv
85.4916 265.631 85.4916 265.631 85.4916 265.631 cv
85.4916 265.751 85.4916 265.751 85.4916 265.751 cv
85.3716 265.751 85.3716 265.751 85.2516 265.871 cv
85.1316 265.871 85.0116 265.871 84.8916 265.991 cv
84.6516 265.991 84.5316 266.111 84.2916 266.111 cv
84.1716 266.231 83.9316 266.351 83.8116 266.591 cv
83.6916 266.711 83.5716 266.831 83.4516 267.071 cv
83.3316 267.191 83.3316 267.311 83.3316 267.551 cv
83.3316 267.671 83.3316 267.791 83.4516 267.911 cv
83.4516 268.031 83.5716 268.151 83.6916 268.271 cv
83.8116 268.511 84.0516 268.511 84.1716 268.631 cv
84.4116 268.631 84.5316 268.631 84.7716 268.631 cv
85.0116 268.631 85.2516 268.511 85.4916 268.391 cv
85.7316 268.391 85.9716 268.271 86.2116 268.151 cv
86.4516 268.031 86.6916 268.031 86.9316 267.911 cv
87.1716 267.911 87.4116 267.791 87.6516 267.791 cv
87.8916 267.791 88.1316 267.911 88.3716 268.031 cv
88.6116 268.031 88.8516 268.271 89.0916 268.511 cv
cp
91.1316 261.431 mo
91.4916 261.791 91.6116 262.031 91.8516 262.391 cv
91.9716 262.751 91.9716 262.991 91.9716 263.351 cv
91.9716 263.711 91.8516 264.071 91.7316 264.431 cv
91.4916 264.791 91.2516 265.031 90.8916 265.391 cv
90.2916 266.111 li
92.3316 268.151 li
92.3316 268.151 92.3316 268.151 92.3316 268.271 cv
92.3316 268.271 92.3316 268.271 92.3316 268.391 cv
92.3316 268.391 92.3316 268.391 92.3316 268.511 cv
92.2116 268.511 92.2116 268.631 92.0916 268.631 cv
91.9716 268.751 91.9716 268.871 91.8516 268.871 cv
91.8516 268.871 91.8516 268.871 91.7316 268.991 cv
91.7316 268.991 91.7316 268.991 91.6116 268.991 cv
91.6116 268.991 91.6116 268.991 91.6116 268.871 cv
86.3316 263.591 li
86.2116 263.471 86.0916 263.351 86.0916 263.231 cv
86.0916 263.231 86.2116 263.111 86.2116 262.991 cv
87.5316 261.791 li
87.6516 261.671 87.7716 261.551 87.8916 261.431 cv
88.0116 261.311 88.1316 261.191 88.3716 261.071 cv
88.4916 260.951 88.7316 260.831 88.9716 260.831 cv
89.2116 260.711 89.4516 260.711 89.8116 260.711 cv
90.0516 260.711 90.2916 260.831 90.5316 260.951 cv
90.7716 261.071 90.8916 261.191 91.1316 261.431 cv
cp
90.4116 262.271 mo
90.1716 262.031 89.9316 261.911 89.6916 261.911 cv
89.4516 261.791 89.2116 261.791 89.0916 261.791 cv
88.8516 261.911 88.6116 262.031 88.4916 262.151 cv
88.3716 262.271 88.1316 262.391 88.0116 262.511 cv
87.4116 263.111 li
89.6916 265.511 li
90.2916 264.791 li
90.5316 264.551 90.7716 264.311 90.7716 264.071 cv
90.8916 263.951 91.0116 263.711 91.0116 263.471 cv
91.0116 263.231 90.8916 263.111 90.7716 262.871 cv
90.7716 262.631 90.6516 262.511 90.4116 262.271 cv
cp
99.2916 260.831 mo
99.4116 260.951 li
99.5316 261.071 li
99.5316 261.191 99.5316 261.191 99.5316 261.191 cv
99.5316 261.191 99.5316 261.311 99.4116 261.311 cv
96.6516 264.071 li
96.6516 264.071 96.5316 264.191 96.4116 264.191 cv
96.2916 264.191 96.1716 264.071 96.0516 263.951 cv
91.0116 258.911 li
90.8916 258.791 90.7716 258.671 90.8916 258.551 cv
90.8916 258.431 90.8916 258.311 91.0116 258.311 cv
93.6516 255.551 li
93.7716 255.551 li
93.8916 255.551 li
93.8916 255.551 94.0116 255.551 94.0116 255.671 cv
94.0116 255.671 94.1316 255.671 94.1316 255.791 cv
94.2516 255.791 94.2516 255.911 94.2516 255.911 cv
94.3716 255.911 94.3716 256.031 94.3716 256.031 cv
94.3716 256.151 li
94.3716 256.151 94.3716 256.151 94.3716 256.271 cv
92.0916 258.431 li
93.8916 260.231 li
95.8116 258.311 li
95.8116 258.311 95.8116 258.311 95.9316 258.311 cv
95.9316 258.311 li
96.0516 258.311 96.0516 258.311 96.1716 258.311 cv
96.1716 258.431 96.1716 258.431 96.2916 258.551 cv
96.2916 258.551 96.4116 258.551 96.4116 258.671 cv
96.4116 258.791 li
96.4116 258.791 96.5316 258.791 96.4116 258.911 cv
96.4116 258.911 li
94.4916 260.831 li
96.5316 262.871 li
98.8116 260.591 li
98.8116 260.591 98.8116 260.591 98.9316 260.591 cv
98.9316 260.591 98.9316 260.591 99.0516 260.591 cv
99.0516 260.591 99.0516 260.591 99.1716 260.711 cv
99.1716 260.711 99.1716 260.711 99.2916 260.831 cv
cp
103.852 255.191 mo
103.972 255.191 103.972 255.311 103.972 255.311 cv
104.092 255.311 104.092 255.431 104.092 255.431 cv
104.092 255.551 li
104.212 255.551 104.212 255.671 104.212 255.671 cv
104.212 255.791 104.092 255.791 104.092 256.031 cv
104.092 256.151 103.972 256.271 103.972 256.511 cv
103.852 256.751 103.732 256.991 103.612 257.111 cv
103.492 257.351 103.252 257.591 103.012 257.831 cv
102.652 258.191 102.292 258.431 101.812 258.671 cv
101.452 258.791 100.972 258.911 100.612 258.911 cv
100.132 258.791 99.6516 258.671 99.1716 258.431 cv
98.6916 258.191 98.2116 257.831 97.7316 257.351 cv
97.2516 256.871 96.8916 256.391 96.6516 255.911 cv
96.4116 255.431 96.2916 254.951 96.2916 254.471 cv
96.1716 253.991 96.2916 253.511 96.4116 253.031 cv
96.6516 252.671 96.8916 252.191 97.2516 251.831 cv
97.4916 251.711 97.6116 251.591 97.8516 251.471 cv
97.9716 251.231 98.2116 251.231 98.3316 251.111 cv
98.5716 250.991 98.6916 250.991 98.9316 250.871 cv
99.0516 250.871 99.1716 250.871 99.2916 250.871 cv
99.4116 250.871 li
99.5316 250.871 li
99.5316 250.871 99.5316 250.991 99.6516 250.991 cv
99.7716 251.111 li
99.8916 251.231 99.8916 251.231 99.8916 251.231 cv
99.8916 251.351 100.012 251.351 100.012 251.351 cv
100.012 251.471 100.012 251.471 100.012 251.471 cv
100.012 251.591 100.012 251.591 100.012 251.591 cv
99.8916 251.591 99.8916 251.711 99.7716 251.711 cv
99.5316 251.711 99.4116 251.711 99.2916 251.831 cv
99.0516 251.831 98.8116 251.951 98.5716 251.951 cv
98.4516 252.071 98.2116 252.311 97.9716 252.551 cv
97.7316 252.791 97.4916 253.031 97.3716 253.391 cv
97.2516 253.631 97.2516 253.991 97.2516 254.351 cv
97.3716 254.711 97.4916 255.071 97.7316 255.431 cv
97.8516 255.791 98.2116 256.151 98.5716 256.511 cv
98.9316 256.871 99.2916 257.231 99.6516 257.351 cv
100.012 257.591 100.372 257.711 100.612 257.711 cv
100.972 257.831 101.332 257.711 101.572 257.591 cv
101.932 257.471 102.172 257.351 102.532 256.991 cv
102.772 256.871 102.892 256.631 103.012 256.391 cv
103.132 256.151 103.252 255.911 103.252 255.791 cv
103.252 255.551 103.372 255.431 103.372 255.191 cv
103.372 255.071 103.372 255.071 103.492 254.951 cv
103.492 254.951 li
103.612 254.951 li
103.612 254.951 103.732 254.951 103.732 255.071 cv
103.852 255.191 li
cp
f
106.852 276.191 mo
107.212 276.431 107.332 276.791 107.452 277.031 cv
107.572 277.391 107.572 277.751 107.572 277.991 cv
107.572 278.351 107.452 278.711 107.332 278.951 cv
107.092 279.311 106.972 279.551 106.612 279.911 cv
106.492 280.031 106.252 280.271 106.012 280.391 cv
105.892 280.511 105.652 280.631 105.532 280.631 cv
105.292 280.751 105.172 280.751 105.052 280.871 cv
104.932 280.871 104.812 280.871 104.692 280.871 cv
104.692 280.871 104.572 280.871 104.452 280.871 cv
104.452 280.751 104.332 280.751 104.212 280.631 cv
104.092 280.511 li
104.092 280.391 104.092 280.391 104.092 280.391 cv
103.972 280.271 103.972 280.271 103.972 280.271 cv
104.092 280.151 li
104.092 280.151 104.212 280.031 104.332 280.031 cv
104.452 280.031 104.572 280.031 104.812 279.911 cv
104.932 279.911 105.172 279.791 105.412 279.671 cv
105.532 279.551 105.772 279.431 106.012 279.191 cv
106.132 278.951 106.372 278.831 106.372 278.711 cv
106.492 278.471 106.612 278.351 106.612 278.111 cv
106.612 277.991 106.612 277.751 106.492 277.631 cv
106.492 277.391 106.372 277.271 106.132 277.151 cv
106.012 276.911 105.892 276.791 105.652 276.791 cv
105.412 276.791 105.292 276.791 105.052 276.791 cv
104.812 276.791 104.692 276.911 104.452 276.911 cv
104.212 277.031 103.972 277.151 103.732 277.271 cv
103.492 277.271 103.252 277.391 103.012 277.391 cv
102.772 277.511 102.532 277.511 102.292 277.511 cv
102.052 277.511 101.812 277.511 101.572 277.391 cv
101.332 277.271 101.092 277.151 100.852 276.911 cv
100.612 276.671 100.372 276.431 100.252 276.071 cv
100.252 275.831 100.132 275.591 100.132 275.351 cv
100.252 274.991 100.252 274.751 100.492 274.391 cv
100.612 274.151 100.852 273.911 101.092 273.671 cv
101.212 273.551 101.332 273.431 101.452 273.311 cv
101.572 273.191 101.812 273.071 101.932 273.071 cv
102.052 272.951 102.172 272.951 102.292 272.831 cv
102.532 272.831 102.532 272.831 102.652 272.831 cv
102.772 272.831 li
102.892 272.831 102.892 272.831 102.892 272.951 cv
103.012 272.951 103.012 272.951 103.132 273.071 cv
103.132 273.071 103.132 273.191 103.252 273.191 cv
103.252 273.311 li
103.372 273.311 103.372 273.431 103.372 273.431 cv
103.372 273.431 103.252 273.431 103.252 273.551 cv
103.252 273.551 103.132 273.551 103.012 273.551 cv
103.012 273.671 102.772 273.671 102.652 273.671 cv
102.532 273.791 102.412 273.791 102.172 273.911 cv
102.052 274.031 101.812 274.151 101.692 274.271 cv
101.452 274.511 101.332 274.631 101.332 274.751 cv
101.212 274.991 101.212 275.111 101.212 275.231 cv
101.212 275.351 101.212 275.591 101.212 275.711 cv
101.332 275.831 101.452 275.951 101.452 276.071 cv
101.692 276.191 101.812 276.311 102.052 276.311 cv
102.172 276.431 102.412 276.431 102.652 276.311 cv
102.892 276.311 103.012 276.311 103.252 276.191 cv
103.492 276.071 103.732 276.071 103.972 275.951 cv
104.212 275.831 104.452 275.711 104.692 275.711 cv
104.932 275.591 105.172 275.591 105.412 275.591 cv
105.652 275.591 105.892 275.591 106.132 275.711 cv
106.492 275.831 106.612 275.951 106.852 276.191 cv
cp
109.012 269.231 mo
109.252 269.471 109.492 269.831 109.612 270.191 cv
109.732 270.431 109.852 270.791 109.852 271.151 cv
109.852 271.511 109.732 271.751 109.612 272.111 cv
109.372 272.471 109.132 272.831 108.772 273.191 cv
108.172 273.911 li
110.212 275.951 li
110.212 276.071 110.212 276.071 110.212 276.071 cv
110.212 276.191 110.212 276.191 110.092 276.191 cv
110.092 276.311 109.972 276.311 109.972 276.431 cv
109.852 276.551 109.852 276.551 109.732 276.671 cv
109.612 276.671 li
109.492 276.671 li
109.492 276.671 109.492 276.671 109.372 276.671 cv
104.092 271.391 li
103.972 271.271 103.972 271.151 103.972 271.031 cv
103.972 270.911 103.972 270.791 104.092 270.791 cv
105.292 269.591 li
105.412 269.351 105.532 269.351 105.652 269.231 cv
105.772 269.111 106.012 268.991 106.132 268.871 cv
106.372 268.751 106.612 268.631 106.852 268.511 cv
107.092 268.511 107.332 268.511 107.572 268.511 cv
107.812 268.511 108.052 268.631 108.292 268.751 cv
108.532 268.871 108.772 268.991 109.012 269.231 cv
cp
108.292 270.071 mo
108.052 269.831 107.812 269.711 107.572 269.591 cv
107.332 269.591 107.092 269.591 106.852 269.591 cv
106.732 269.711 106.492 269.711 106.372 269.831 cv
106.132 269.951 106.012 270.071 105.892 270.191 cv
105.172 270.911 li
107.452 273.191 li
108.172 272.591 li
108.412 272.351 108.532 272.111 108.652 271.871 cv
108.772 271.631 108.772 271.511 108.772 271.271 cv
108.772 271.031 108.772 270.791 108.652 270.671 cv
108.532 270.431 108.412 270.311 108.292 270.071 cv
cp
117.172 268.631 mo
117.172 268.631 117.172 268.631 117.292 268.751 cv
117.292 268.751 117.292 268.751 117.292 268.871 cv
117.292 268.871 117.292 268.871 117.292 268.991 cv
117.292 268.991 li
114.532 271.751 li
114.532 271.871 114.412 271.871 114.292 271.871 cv
114.172 271.871 114.052 271.871 113.932 271.751 cv
108.892 266.711 li
108.772 266.591 108.652 266.471 108.652 266.351 cv
108.652 266.231 108.772 266.111 108.772 266.111 cv
111.532 263.351 li
111.532 263.351 111.532 263.351 111.652 263.351 cv
111.652 263.231 111.652 263.231 111.772 263.351 cv
111.772 263.351 111.772 263.351 111.892 263.351 cv
111.892 263.351 111.892 263.471 112.012 263.471 cv
112.012 263.591 112.132 263.591 112.132 263.711 cv
112.132 263.711 112.132 263.711 112.252 263.831 cv
112.252 263.831 li
112.252 263.951 112.132 263.951 112.132 263.951 cv
109.972 266.231 li
111.772 268.031 li
113.692 266.111 li
113.692 266.111 113.692 266.111 113.692 265.991 cv
113.812 265.991 113.812 265.991 113.812 266.111 cv
113.932 266.111 li
114.052 266.111 114.052 266.231 114.052 266.231 cv
114.172 266.351 114.172 266.351 114.292 266.351 cv
114.292 266.471 114.292 266.471 114.292 266.471 cv
114.292 266.591 114.292 266.591 114.292 266.591 cv
114.292 266.711 114.292 266.711 114.292 266.711 cv
112.372 268.631 li
114.412 270.671 li
116.692 268.391 li
116.812 268.391 116.812 268.391 116.812 268.391 cv
116.932 268.391 116.932 268.391 116.932 268.391 cv
117.052 268.511 117.052 268.511 117.172 268.631 cv
cp
121.732 262.991 mo
121.852 262.991 121.852 262.991 121.852 263.111 cv
121.852 263.111 121.972 263.111 121.972 263.231 cv
121.972 263.231 121.972 263.231 121.972 263.351 cv
121.972 263.351 121.972 263.351 121.972 263.471 cv
121.972 263.471 121.972 263.591 121.972 263.711 cv
121.972 263.951 121.852 264.071 121.732 264.311 cv
121.732 264.431 121.612 264.671 121.492 264.911 cv
121.252 265.151 121.132 265.391 120.892 265.511 cv
120.532 265.991 120.172 266.231 119.692 266.351 cv
119.332 266.591 118.852 266.591 118.372 266.591 cv
117.892 266.591 117.532 266.471 117.052 266.231 cv
116.572 265.991 116.092 265.631 115.612 265.151 cv
115.132 264.671 114.772 264.191 114.532 263.711 cv
114.292 263.231 114.172 262.751 114.052 262.271 cv
114.052 261.791 114.172 261.311 114.292 260.831 cv
114.412 260.351 114.772 259.991 115.132 259.631 cv
115.252 259.391 115.492 259.271 115.612 259.151 cv
115.852 259.031 115.972 258.911 116.212 258.911 cv
116.332 258.791 116.572 258.671 116.692 258.671 cv
116.932 258.671 117.052 258.551 117.052 258.551 cv
117.172 258.551 117.172 258.551 117.292 258.671 cv
117.292 258.671 117.292 258.671 117.412 258.671 cv
117.412 258.671 117.412 258.671 117.532 258.791 cv
117.532 258.791 117.532 258.791 117.652 258.911 cv
117.772 259.031 li
117.772 259.031 117.772 259.151 117.892 259.151 cv
117.892 259.271 li
117.892 259.271 117.892 259.271 117.772 259.391 cv
117.772 259.391 117.652 259.391 117.532 259.391 cv
117.412 259.391 117.292 259.511 117.052 259.511 cv
116.932 259.631 116.692 259.631 116.452 259.751 cv
116.212 259.871 115.972 259.991 115.732 260.231 cv
115.492 260.591 115.372 260.831 115.252 261.191 cv
115.132 261.431 115.132 261.791 115.132 262.151 cv
115.132 262.511 115.372 262.871 115.492 263.231 cv
115.732 263.591 115.972 263.951 116.332 264.311 cv
116.692 264.671 117.052 264.911 117.412 265.151 cv
117.772 265.391 118.132 265.511 118.492 265.511 cv
118.852 265.511 119.092 265.511 119.452 265.391 cv
119.812 265.271 120.052 265.031 120.292 264.791 cv
120.532 264.551 120.772 264.311 120.892 264.071 cv
121.012 263.831 121.012 263.711 121.132 263.471 cv
121.132 263.351 121.132 263.111 121.252 262.991 cv
121.252 262.871 121.252 262.751 121.252 262.751 cv
121.372 262.751 121.372 262.751 121.372 262.751 cv
121.372 262.751 121.372 262.751 121.492 262.751 cv
121.492 262.751 121.492 262.751 121.612 262.751 cv
121.612 262.871 121.732 262.871 121.732 262.991 cv
cp
129.652 256.391 mo
129.772 256.391 129.772 256.511 129.772 256.511 cv
129.772 256.511 129.772 256.511 129.772 256.631 cv
129.652 256.631 129.652 256.631 129.652 256.751 cv
129.532 256.751 129.532 256.871 129.412 256.991 cv
129.292 257.111 li
129.172 257.111 129.172 257.231 129.052 257.231 cv
129.052 257.231 li
128.932 257.231 128.932 257.231 128.932 257.231 cv
123.892 252.191 li
126.892 259.271 li
126.892 259.391 126.892 259.391 126.892 259.391 cv
126.892 259.511 126.892 259.511 126.772 259.511 cv
126.772 259.631 126.772 259.631 126.652 259.751 cv
126.532 259.871 li
126.412 259.871 126.412 259.991 126.412 259.991 cv
126.292 259.991 126.292 259.991 126.292 259.991 cv
126.172 259.991 126.172 259.991 126.172 259.991 cv
119.212 256.871 li
124.252 261.911 li
124.252 262.031 124.252 262.031 124.252 262.031 cv
124.252 262.151 124.132 262.151 124.132 262.271 cv
124.012 262.391 li
123.892 262.511 123.892 262.511 123.772 262.631 cv
123.652 262.631 li
123.652 262.751 123.532 262.751 123.532 262.751 cv
123.532 262.631 123.532 262.631 123.412 262.631 cv
118.132 257.351 li
118.012 257.231 118.012 257.111 118.012 256.991 cv
118.012 256.871 118.132 256.751 118.132 256.751 cv
118.612 256.271 li
118.732 256.151 118.852 256.031 118.852 256.031 cv
118.972 255.911 119.092 255.911 119.212 255.911 cv
119.212 255.911 119.332 255.911 119.452 255.911 cv
119.572 255.911 119.692 256.031 119.812 256.031 cv
125.572 258.551 li
123.172 252.671 li
123.052 252.551 123.052 252.431 123.052 252.311 cv
123.052 252.191 123.052 252.191 123.052 252.071 cv
123.052 251.951 123.052 251.951 123.052 251.831 cv
123.172 251.711 123.172 251.711 123.292 251.591 cv
123.772 251.111 li
123.892 250.991 li
124.012 250.991 li
124.132 250.991 124.132 250.991 124.252 250.991 cv
124.372 251.111 li
cp
f
136.372 267.431 mo
136.612 267.791 136.852 268.031 136.972 268.391 cv
137.092 268.751 137.212 268.991 137.212 269.351 cv
137.212 269.711 137.092 270.071 136.972 270.431 cv
136.732 270.791 136.492 271.031 136.132 271.391 cv
135.532 272.111 li
137.572 274.151 li
137.572 274.151 137.572 274.151 137.572 274.271 cv
137.572 274.271 137.572 274.271 137.572 274.391 cv
137.572 274.391 137.572 274.391 137.452 274.511 cv
137.332 274.631 li
137.212 274.751 137.212 274.871 137.092 274.871 cv
137.092 274.871 136.972 274.871 136.972 274.991 cv
136.852 274.991 li
136.852 274.991 136.852 274.991 136.732 274.871 cv
131.452 269.591 li
131.332 269.471 131.332 269.351 131.332 269.231 cv
131.332 269.231 131.332 269.111 131.452 268.991 cv
132.652 267.791 li
132.772 267.671 132.892 267.551 133.012 267.431 cv
133.132 267.311 133.372 267.191 133.492 267.071 cv
133.732 266.951 133.972 266.831 134.212 266.831 cv
134.452 266.711 134.692 266.711 134.932 266.711 cv
135.172 266.711 135.412 266.831 135.652 266.951 cv
135.892 267.071 136.132 267.191 136.372 267.431 cv
cp
135.652 268.271 mo
135.412 268.031 135.172 267.911 134.932 267.911 cv
134.692 267.791 134.452 267.791 134.212 267.791 cv
133.972 267.911 133.852 268.031 133.732 268.151 cv
133.492 268.151 133.372 268.391 133.252 268.511 cv
132.532 269.111 li
134.812 271.511 li
135.532 270.791 li
135.772 270.551 135.892 270.311 136.012 270.071 cv
136.132 269.951 136.132 269.711 136.132 269.471 cv
136.132 269.231 136.132 269.111 136.012 268.871 cv
135.892 268.631 135.772 268.511 135.652 268.271 cv
cp
145.612 265.751 mo
145.732 265.751 145.732 265.871 145.852 265.871 cv
145.852 265.991 li
145.852 266.111 li
145.732 266.231 145.732 266.231 145.612 266.351 cv
145.492 266.471 145.492 266.591 145.372 266.591 cv
145.252 266.711 li
145.132 266.711 145.132 266.711 145.132 266.711 cv
145.012 266.711 li
143.092 265.751 li
140.692 268.151 li
141.652 270.071 li
141.652 270.191 141.652 270.191 141.652 270.191 cv
141.652 270.311 141.652 270.311 141.532 270.431 cv
141.532 270.431 141.532 270.551 141.412 270.551 cv
141.292 270.671 141.292 270.791 141.172 270.791 cv
141.052 270.791 141.052 270.911 141.052 270.911 cv
140.932 270.911 140.932 270.791 140.932 270.791 cv
140.812 270.791 140.812 270.671 140.812 270.551 cv
137.332 263.351 li
137.332 263.231 li
137.332 263.111 li
137.452 263.111 137.452 262.991 137.452 262.991 cv
137.572 262.871 137.572 262.751 137.692 262.751 cv
137.812 262.631 137.932 262.511 137.932 262.511 cv
138.052 262.391 138.052 262.391 138.172 262.391 cv
138.172 262.271 138.172 262.271 138.292 262.271 cv
138.292 262.271 138.292 262.271 138.412 262.391 cv
cp
138.412 263.471 mo
138.412 263.471 li
140.332 267.311 li
142.372 265.391 li
cp
145.012 256.151 mo
145.132 256.271 li
145.252 256.391 li
145.252 256.511 li
145.252 256.511 145.252 256.511 145.132 256.631 cv
143.572 258.191 li
148.492 263.111 li
148.612 263.231 148.612 263.231 148.612 263.231 cv
148.612 263.351 li
148.492 263.351 148.492 263.471 148.492 263.471 cv
148.372 263.591 148.372 263.591 148.252 263.711 cv
148.132 263.831 li
148.012 263.951 148.012 263.951 148.012 263.951 cv
147.892 263.951 147.892 263.951 147.892 263.951 cv
147.772 263.951 147.772 263.951 147.772 263.951 cv
142.852 258.911 li
141.172 260.591 li
141.172 260.591 141.172 260.591 141.052 260.591 cv
141.052 260.591 li
140.932 260.591 140.932 260.591 140.932 260.591 cv
140.812 260.471 140.812 260.471 140.692 260.351 cv
140.692 260.351 140.572 260.351 140.572 260.231 cv
140.572 260.231 140.572 260.111 140.452 260.111 cv
140.452 259.991 li
140.452 259.991 140.572 259.991 140.572 259.871 cv
144.532 255.911 li
144.532 255.911 144.532 255.911 144.652 255.911 cv
144.652 255.911 144.652 255.911 144.772 255.911 cv
144.772 255.911 144.772 255.911 144.892 256.031 cv
144.892 256.031 144.892 256.031 145.012 256.151 cv
cp
155.332 256.391 mo
155.332 256.391 155.332 256.391 155.332 256.511 cv
155.332 256.511 155.332 256.511 155.332 256.631 cv
155.332 256.631 155.332 256.631 155.212 256.751 cv
155.092 256.871 li
154.972 256.991 154.972 256.991 154.852 257.111 cv
154.852 257.111 154.732 257.111 154.732 257.231 cv
154.612 257.231 li
154.612 257.231 154.612 257.231 154.492 257.111 cv
151.972 254.591 li
149.452 257.231 li
151.972 259.751 li
151.972 259.871 li
151.972 259.871 151.972 259.871 151.972 259.991 cv
151.972 259.991 151.972 259.991 151.852 260.111 cv
151.732 260.231 li
151.612 260.351 151.612 260.471 151.492 260.471 cv
151.492 260.471 151.372 260.471 151.372 260.591 cv
151.252 260.591 li
151.252 260.591 151.252 260.591 151.132 260.471 cv
145.732 255.071 li
145.612 254.951 145.612 254.951 145.612 254.951 cv
145.612 254.831 li
145.732 254.711 li
145.732 254.591 145.852 254.591 145.972 254.471 cv
146.092 254.351 li
146.212 254.231 146.212 254.231 146.212 254.231 cv
146.332 254.231 146.332 254.231 146.332 254.231 cv
146.452 254.231 li
148.732 256.511 li
151.372 253.991 li
149.092 251.591 li
148.972 251.591 148.972 251.591 148.972 251.591 cv
148.972 251.471 li
149.092 251.471 149.092 251.351 149.092 251.351 cv
149.092 251.231 149.212 251.231 149.332 251.111 cv
149.452 250.991 li
149.572 250.871 149.572 250.871 149.572 250.871 cv
149.692 250.871 149.692 250.871 149.692 250.871 cv
149.812 250.871 149.812 250.871 149.812 250.871 cv
cp
f
171.052 264.911 mo
171.052 264.911 171.052 265.031 171.172 265.031 cv
171.172 265.151 li
171.172 265.151 171.292 265.151 171.292 265.271 cv
171.292 265.271 171.292 265.271 171.292 265.391 cv
171.292 265.391 171.292 265.511 171.172 265.751 cv
171.172 265.871 171.172 265.991 171.052 266.231 cv
170.932 266.471 170.812 266.591 170.692 266.831 cv
170.572 267.071 170.332 267.311 170.212 267.551 cv
169.732 267.911 169.372 268.151 169.012 268.391 cv
168.532 268.511 168.052 268.631 167.692 268.511 cv
167.212 268.511 166.732 268.391 166.252 268.151 cv
165.772 267.911 165.292 267.551 164.812 267.071 cv
164.332 266.591 163.972 266.111 163.732 265.631 cv
163.492 265.151 163.372 264.671 163.372 264.191 cv
163.372 263.711 163.372 263.231 163.612 262.751 cv
163.732 262.391 163.972 261.911 164.332 261.551 cv
164.572 261.431 164.692 261.191 164.932 261.071 cv
165.052 260.951 165.292 260.831 165.412 260.831 cv
165.652 260.711 165.772 260.591 166.012 260.591 cv
166.132 260.591 166.252 260.591 166.372 260.591 cv
166.492 260.591 li
166.612 260.591 li
166.612 260.591 166.732 260.591 166.732 260.711 cv
166.732 260.711 166.852 260.711 166.852 260.831 cv
166.972 260.831 166.972 260.951 166.972 260.951 cv
167.092 261.071 167.092 261.071 167.092 261.071 cv
167.092 261.191 167.092 261.191 167.092 261.191 cv
167.092 261.311 li
166.972 261.311 166.972 261.311 166.852 261.431 cv
166.732 261.431 166.492 261.431 166.372 261.431 cv
166.132 261.551 165.892 261.551 165.772 261.671 cv
165.532 261.791 165.292 262.031 165.052 262.271 cv
164.812 262.511 164.572 262.751 164.452 263.111 cv
164.332 263.351 164.332 263.711 164.452 264.071 cv
164.452 264.431 164.572 264.791 164.812 265.151 cv
164.932 265.511 165.292 265.871 165.652 266.231 cv
166.012 266.591 166.372 266.831 166.732 267.071 cv
167.092 267.311 167.452 267.431 167.692 267.431 cv
168.052 267.431 168.412 267.431 168.772 267.311 cv
169.012 267.191 169.372 266.951 169.612 266.711 cv
169.852 266.471 169.972 266.231 170.092 266.111 cv
170.212 265.871 170.332 265.631 170.332 265.391 cv
170.452 265.271 170.452 265.031 170.452 264.911 cv
170.452 264.791 170.452 264.671 170.572 264.671 cv
170.572 264.671 li
170.692 264.671 170.692 264.671 170.692 264.671 cv
170.692 264.671 170.812 264.671 170.812 264.791 cv
170.932 264.791 170.932 264.791 171.052 264.911 cv
cp
175.852 260.111 mo
175.852 260.111 175.972 260.111 175.972 260.231 cv
175.972 260.231 175.972 260.231 176.092 260.351 cv
176.092 260.351 li
176.092 260.471 176.092 260.471 176.092 260.591 cv
176.092 260.591 176.092 260.711 176.092 260.831 cv
175.972 261.071 175.972 261.191 175.852 261.431 cv
175.732 261.551 175.732 261.791 175.492 262.031 cv
175.372 262.271 175.252 262.511 175.012 262.631 cv
174.652 262.991 174.172 263.351 173.812 263.471 cv
173.332 263.711 172.972 263.711 172.492 263.711 cv
172.012 263.711 171.532 263.591 171.052 263.351 cv
170.692 263.111 170.212 262.751 169.732 262.271 cv
169.252 261.791 168.892 261.311 168.652 260.831 cv
168.412 260.351 168.172 259.751 168.172 259.271 cv
168.172 258.791 168.172 258.431 168.412 257.951 cv
168.532 257.471 168.892 257.111 169.252 256.751 cv
169.372 256.511 169.612 256.391 169.732 256.271 cv
169.972 256.151 170.092 256.031 170.332 255.911 cv
170.452 255.911 170.692 255.791 170.812 255.791 cv
170.932 255.671 171.052 255.671 171.172 255.671 cv
171.292 255.671 171.292 255.671 171.292 255.671 cv
171.412 255.671 171.412 255.791 171.412 255.791 cv
171.532 255.791 171.532 255.791 171.532 255.791 cv
171.652 255.911 171.652 255.911 171.772 256.031 cv
171.772 256.031 171.772 256.031 171.892 256.151 cv
171.892 256.271 li
171.892 256.271 172.012 256.391 171.892 256.391 cv
171.892 256.391 li
171.892 256.511 171.772 256.511 171.652 256.511 cv
171.532 256.511 171.412 256.631 171.172 256.631 cv
170.932 256.631 170.812 256.751 170.572 256.871 cv
170.332 256.991 170.092 257.111 169.852 257.351 cv
169.612 257.591 169.372 257.951 169.372 258.191 cv
169.252 258.551 169.132 258.911 169.252 259.271 cv
169.252 259.511 169.372 259.871 169.612 260.351 cv
169.852 260.711 170.092 261.071 170.452 261.431 cv
170.812 261.791 171.172 262.031 171.532 262.271 cv
171.892 262.391 172.252 262.511 172.612 262.631 cv
172.972 262.631 173.212 262.631 173.572 262.511 cv
173.812 262.391 174.172 262.151 174.412 261.911 cv
174.652 261.671 174.772 261.431 174.892 261.191 cv
175.012 260.951 175.132 260.831 175.132 260.591 cv
175.252 260.351 175.252 260.231 175.252 260.111 cv
175.372 259.991 175.372 259.871 175.372 259.871 cv
175.492 259.751 li
175.492 259.751 175.492 259.751 175.492 259.871 cv
175.612 259.871 175.612 259.871 175.612 259.871 cv
175.732 259.991 175.732 259.991 175.852 260.111 cv
cp
180.652 255.191 mo
180.772 255.311 180.772 255.311 180.772 255.311 cv
180.892 255.431 180.892 255.431 180.892 255.431 cv
180.892 255.551 180.892 255.551 180.892 255.551 cv
180.892 255.671 li
180.892 255.791 180.892 255.911 180.892 256.031 cv
180.892 256.151 180.772 256.391 180.652 256.511 cv
180.652 256.751 180.532 256.991 180.412 257.231 cv
180.292 257.351 180.052 257.591 179.812 257.831 cv
179.452 258.191 179.092 258.431 178.612 258.671 cv
178.252 258.791 177.772 258.911 177.292 258.911 cv
176.932 258.791 176.452 258.671 175.972 258.431 cv
175.492 258.191 175.012 257.831 174.532 257.351 cv
174.052 256.871 173.692 256.391 173.452 255.911 cv
173.212 255.431 173.092 254.951 172.972 254.471 cv
172.972 253.991 173.092 253.511 173.212 253.151 cv
173.452 252.671 173.692 252.191 174.052 251.831 cv
174.172 251.711 174.412 251.591 174.532 251.471 cv
174.772 251.351 175.012 251.231 175.132 251.111 cv
175.372 250.991 175.492 250.991 175.612 250.871 cv
175.852 250.871 175.972 250.871 175.972 250.871 cv
176.092 250.871 176.212 250.871 176.212 250.871 cv
176.212 250.871 176.212 250.871 176.332 250.871 cv
176.332 250.991 176.332 250.991 176.452 250.991 cv
176.452 250.991 176.452 251.111 176.572 251.111 cv
176.572 251.231 176.692 251.231 176.692 251.351 cv
176.692 251.351 176.812 251.351 176.812 251.471 cv
176.812 251.471 li
176.812 251.591 176.812 251.591 176.692 251.591 cv
176.692 251.591 176.572 251.711 176.452 251.711 cv
176.332 251.711 176.212 251.711 175.972 251.831 cv
175.852 251.831 175.612 251.951 175.372 252.071 cv
175.132 252.191 174.892 252.311 174.652 252.551 cv
174.412 252.791 174.292 253.031 174.172 253.391 cv
174.052 253.751 174.052 253.991 174.052 254.351 cv
174.172 254.711 174.292 255.071 174.412 255.431 cv
174.652 255.791 174.892 256.151 175.252 256.511 cv
175.612 256.871 175.972 257.231 176.332 257.351 cv
176.692 257.591 177.052 257.711 177.412 257.711 cv
177.772 257.831 178.132 257.711 178.372 257.591 cv
178.732 257.471 178.972 257.351 179.212 257.111 cv
179.452 256.871 179.692 256.631 179.812 256.391 cv
179.932 256.151 179.932 255.911 180.052 255.791 cv
180.052 255.551 180.172 255.431 180.172 255.311 cv
180.172 255.191 180.172 255.071 180.292 254.951 cv
180.292 254.951 li
180.292 254.951 180.292 254.951 180.412 254.951 cv
180.412 254.951 180.412 255.071 180.532 255.071 cv
180.652 255.191 li
cp
f
190.372 272.471 mo
190.492 272.471 190.492 272.471 190.492 272.591 cv
190.492 272.591 190.492 272.591 190.492 272.711 cv
190.492 272.711 190.372 272.711 190.372 272.831 cv
190.372 272.831 190.252 272.951 190.132 272.951 cv
190.132 273.071 190.012 273.071 190.012 273.191 cv
189.892 273.191 189.892 273.191 189.892 273.311 cv
189.772 273.311 189.772 273.311 189.772 273.311 cv
189.772 273.311 189.652 273.311 189.652 273.191 cv
184.132 267.671 li
184.132 267.551 li
184.252 267.431 li
184.252 267.311 184.372 267.311 184.372 267.191 cv
184.492 267.191 184.492 267.071 184.612 267.071 cv
184.612 266.951 184.732 266.951 184.732 266.951 cv
184.852 266.951 li
184.852 266.951 184.852 266.951 184.972 266.951 cv
cp
196.132 266.351 mo
196.132 266.471 196.252 266.471 196.252 266.591 cv
196.252 266.711 li
196.252 266.831 196.252 266.831 196.252 266.951 cv
196.132 266.951 196.132 267.071 196.132 267.071 cv
195.892 267.311 li
195.772 267.431 195.652 267.431 195.652 267.551 cv
195.532 267.551 195.412 267.551 195.292 267.551 cv
195.292 267.551 195.172 267.551 195.052 267.551 cv
194.932 267.551 194.692 267.551 194.572 267.431 cv
189.532 265.991 li
189.292 265.871 189.052 265.751 188.692 265.631 cv
188.452 265.631 188.212 265.511 187.972 265.391 cv
188.212 265.631 188.332 265.871 188.572 266.111 cv
188.812 266.231 189.052 266.471 189.292 266.711 cv
192.772 270.191 li
192.772 270.311 192.772 270.311 192.772 270.311 cv
192.772 270.431 192.652 270.431 192.652 270.551 cv
192.532 270.671 li
192.412 270.791 192.292 270.791 192.292 270.911 cv
192.172 270.911 li
192.052 271.031 192.052 271.031 192.052 271.031 cv
192.052 270.911 191.932 270.911 191.932 270.911 cv
186.652 265.631 li
186.532 265.511 186.532 265.391 186.532 265.271 cv
186.532 265.151 186.532 265.031 186.652 265.031 cv
187.012 264.671 li
187.132 264.551 187.252 264.431 187.252 264.431 cv
187.372 264.431 187.492 264.311 187.492 264.311 cv
187.612 264.311 187.732 264.311 187.852 264.311 cv
187.852 264.311 187.972 264.431 188.212 264.431 cv
192.052 265.631 li
192.292 265.631 192.532 265.751 192.772 265.751 cv
192.892 265.871 193.132 265.991 193.372 265.991 cv
193.612 266.111 193.852 266.111 193.972 266.231 cv
194.212 266.351 194.452 266.351 194.572 266.471 cv
194.332 266.231 194.092 265.991 193.852 265.751 cv
193.612 265.511 193.372 265.271 193.132 265.031 cv
190.012 261.911 li
190.012 261.791 li
190.012 261.671 li
190.012 261.671 190.012 261.551 190.132 261.551 cv
190.132 261.431 190.252 261.431 190.252 261.311 cv
190.372 261.311 190.372 261.191 190.492 261.191 cv
190.492 261.071 190.612 261.071 190.612 261.071 cv
190.732 261.071 li
190.732 261.071 190.732 261.071 190.852 261.071 cv
cp
195.532 256.871 mo
195.532 256.871 195.652 256.871 195.652 256.991 cv
195.652 257.111 li
195.772 257.111 195.772 257.231 195.652 257.231 cv
195.652 257.231 195.652 257.231 195.652 257.351 cv
193.612 259.391 li
195.532 261.311 li
197.452 259.391 li
197.572 259.391 197.572 259.271 197.572 259.271 cv
197.692 259.271 li
197.812 259.391 li
197.932 259.511 li
198.052 259.631 198.052 259.631 198.052 259.631 cv
198.172 259.751 198.172 259.751 198.172 259.751 cv
198.172 259.871 198.172 259.871 198.172 259.871 cv
198.172 259.991 198.172 259.991 198.172 259.991 cv
196.132 262.031 li
198.532 264.311 li
198.532 264.431 198.532 264.431 198.532 264.431 cv
198.532 264.551 li
198.532 264.551 198.532 264.671 198.412 264.671 cv
198.412 264.791 198.412 264.791 198.292 264.911 cv
198.172 264.911 198.172 265.031 198.052 265.031 cv
198.052 265.151 198.052 265.151 197.932 265.151 cv
197.932 265.151 197.932 265.151 197.812 265.151 cv
197.812 265.151 li
192.412 259.871 li
192.292 259.751 192.292 259.631 192.292 259.511 cv
192.292 259.391 192.412 259.271 192.412 259.271 cv
195.052 256.631 li
195.172 256.631 195.172 256.631 195.172 256.631 cv
195.292 256.631 195.292 256.631 195.292 256.631 cv
195.412 256.751 195.412 256.751 195.532 256.871 cv
cp
204.052 253.271 mo
204.412 253.751 204.772 254.231 205.132 254.711 cv
205.372 255.191 205.492 255.671 205.492 256.151 cv
205.612 256.631 205.492 257.111 205.372 257.591 cv
205.132 258.071 204.772 258.431 204.412 258.911 cv
203.932 259.391 203.572 259.631 203.092 259.871 cv
202.612 259.991 202.132 260.111 201.772 260.111 cv
201.292 259.991 200.812 259.871 200.332 259.631 cv
199.852 259.391 199.492 258.911 199.012 258.551 cv
198.532 258.071 198.172 257.591 197.932 257.111 cv
197.692 256.631 197.452 256.151 197.452 255.671 cv
197.452 255.191 197.452 254.711 197.692 254.231 cv
197.812 253.751 198.172 253.271 198.652 252.911 cv
199.012 252.431 199.492 252.191 199.852 251.951 cv
200.332 251.831 200.812 251.711 201.292 251.711 cv
201.652 251.831 202.132 251.951 202.612 252.191 cv
203.092 252.431 203.572 252.791 204.052 253.271 cv
cp
203.212 254.111 mo
202.972 253.751 202.612 253.511 202.252 253.271 cv
201.892 253.031 201.532 252.911 201.292 252.911 cv
200.932 252.791 200.572 252.791 200.212 252.911 cv
199.852 253.031 199.492 253.271 199.252 253.631 cv
198.892 253.871 198.652 254.231 198.532 254.591 cv
198.412 254.951 198.412 255.311 198.532 255.671 cv
198.532 256.031 198.772 256.391 198.892 256.631 cv
199.132 256.991 199.372 257.351 199.732 257.591 cv
200.092 257.951 200.452 258.311 200.692 258.431 cv
201.052 258.671 201.412 258.911 201.772 258.911 cv
202.132 259.031 202.372 259.031 202.732 258.911 cv
203.092 258.791 203.452 258.551 203.812 258.191 cv
204.052 257.831 204.292 257.591 204.412 257.231 cv
204.532 256.871 204.532 256.511 204.412 256.151 cv
204.412 255.791 204.292 255.431 204.052 255.071 cv
203.812 254.711 203.572 254.471 203.212 254.111 cv
cp
f
217.972 270.551 mo
217.972 270.551 li
217.972 270.671 217.972 270.671 217.972 270.671 cv
217.972 270.791 217.972 270.791 217.852 270.911 cv
217.732 271.031 li
217.612 271.151 217.612 271.271 217.492 271.271 cv
217.372 271.391 li
217.252 271.391 li
217.252 271.391 217.132 271.391 217.132 271.271 cv
215.212 270.551 li
214.972 270.431 214.852 270.311 214.612 270.311 cv
214.372 270.191 214.252 270.191 214.012 270.191 cv
213.892 270.191 213.652 270.191 213.532 270.311 cv
213.292 270.311 213.172 270.431 212.932 270.671 cv
212.452 271.151 li
214.852 273.551 li
214.972 273.671 214.972 273.671 214.972 273.671 cv
214.972 273.791 li
214.852 273.791 214.852 273.911 214.852 273.911 cv
214.852 274.031 214.732 274.031 214.612 274.151 cv
214.492 274.271 li
214.372 274.271 214.372 274.391 214.372 274.391 cv
214.252 274.391 214.252 274.391 214.252 274.391 cv
214.132 274.391 li
208.852 268.991 li
208.732 268.991 208.612 268.871 208.732 268.751 cv
208.732 268.631 208.732 268.511 208.852 268.511 cv
210.052 267.191 li
210.172 267.071 210.292 266.951 210.412 266.831 cv
210.532 266.831 210.652 266.711 210.652 266.591 cv
210.892 266.471 211.252 266.351 211.492 266.231 cv
211.732 266.111 211.972 266.111 212.212 266.111 cv
212.452 266.111 212.692 266.231 212.932 266.351 cv
213.052 266.471 213.292 266.591 213.532 266.711 cv
213.652 266.951 213.892 267.191 214.012 267.311 cv
214.012 267.551 214.132 267.791 214.132 268.031 cv
214.132 268.151 214.132 268.391 214.132 268.631 cv
214.012 268.871 214.012 269.111 213.892 269.351 cv
214.012 269.231 214.132 269.231 214.252 269.231 cv
214.372 269.231 214.612 269.231 214.732 269.231 cv
214.852 269.231 214.972 269.231 215.212 269.351 cv
215.332 269.351 215.572 269.471 215.812 269.591 cv
217.492 270.311 li
217.732 270.311 217.852 270.431 217.852 270.431 cv
217.972 270.551 li
cp
212.812 267.671 mo
212.572 267.431 212.332 267.311 212.092 267.191 cv
211.852 267.191 211.492 267.191 211.252 267.431 cv
211.132 267.431 211.012 267.551 210.892 267.551 cv
210.892 267.671 210.652 267.791 210.532 267.911 cv
209.932 268.631 li
211.852 270.551 li
212.572 269.831 li
212.812 269.591 212.932 269.351 213.052 269.231 cv
213.172 268.991 213.172 268.871 213.172 268.631 cv
213.172 268.391 213.172 268.271 213.052 268.151 cv
213.052 267.911 212.932 267.791 212.812 267.671 cv
cp
223.252 264.911 mo
223.372 265.031 223.372 265.031 223.492 265.031 cv
223.492 265.151 223.492 265.151 223.492 265.151 cv
223.492 265.271 223.492 265.271 223.372 265.391 cv
223.372 265.391 223.252 265.511 223.252 265.631 cv
223.132 265.631 223.012 265.751 223.012 265.751 cv
222.892 265.871 222.892 265.871 222.892 265.871 cv
222.772 265.871 222.772 265.871 222.772 265.871 cv
222.652 265.871 222.652 265.871 222.652 265.871 cv
220.732 265.031 li
218.332 267.311 li
219.292 269.231 li
219.292 269.231 219.292 269.231 219.292 269.351 cv
219.292 269.351 219.292 269.351 219.292 269.471 cv
219.292 269.471 219.292 269.471 219.172 269.591 cv
219.172 269.591 219.052 269.711 219.052 269.831 cv
218.932 269.831 218.812 269.951 218.812 269.951 cv
218.692 270.071 218.692 270.071 218.572 270.071 cv
218.572 270.071 218.572 270.071 218.452 269.951 cv
218.452 269.951 218.452 269.831 218.332 269.831 cv
214.972 262.511 li
214.972 262.511 214.972 262.511 214.972 262.391 cv
214.972 262.391 214.972 262.391 214.972 262.271 cv
215.092 262.151 li
215.092 262.031 215.212 262.031 215.332 261.911 cv
215.452 261.791 215.452 261.791 215.572 261.671 cv
215.692 261.551 li
215.812 261.551 215.812 261.551 215.812 261.551 cv
215.932 261.551 215.932 261.551 216.052 261.551 cv
cp
216.052 262.751 mo
216.052 262.751 li
217.972 266.591 li
219.892 264.551 li
cp
227.452 259.631 mo
227.452 259.751 227.572 259.751 227.572 259.751 cv
227.572 259.871 227.572 259.871 227.692 259.871 cv
227.692 259.991 227.692 259.991 227.692 259.991 cv
227.692 260.111 li
227.692 260.231 227.692 260.351 227.692 260.471 cv
227.572 260.591 227.572 260.831 227.452 260.951 cv
227.332 261.191 227.212 261.431 227.092 261.671 cv
226.972 261.791 226.852 262.031 226.612 262.271 cv
226.252 262.631 225.772 262.871 225.412 263.111 cv
224.932 263.231 224.572 263.351 224.092 263.351 cv
223.612 263.231 223.132 263.111 222.652 262.871 cv
222.172 262.631 221.812 262.271 221.332 261.791 cv
220.852 261.431 220.492 260.831 220.252 260.351 cv
220.012 259.871 219.772 259.391 219.772 258.911 cv
219.772 258.431 219.772 257.951 220.012 257.591 cv
220.132 257.111 220.372 256.631 220.852 256.271 cv
220.972 256.151 221.092 256.031 221.332 255.911 cv
221.572 255.791 221.692 255.671 221.932 255.551 cv
222.052 255.431 222.292 255.431 222.412 255.431 cv
222.532 255.311 222.652 255.311 222.772 255.311 cv
222.892 255.311 222.892 255.311 222.892 255.311 cv
223.012 255.311 223.012 255.311 223.012 255.311 cv
223.132 255.431 223.132 255.431 223.132 255.431 cv
223.252 255.431 223.252 255.551 223.252 255.551 cv
223.372 255.671 223.372 255.671 223.492 255.791 cv
223.492 255.791 223.492 255.791 223.492 255.911 cv
223.492 255.911 223.492 255.911 223.492 256.031 cv
223.492 256.031 li
223.492 256.151 223.372 256.151 223.252 256.151 cv
223.132 256.151 222.892 256.151 222.772 256.271 cv
222.532 256.271 222.412 256.391 222.172 256.511 cv
221.932 256.631 221.692 256.751 221.452 256.991 cv
221.212 257.231 220.972 257.591 220.972 257.831 cv
220.852 258.191 220.732 258.431 220.852 258.791 cv
220.852 259.151 220.972 259.511 221.212 259.871 cv
221.452 260.231 221.692 260.591 222.052 260.951 cv
222.412 261.311 222.772 261.671 223.132 261.791 cv
223.492 262.031 223.852 262.151 224.212 262.151 cv
224.572 262.271 224.812 262.151 225.172 262.031 cv
225.412 262.031 225.772 261.791 226.012 261.551 cv
226.252 261.311 226.372 261.071 226.492 260.831 cv
226.612 260.591 226.732 260.351 226.732 260.231 cv
226.852 259.991 226.852 259.871 226.852 259.751 cv
226.852 259.631 226.972 259.511 226.972 259.391 cv
226.972 259.391 226.972 259.391 227.092 259.391 cv
227.092 259.391 li
227.212 259.391 227.212 259.511 227.212 259.511 cv
227.332 259.511 227.332 259.631 227.452 259.631 cv
cp
232.132 255.911 mo
232.132 256.031 232.252 256.031 232.252 256.151 cv
232.252 256.151 232.372 256.151 232.372 256.271 cv
232.372 256.271 232.372 256.271 232.372 256.391 cv
232.372 256.391 232.372 256.391 232.252 256.391 cv
229.492 259.151 li
229.492 259.271 229.372 259.271 229.252 259.271 cv
229.132 259.271 229.012 259.271 228.892 259.151 cv
223.852 253.991 li
223.732 253.871 223.612 253.871 223.732 253.751 cv
223.732 253.631 223.732 253.511 223.852 253.511 cv
226.492 250.751 li
226.612 250.751 226.612 250.751 226.612 250.631 cv
226.612 250.631 226.732 250.631 226.732 250.751 cv
226.852 250.751 li
226.972 250.871 li
227.092 250.991 227.092 250.991 227.092 251.111 cv
227.212 251.111 227.212 251.111 227.212 251.231 cv
227.212 251.231 li
227.212 251.351 227.212 251.351 227.212 251.351 cv
224.932 253.631 li
226.732 255.431 li
228.652 253.511 li
228.652 253.511 228.652 253.391 228.772 253.391 cv
228.772 253.391 li
228.892 253.511 228.892 253.511 229.012 253.511 cv
229.012 253.511 229.012 253.631 229.132 253.631 cv
229.132 253.751 229.252 253.751 229.252 253.751 cv
229.252 253.871 229.252 253.871 229.252 253.871 cv
229.372 253.991 229.372 253.991 229.252 253.991 cv
229.252 254.111 li
227.332 256.031 li
229.372 258.071 li
231.652 255.791 li
231.652 255.791 231.652 255.791 231.772 255.791 cv
231.772 255.791 231.772 255.791 231.892 255.791 cv
231.892 255.791 231.892 255.791 232.012 255.791 cv
232.012 255.911 232.132 255.911 232.132 255.911 cv
cp
f
244.132 262.031 mo
244.372 262.391 244.612 262.631 244.732 262.991 cv
244.972 263.351 244.972 263.591 244.972 263.951 cv
244.972 264.311 244.852 264.671 244.732 265.031 cv
244.492 265.391 244.252 265.751 243.892 266.111 cv
243.292 266.711 li
245.332 268.751 li
245.332 268.871 li
245.332 268.871 245.332 268.871 245.332 268.991 cv
245.332 268.991 245.332 268.991 245.212 269.111 cv
245.212 269.111 245.212 269.231 245.092 269.351 cv
244.972 269.351 244.972 269.471 244.852 269.471 cv
244.732 269.591 li
244.612 269.591 li
239.212 264.191 li
239.212 264.071 239.092 264.071 239.092 263.951 cv
239.092 263.831 239.212 263.711 239.212 263.591 cv
240.412 262.391 li
240.652 262.271 240.772 262.151 240.892 262.031 cv
241.012 261.911 241.132 261.791 241.372 261.671 cv
241.492 261.551 241.732 261.551 241.972 261.431 cv
242.212 261.311 242.452 261.311 242.692 261.311 cv
242.932 261.431 243.172 261.431 243.412 261.551 cv
243.652 261.671 243.892 261.911 244.132 262.031 cv
cp
243.412 262.991 mo
243.172 262.751 242.932 262.511 242.692 262.511 cv
242.452 262.391 242.212 262.391 241.972 262.511 cv
241.852 262.511 241.612 262.631 241.492 262.751 cv
241.372 262.871 241.132 262.991 241.012 263.111 cv
240.292 263.831 li
242.692 266.111 li
243.292 265.391 li
243.532 265.151 243.772 264.911 243.772 264.791 cv
243.892 264.551 243.892 264.311 243.892 264.071 cv
243.892 263.951 243.892 263.711 243.772 263.471 cv
243.652 263.351 243.532 263.111 243.412 262.991 cv
cp
248.812 257.351 mo
249.172 257.591 249.412 257.951 249.532 258.311 cv
249.652 258.551 249.652 258.911 249.652 259.271 cv
249.652 259.631 249.532 259.991 249.412 260.351 cv
249.292 260.591 248.932 260.951 248.572 261.311 cv
247.972 262.031 li
250.012 264.071 li
250.012 264.071 250.132 264.071 250.132 264.191 cv
250.132 264.191 250.132 264.191 250.012 264.191 cv
250.012 264.311 250.012 264.311 250.012 264.431 cv
249.892 264.431 249.892 264.551 249.772 264.551 cv
249.772 264.671 249.652 264.671 249.652 264.791 cv
249.532 264.791 249.532 264.791 249.412 264.791 cv
249.412 264.911 249.412 264.911 249.412 264.911 cv
249.292 264.911 249.292 264.791 249.292 264.791 cv
244.012 259.511 li
243.892 259.391 243.772 259.271 243.772 259.151 cv
243.892 259.031 243.892 259.031 244.012 258.911 cv
245.212 257.711 li
245.332 257.591 245.452 257.471 245.572 257.351 cv
245.692 257.231 245.812 257.111 246.052 256.991 cv
246.172 256.871 246.412 256.751 246.652 256.751 cv
246.892 256.631 247.252 256.631 247.492 256.631 cv
247.732 256.631 247.972 256.751 248.212 256.871 cv
248.452 256.991 248.692 257.111 248.812 257.351 cv
cp
248.092 258.191 mo
247.852 257.951 247.612 257.831 247.372 257.711 cv
247.132 257.711 246.892 257.711 246.772 257.711 cv
246.532 257.831 246.292 257.831 246.172 257.951 cv
246.052 258.071 245.932 258.191 245.812 258.311 cv
245.092 259.031 li
247.372 261.311 li
248.092 260.711 li
248.212 260.471 248.452 260.231 248.572 259.991 cv
248.572 259.751 248.692 259.631 248.692 259.391 cv
248.692 259.151 248.572 259.031 248.572 258.791 cv
248.452 258.551 248.332 258.431 248.092 258.191 cv
cp
258.172 255.671 mo
258.292 255.791 li
258.412 255.791 258.412 255.791 258.412 255.911 cv
258.412 255.911 258.412 256.031 258.292 256.031 cv
258.292 256.151 258.172 256.151 258.052 256.271 cv
258.052 256.391 257.932 256.391 257.932 256.511 cv
257.812 256.511 257.812 256.631 257.692 256.631 cv
257.692 256.631 257.692 256.631 257.572 256.631 cv
257.572 256.631 li
255.652 255.671 li
253.252 258.071 li
254.212 259.871 li
254.212 259.991 254.212 259.991 254.212 259.991 cv
254.212 260.111 254.212 260.111 254.212 260.111 cv
254.212 260.231 254.092 260.231 254.092 260.231 cv
254.092 260.351 253.972 260.351 253.852 260.471 cv
253.852 260.591 253.732 260.591 253.612 260.711 cv
253.612 260.711 253.612 260.711 253.492 260.711 cv
253.372 260.711 li
253.372 260.711 253.252 260.591 253.252 260.471 cv
249.892 253.271 li
249.892 253.151 li
249.892 253.031 li
249.892 252.911 249.892 252.911 250.012 252.791 cv
250.012 252.791 250.132 252.671 250.252 252.551 cv
250.252 252.551 250.372 252.431 250.492 252.431 cv
250.492 252.311 250.612 252.311 250.612 252.311 cv
250.612 252.191 250.732 252.191 250.732 252.191 cv
250.852 252.191 250.852 252.191 250.852 252.191 cv
cp
250.972 253.391 mo
250.972 253.391 li
252.772 257.231 li
254.812 255.311 li
cp
f
266.572 273.071 mo
266.572 273.191 266.572 273.191 266.572 273.191 cv
266.572 273.311 li
266.572 273.311 266.572 273.431 266.452 273.431 cv
266.452 273.551 266.452 273.551 266.332 273.671 cv
266.212 273.671 266.212 273.791 266.092 273.791 cv
266.092 273.911 266.092 273.911 265.972 273.911 cv
265.972 273.911 265.972 273.911 265.852 273.911 cv
265.852 273.911 li
263.332 271.391 li
260.692 273.911 li
263.212 276.431 li
263.212 276.551 263.212 276.551 263.212 276.551 cv
263.212 276.671 li
263.212 276.671 263.212 276.791 263.092 276.791 cv
263.092 276.911 263.092 276.911 262.972 277.031 cv
262.852 277.031 262.852 277.151 262.732 277.151 cv
262.732 277.271 262.612 277.271 262.612 277.271 cv
262.612 277.271 262.612 277.271 262.492 277.271 cv
262.492 277.271 li
256.972 271.751 li
256.972 271.751 256.852 271.751 256.852 271.631 cv
256.852 271.631 256.852 271.631 256.972 271.511 cv
256.972 271.511 256.972 271.511 256.972 271.391 cv
257.092 271.391 257.092 271.271 257.212 271.271 cv
257.212 271.151 257.332 271.151 257.332 271.031 cv
257.452 271.031 257.452 271.031 257.572 270.911 cv
257.572 270.911 li
257.692 270.911 257.692 270.911 257.692 271.031 cv
259.972 273.311 li
262.612 270.671 li
260.332 268.391 li
260.332 268.271 li
260.212 268.271 260.332 268.271 260.332 268.151 cv
260.332 268.151 260.332 268.151 260.332 268.031 cv
260.452 268.031 260.452 267.911 260.572 267.911 cv
260.572 267.791 260.692 267.671 260.692 267.671 cv
260.812 267.671 260.812 267.671 260.932 267.551 cv
260.932 267.551 260.932 267.551 261.052 267.551 cv
261.052 267.551 261.052 267.551 261.052 267.671 cv
cp
272.212 267.071 mo
272.332 267.191 272.452 267.191 272.452 267.191 cv
272.452 267.311 272.572 267.311 272.572 267.311 cv
272.572 267.431 272.452 267.431 272.452 267.551 cv
272.452 267.551 272.332 267.671 272.212 267.791 cv
272.092 267.791 272.092 267.911 271.972 267.911 cv
271.972 268.031 271.852 268.031 271.852 268.031 cv
271.732 268.031 li
271.732 268.031 271.732 268.031 271.612 268.031 cv
269.812 267.191 li
267.412 269.471 li
268.252 271.391 li
268.252 271.391 268.372 271.391 268.372 271.511 cv
268.372 271.511 268.372 271.511 268.252 271.631 cv
268.252 271.631 268.252 271.631 268.252 271.751 cv
268.132 271.751 268.132 271.871 268.012 271.991 cv
267.892 271.991 267.892 272.111 267.772 272.111 cv
267.772 272.231 267.652 272.231 267.652 272.231 cv
267.652 272.231 267.532 272.231 267.532 272.111 cv
267.532 272.111 267.412 272.111 267.412 271.991 cv
264.052 264.671 li
263.932 264.671 263.932 264.671 263.932 264.551 cv
263.932 264.551 263.932 264.551 264.052 264.431 cv
264.052 264.431 264.052 264.311 264.172 264.311 cv
264.172 264.191 264.292 264.191 264.292 264.071 cv
264.412 263.951 264.532 263.951 264.532 263.831 cv
264.652 263.831 264.652 263.711 264.772 263.711 cv
264.892 263.711 li
265.012 263.711 li
cp
265.132 264.911 mo
265.132 264.911 li
266.932 268.751 li
268.972 266.711 li
cp
277.492 261.791 mo
277.492 261.911 277.612 261.911 277.612 262.031 cv
277.612 262.151 li
277.612 262.271 277.612 262.271 277.612 262.391 cv
277.492 262.391 277.492 262.391 277.492 262.511 cv
277.252 262.751 li
277.132 262.871 277.012 262.871 277.012 262.871 cv
276.892 262.991 276.772 262.991 276.772 262.991 cv
276.652 262.991 276.532 262.991 276.412 262.991 cv
276.292 262.991 276.052 262.991 275.932 262.871 cv
270.892 261.311 li
270.652 261.311 270.412 261.191 270.172 261.071 cv
269.812 261.071 269.572 260.951 269.332 260.831 cv
269.572 261.071 269.692 261.311 269.932 261.431 cv
270.172 261.671 270.412 261.911 270.652 262.151 cv
274.132 265.631 li
274.132 265.751 274.132 265.751 274.132 265.751 cv
274.132 265.871 274.012 265.871 274.012 265.871 cv
274.012 265.991 273.892 265.991 273.892 266.111 cv
273.772 266.231 273.772 266.231 273.652 266.351 cv
273.532 266.351 li
273.412 266.351 li
273.412 266.351 273.412 266.351 273.292 266.351 cv
268.012 261.071 li
267.892 260.951 267.892 260.831 267.892 260.711 cv
267.892 260.591 268.012 260.471 268.012 260.471 cv
268.372 259.991 li
268.492 259.991 268.612 259.871 268.612 259.871 cv
268.732 259.751 268.852 259.751 268.852 259.751 cv
268.972 259.751 269.092 259.751 269.212 259.751 cv
269.332 259.751 269.452 259.871 269.572 259.871 cv
273.412 261.071 li
273.652 261.071 273.892 261.191 274.132 261.191 cv
274.252 261.311 274.492 261.431 274.732 261.431 cv
274.972 261.551 275.212 261.551 275.332 261.671 cv
275.572 261.671 275.812 261.791 276.052 261.911 cv
275.812 261.671 275.572 261.431 275.212 261.191 cv
274.972 260.831 274.732 260.591 274.492 260.351 cv
271.372 257.351 li
271.372 257.231 271.372 257.231 271.372 257.231 cv
271.372 257.111 li
271.492 256.991 li
271.492 256.871 271.612 256.871 271.612 256.751 cv
271.732 256.751 271.852 256.631 271.852 256.631 cv
271.852 256.511 271.972 256.511 271.972 256.511 cv
272.092 256.511 272.092 256.511 272.092 256.511 cv
272.212 256.511 li
cp
280.852 253.151 mo
281.332 253.631 281.692 254.231 281.932 254.711 cv
282.172 255.191 282.292 255.671 282.292 256.151 cv
282.292 256.631 282.172 257.111 281.932 257.591 cv
281.692 258.071 281.332 258.551 280.852 259.031 cv
279.652 260.231 li
279.652 260.351 279.532 260.351 279.412 260.351 cv
279.292 260.351 279.172 260.351 279.052 260.231 cv
274.012 255.071 li
273.892 254.951 273.772 254.951 273.772 254.831 cv
273.772 254.711 273.892 254.591 273.892 254.471 cv
275.212 253.271 li
275.692 252.791 276.172 252.431 276.652 252.191 cv
277.132 251.951 277.612 251.831 278.092 251.831 cv
278.572 251.831 279.052 251.951 279.532 252.191 cv
280.012 252.431 280.372 252.791 280.852 253.151 cv
cp
280.012 253.991 mo
279.772 253.751 279.412 253.511 279.052 253.271 cv
278.692 253.031 278.332 252.911 277.972 252.911 cv
277.612 252.911 277.252 252.911 276.892 253.151 cv
276.532 253.271 276.172 253.511 275.812 253.871 cv
275.092 254.711 li
279.532 259.151 li
280.252 258.311 li
280.612 257.951 280.972 257.591 281.092 257.351 cv
281.212 256.991 281.332 256.631 281.332 256.271 cv
281.212 255.911 281.212 255.551 280.972 255.191 cv
280.732 254.831 280.492 254.471 280.012 253.991 cv
cp
f
304.612 256.751 mo
304.972 257.111 305.212 257.471 305.332 257.831 cv
305.572 258.191 305.572 258.551 305.572 258.911 cv
305.572 259.271 305.572 259.631 305.332 259.991 cv
305.212 260.351 304.972 260.711 304.612 261.071 cv
304.252 261.431 303.892 261.671 303.532 261.791 cv
303.172 262.031 302.812 262.151 302.452 262.151 cv
302.092 262.151 301.732 262.031 301.372 261.911 cv
301.012 261.671 300.652 261.431 300.292 261.071 cv
296.812 257.471 li
296.692 257.471 296.692 257.471 296.692 257.471 cv
296.692 257.351 li
296.812 257.351 296.812 257.231 296.812 257.231 cv
296.812 257.111 296.932 257.111 297.052 256.991 cv
297.052 256.871 297.172 256.871 297.172 256.871 cv
297.292 256.751 297.292 256.751 297.292 256.751 cv
297.412 256.751 297.412 256.751 297.412 256.751 cv
297.532 256.751 297.532 256.751 297.532 256.751 cv
301.012 260.231 li
301.252 260.471 301.492 260.711 301.732 260.831 cv
302.092 260.951 302.332 261.071 302.572 261.071 cv
302.812 261.071 303.052 260.951 303.292 260.951 cv
303.532 260.831 303.772 260.591 304.012 260.471 cv
304.252 260.231 304.372 259.991 304.492 259.751 cv
304.612 259.511 304.612 259.271 304.612 259.031 cv
304.612 258.791 304.492 258.431 304.372 258.191 cv
304.252 257.951 304.132 257.711 303.772 257.471 cv
300.292 253.991 li
300.292 253.871 li
300.292 253.871 300.292 253.871 300.292 253.751 cv
300.412 253.631 li
300.412 253.631 300.532 253.511 300.532 253.391 cv
300.652 253.391 300.652 253.271 300.772 253.271 cv
300.892 253.151 li
301.012 253.151 li
301.012 253.151 301.012 253.151 301.132 253.151 cv
cp
308.812 256.391 mo
308.812 256.511 308.932 256.511 308.932 256.511 cv
308.932 256.511 308.932 256.631 308.812 256.631 cv
308.812 256.751 li
308.692 256.871 308.692 256.871 308.572 256.991 cv
308.452 257.111 li
308.332 257.231 308.332 257.231 308.212 257.231 cv
308.212 257.231 li
308.092 257.231 308.092 257.231 308.092 257.231 cv
302.572 251.711 li
302.572 251.711 302.572 251.711 302.572 251.591 cv
302.572 251.591 302.572 251.591 302.572 251.471 cv
302.572 251.471 302.572 251.471 302.692 251.351 cv
302.812 251.231 li
302.932 251.111 302.932 251.111 303.052 250.991 cv
303.052 250.991 303.172 250.991 303.172 250.871 cv
303.292 250.871 li
303.292 250.871 303.292 250.871 303.292 250.991 cv
cp
f
324.172 266.711 mo
324.172 266.711 324.172 266.711 324.172 266.831 cv
324.172 266.831 324.172 266.831 324.172 266.951 cv
324.172 266.951 324.172 266.951 324.172 267.071 cv
324.052 267.071 324.052 267.191 323.932 267.191 cv
323.812 267.311 323.812 267.311 323.692 267.431 cv
323.692 267.431 323.692 267.431 323.572 267.551 cv
323.572 267.551 323.572 267.551 323.452 267.551 cv
323.452 267.551 323.452 267.551 323.452 267.431 cv
317.932 262.031 li
317.932 261.911 317.932 261.911 317.932 261.911 cv
317.812 261.911 317.932 261.791 317.932 261.791 cv
317.932 261.791 317.932 261.671 318.052 261.671 cv
318.052 261.551 318.052 261.551 318.172 261.431 cv
318.292 261.311 li
318.412 261.191 318.412 261.191 318.532 261.191 cv
318.532 261.191 318.532 261.191 318.652 261.191 cv
318.652 261.191 li
cp
329.812 260.591 mo
329.932 260.711 329.932 260.711 329.932 260.831 cv
330.052 260.831 330.052 260.951 330.052 260.951 cv
329.932 261.071 329.932 261.071 329.932 261.191 cv
329.932 261.191 329.932 261.311 329.812 261.311 cv
329.572 261.551 li
329.572 261.671 329.452 261.671 329.332 261.791 cv
329.332 261.791 329.212 261.791 329.092 261.791 cv
328.972 261.791 328.852 261.791 328.732 261.791 cv
328.612 261.791 328.492 261.791 328.372 261.671 cv
323.332 260.231 li
323.092 260.111 322.732 259.991 322.492 259.871 cv
322.252 259.871 322.012 259.751 321.652 259.631 cv
321.892 259.871 322.132 260.111 322.372 260.351 cv
322.612 260.471 322.852 260.711 322.972 260.951 cv
326.452 264.431 li
326.452 264.431 326.572 264.431 326.572 264.551 cv
326.572 264.551 326.572 264.551 326.452 264.551 cv
326.452 264.671 326.452 264.671 326.452 264.791 cv
326.332 264.791 326.332 264.911 326.212 264.911 cv
326.212 265.031 326.092 265.031 326.092 265.151 cv
325.972 265.151 325.972 265.151 325.852 265.151 cv
325.852 265.271 325.852 265.271 325.852 265.271 cv
325.732 265.151 325.732 265.151 325.732 265.151 cv
320.452 259.871 li
320.332 259.751 320.212 259.631 320.332 259.511 cv
320.332 259.391 320.332 259.271 320.452 259.271 cv
320.812 258.911 li
320.932 258.791 320.932 258.671 321.052 258.671 cv
321.172 258.671 321.172 258.551 321.292 258.551 cv
321.412 258.551 321.412 258.551 321.532 258.551 cv
321.652 258.551 321.772 258.671 321.892 258.671 cv
325.732 259.871 li
325.972 259.871 326.212 259.991 326.452 260.111 cv
326.692 260.111 326.932 260.231 327.172 260.231 cv
327.292 260.351 327.532 260.351 327.772 260.471 cv
328.012 260.591 328.132 260.591 328.372 260.711 cv
328.132 260.471 327.892 260.231 327.652 259.991 cv
327.412 259.751 327.172 259.511 326.932 259.271 cv
323.812 256.151 li
323.812 256.031 li
323.812 256.031 323.812 256.031 323.812 255.911 cv
323.812 255.791 li
323.932 255.671 323.932 255.671 324.052 255.551 cv
324.172 255.551 324.172 255.431 324.292 255.431 cv
324.292 255.431 324.292 255.311 324.412 255.311 cv
324.412 255.311 324.412 255.311 324.532 255.311 cv
324.532 255.311 li
cp
329.812 250.511 mo
329.932 250.511 329.932 250.631 329.932 250.631 cv
330.052 250.631 330.052 250.751 330.052 250.751 cv
330.052 250.871 li
330.052 250.991 li
328.372 252.551 li
333.412 257.591 li
333.412 257.711 li
333.292 257.831 li
333.292 257.951 333.172 257.951 333.172 258.071 cv
333.052 258.191 332.932 258.191 332.932 258.191 cv
332.812 258.311 332.812 258.311 332.812 258.311 cv
332.692 258.311 332.692 258.311 332.692 258.311 cv
332.572 258.311 li
327.652 253.271 li
325.972 254.951 li
325.852 254.951 325.852 254.951 325.852 254.951 cv
325.732 254.951 325.732 254.951 325.732 254.951 cv
325.612 254.831 325.612 254.831 325.492 254.831 cv
325.492 254.711 325.492 254.711 325.372 254.591 cv
325.372 254.471 li
325.372 254.471 325.252 254.351 325.372 254.351 cv
325.372 254.351 li
329.332 250.271 li
329.452 250.271 li
329.452 250.271 329.452 250.271 329.572 250.271 cv
329.572 250.271 329.572 250.271 329.692 250.391 cv
329.692 250.391 329.812 250.391 329.812 250.511 cv
cp
f
347.452 268.991 mo
347.572 268.991 347.572 268.991 347.572 269.111 cv
347.572 269.111 347.572 269.111 347.572 269.231 cv
347.452 269.231 347.452 269.231 347.452 269.351 cv
347.332 269.351 347.332 269.471 347.212 269.471 cv
347.212 269.591 347.092 269.591 347.092 269.711 cv
346.972 269.711 346.972 269.711 346.972 269.831 cv
346.852 269.831 346.852 269.831 346.852 269.831 cv
346.732 269.831 346.732 269.831 346.732 269.711 cv
341.212 264.311 li
341.212 264.191 341.212 264.191 341.212 264.191 cv
341.212 264.071 li
341.212 264.071 341.212 263.951 341.332 263.951 cv
341.332 263.831 341.452 263.831 341.452 263.711 cv
341.572 263.711 341.572 263.591 341.692 263.591 cv
341.692 263.471 341.812 263.471 341.812 263.471 cv
341.932 263.471 li
cp
353.212 262.991 mo
353.212 262.991 353.212 262.991 353.332 263.111 cv
353.332 263.231 353.332 263.231 353.332 263.351 cv
353.332 263.351 353.332 263.351 353.212 263.471 cv
353.212 263.591 li
352.852 263.831 li
352.852 263.951 352.732 263.951 352.612 264.071 cv
352.612 264.071 352.492 264.071 352.372 264.071 cv
352.372 264.071 352.252 264.071 352.132 264.071 cv
351.892 264.071 351.772 264.071 351.652 263.951 cv
346.612 262.511 li
346.372 262.391 346.132 262.271 345.772 262.271 cv
345.532 262.151 345.292 262.031 345.052 261.911 cv
345.172 262.151 345.412 262.391 345.652 262.631 cv
345.892 262.751 346.132 262.991 346.372 263.231 cv
349.732 266.711 li
349.852 266.711 349.852 266.711 349.852 266.831 cv
349.852 266.831 li
349.852 266.951 349.732 266.951 349.732 267.071 cv
349.732 267.071 349.612 267.191 349.492 267.191 cv
349.492 267.311 349.372 267.311 349.372 267.431 cv
349.252 267.431 349.252 267.431 349.252 267.431 cv
349.132 267.551 349.132 267.551 349.132 267.551 cv
349.012 267.431 li
343.732 262.151 li
343.612 262.031 343.612 261.911 343.612 261.791 cv
343.612 261.671 343.612 261.551 343.732 261.551 cv
344.092 261.191 li
344.212 261.071 344.332 260.951 344.332 260.951 cv
344.452 260.951 344.452 260.831 344.572 260.831 cv
344.692 260.831 344.812 260.831 344.812 260.831 cv
344.932 260.831 345.052 260.951 345.172 260.951 cv
349.132 262.151 li
349.372 262.151 349.612 262.271 349.732 262.391 cv
349.972 262.391 350.212 262.511 350.452 262.511 cv
350.692 262.631 350.812 262.631 351.052 262.751 cv
351.292 262.871 351.532 262.871 351.652 262.991 cv
351.412 262.751 351.172 262.511 350.932 262.271 cv
350.692 262.031 350.452 261.791 350.212 261.551 cv
347.092 258.431 li
347.092 258.311 li
347.092 258.311 347.092 258.311 347.092 258.191 cv
347.092 258.191 347.092 258.071 347.212 258.071 cv
347.212 258.071 347.332 257.951 347.332 257.831 cv
347.452 257.831 347.452 257.711 347.572 257.711 cv
347.692 257.591 li
347.812 257.591 li
cp
355.612 260.951 mo
355.612 260.951 li
355.612 261.071 li
355.612 261.071 355.612 261.191 355.492 261.191 cv
355.492 261.311 355.372 261.311 355.372 261.431 cv
355.252 261.431 355.252 261.551 355.132 261.551 cv
355.132 261.671 355.012 261.671 355.012 261.671 cv
354.892 261.671 li
349.372 256.151 li
349.252 256.151 349.252 256.151 349.252 256.031 cv
349.252 256.031 349.252 256.031 349.372 255.911 cv
349.372 255.911 349.372 255.911 349.372 255.791 cv
349.492 255.791 349.492 255.671 349.612 255.671 cv
349.612 255.551 349.732 255.551 349.732 255.431 cv
349.852 255.431 349.852 255.431 349.852 255.311 cv
349.972 255.311 349.972 255.311 349.972 255.311 cv
350.092 255.311 350.092 255.311 350.092 255.431 cv
cp
355.492 250.511 mo
355.492 250.511 355.492 250.631 355.612 250.631 cv
355.612 250.751 li
355.612 250.871 li
355.612 250.871 355.612 250.871 355.612 250.991 cv
354.052 252.551 li
358.972 257.471 li
358.972 257.591 358.972 257.591 358.972 257.591 cv
358.972 257.711 li
358.972 257.711 358.972 257.831 358.852 257.831 cv
358.852 257.951 358.852 257.951 358.732 258.071 cv
358.612 258.071 358.612 258.191 358.492 258.191 cv
358.492 258.311 358.372 258.311 358.372 258.311 cv
358.252 258.311 li
353.212 253.271 li
351.652 254.951 li
351.532 254.951 li
351.412 254.951 li
351.412 254.951 351.412 254.951 351.292 254.951 cv
351.292 254.831 351.172 254.831 351.172 254.711 cv
351.052 254.711 351.052 254.711 351.052 254.591 cv
350.932 254.591 350.932 254.471 350.932 254.471 cv
350.932 254.351 li
350.932 254.351 350.932 254.351 350.932 254.231 cv
355.012 250.271 li
355.132 250.271 li
355.132 250.271 355.252 250.271 355.252 250.391 cv
355.372 250.391 355.372 250.391 355.492 250.511 cv
cp
f
377.452 264.551 mo
377.452 264.671 377.572 264.671 377.572 264.671 cv
377.572 264.791 li
377.452 264.791 377.452 264.911 377.452 264.911 cv
377.332 265.031 377.332 265.031 377.212 265.151 cv
377.092 265.271 377.092 265.271 376.972 265.391 cv
376.972 265.391 376.972 265.391 376.852 265.391 cv
376.732 265.391 li
376.612 265.391 li
374.692 264.551 li
374.572 264.431 374.332 264.431 374.092 264.311 cv
373.972 264.311 373.732 264.191 373.612 264.191 cv
373.372 264.191 373.132 264.311 373.012 264.311 cv
372.892 264.431 372.652 264.551 372.532 264.671 cv
371.932 265.271 li
374.452 267.671 li
374.452 267.671 374.452 267.671 374.452 267.791 cv
374.452 267.791 374.452 267.791 374.452 267.911 cv
374.452 267.911 374.452 267.911 374.332 268.031 cv
374.212 268.151 li
374.092 268.271 374.092 268.271 373.972 268.391 cv
373.972 268.391 373.852 268.391 373.852 268.511 cv
373.732 268.511 li
373.732 268.511 373.732 268.511 373.612 268.391 cv
368.332 263.111 li
368.212 262.991 368.212 262.871 368.212 262.751 cv
368.212 262.631 368.212 262.631 368.332 262.511 cv
369.532 261.311 li
369.652 261.191 369.772 261.071 369.892 260.951 cv
370.012 260.831 370.132 260.831 370.252 260.711 cv
370.492 260.591 370.732 260.351 370.972 260.351 cv
371.212 260.231 371.452 260.231 371.692 260.231 cv
371.932 260.231 372.172 260.231 372.412 260.351 cv
372.652 260.471 372.892 260.591 373.012 260.831 cv
373.252 261.071 373.372 261.191 373.492 261.431 cv
373.612 261.671 373.612 261.791 373.612 262.031 cv
373.612 262.271 373.612 262.511 373.612 262.751 cv
373.612 262.991 373.492 263.111 373.372 263.351 cv
373.492 263.351 373.612 263.351 373.732 263.231 cv
373.972 263.231 374.092 263.231 374.212 263.351 cv
374.332 263.351 374.572 263.351 374.692 263.471 cv
374.932 263.471 375.052 263.591 375.292 263.591 cv
377.092 264.431 li
377.212 264.431 377.332 264.551 377.332 264.551 cv
377.452 264.551 377.452 264.551 377.452 264.551 cv
cp
372.292 261.671 mo
372.052 261.551 371.812 261.311 371.572 261.311 cv
371.332 261.311 371.092 261.311 370.732 261.431 cv
370.612 261.551 370.612 261.551 370.492 261.671 cv
370.372 261.791 370.252 261.911 370.132 262.031 cv
369.412 262.631 li
371.332 264.671 li
372.052 263.831 li
372.292 263.711 372.412 263.471 372.532 263.231 cv
372.652 263.111 372.652 262.871 372.772 262.751 cv
372.772 262.511 372.652 262.391 372.652 262.151 cv
372.532 262.031 372.412 261.911 372.292 261.671 cv
cp
381.652 260.111 mo
381.652 260.111 381.652 260.231 381.772 260.231 cv
381.772 260.351 li
381.772 260.471 li
381.772 260.471 381.772 260.471 381.772 260.591 cv
379.012 263.351 li
378.892 263.351 378.892 263.471 378.772 263.471 cv
378.652 263.471 378.532 263.351 378.412 263.231 cv
373.252 258.191 li
373.252 258.071 373.132 257.951 373.132 257.831 cv
373.132 257.711 373.252 257.591 373.252 257.591 cv
376.012 254.831 li
376.012 254.831 376.012 254.831 376.132 254.831 cv
376.132 254.831 li
376.252 254.831 376.252 254.831 376.372 254.831 cv
376.372 254.951 376.372 254.951 376.492 255.071 cv
376.492 255.071 376.612 255.071 376.612 255.191 cv
376.612 255.191 376.612 255.311 376.732 255.311 cv
376.732 255.311 376.732 255.311 376.732 255.431 cv
376.612 255.431 li
374.452 257.711 li
376.252 259.511 li
378.172 257.591 li
378.292 257.591 378.292 257.591 378.292 257.591 cv
378.412 257.591 li
378.532 257.711 378.532 257.711 378.532 257.711 cv
378.652 257.831 378.652 257.831 378.772 257.951 cv
378.772 257.951 378.772 257.951 378.772 258.071 cv
378.772 258.071 378.772 258.071 378.772 258.191 cv
378.772 258.191 li
376.852 260.111 li
378.892 262.151 li
381.172 259.871 li
381.292 259.871 381.292 259.871 381.292 259.871 cv
381.412 259.871 381.412 259.871 381.412 259.991 cv
381.532 259.991 381.532 259.991 381.652 260.111 cv
cp
384.532 254.591 mo
384.772 254.831 385.012 255.071 385.132 255.431 cv
385.252 255.671 385.252 256.031 385.252 256.391 cv
385.252 256.631 385.132 256.991 385.012 257.351 cv
384.772 257.591 384.532 257.951 384.292 258.191 cv
384.052 258.431 383.932 258.551 383.692 258.671 cv
383.572 258.791 383.332 258.911 383.212 259.031 cv
382.972 259.031 382.852 259.151 382.732 259.151 cv
382.612 259.151 382.492 259.271 382.372 259.271 cv
382.372 259.271 382.252 259.151 382.132 259.151 cv
382.132 259.151 382.012 259.031 381.892 258.911 cv
381.772 258.791 li
381.772 258.791 381.772 258.671 381.652 258.671 cv
381.652 258.551 li
381.652 258.551 381.652 258.551 381.772 258.431 cv
381.772 258.431 381.892 258.431 382.012 258.431 cv
382.132 258.311 382.252 258.311 382.492 258.311 cv
382.612 258.191 382.852 258.071 383.092 257.951 cv
383.212 257.831 383.452 257.711 383.692 257.471 cv
383.812 257.351 383.932 257.111 384.052 256.991 cv
384.172 256.751 384.172 256.631 384.292 256.391 cv
384.292 256.271 384.292 256.031 384.172 255.911 cv
384.052 255.791 384.052 255.551 383.812 255.431 cv
383.692 255.311 383.452 255.191 383.332 255.071 cv
383.092 255.071 382.972 255.071 382.732 255.071 cv
382.492 255.191 382.252 255.191 382.012 255.311 cv
381.892 255.311 381.652 255.431 381.412 255.551 cv
381.172 255.671 380.932 255.671 380.692 255.791 cv
380.452 255.791 380.212 255.911 379.972 255.911 cv
379.612 255.791 379.372 255.791 379.132 255.671 cv
378.892 255.671 378.652 255.431 378.412 255.191 cv
378.172 254.951 378.052 254.711 377.932 254.471 cv
377.812 254.231 377.812 253.871 377.812 253.631 cv
377.932 253.391 377.932 253.031 378.172 252.791 cv
378.292 252.551 378.412 252.191 378.652 251.951 cv
378.892 251.831 379.012 251.711 379.132 251.591 cv
379.252 251.471 379.372 251.471 379.612 251.351 cv
379.732 251.231 379.852 251.231 379.972 251.231 cv
380.092 251.111 380.212 251.111 380.332 251.111 cv
380.332 251.111 380.332 251.111 380.452 251.111 cv
380.452 251.111 li
380.572 251.231 380.572 251.231 380.572 251.231 cv
380.692 251.231 380.692 251.351 380.692 251.351 cv
380.812 251.471 380.812 251.471 380.932 251.471 cv
380.932 251.591 380.932 251.591 380.932 251.591 cv
380.932 251.711 380.932 251.711 380.932 251.711 cv
380.932 251.831 380.932 251.831 380.932 251.831 cv
380.932 251.831 380.812 251.831 380.692 251.951 cv
380.572 251.951 380.452 251.951 380.332 252.071 cv
380.212 252.071 379.972 252.191 379.852 252.191 cv
379.612 252.311 379.492 252.431 379.372 252.671 cv
379.132 252.791 379.012 252.911 379.012 253.151 cv
378.892 253.271 378.892 253.391 378.892 253.631 cv
378.892 253.751 378.892 253.871 378.892 253.991 cv
379.012 254.111 379.012 254.231 379.132 254.351 cv
379.372 254.591 379.492 254.591 379.732 254.711 cv
379.852 254.711 380.092 254.711 380.332 254.711 cv
380.452 254.711 380.692 254.591 380.932 254.471 cv
381.172 254.471 381.412 254.351 381.652 254.231 cv
381.892 254.231 382.132 254.111 382.372 253.991 cv
382.612 253.991 382.852 253.871 383.092 253.871 cv
383.332 253.871 383.572 253.991 383.812 254.111 cv
384.052 254.111 384.292 254.351 384.532 254.591 cv
cp
f
397.492 269.831 mo
397.612 269.951 li
397.612 270.071 397.612 270.071 397.612 270.191 cv
397.612 270.311 li
397.492 270.431 397.492 270.431 397.492 270.431 cv
397.252 270.671 li
397.132 270.791 397.012 270.911 397.012 270.911 cv
396.892 270.911 396.772 271.031 396.772 271.031 cv
396.652 271.031 396.532 271.031 396.412 271.031 cv
396.292 270.911 396.172 270.911 395.932 270.911 cv
390.892 269.351 li
390.652 269.231 390.412 269.231 390.172 269.111 cv
389.812 268.991 389.572 268.871 389.332 268.871 cv
389.572 268.991 389.812 269.231 389.932 269.471 cv
390.172 269.711 390.412 269.951 390.652 270.071 cv
394.132 273.551 li
394.132 273.671 li
394.132 273.671 394.132 273.671 394.132 273.791 cv
394.132 273.791 394.132 273.911 394.012 273.911 cv
394.012 273.911 393.892 274.031 393.892 274.151 cv
393.772 274.151 393.772 274.271 393.652 274.271 cv
393.532 274.391 li
393.412 274.391 li
393.412 274.391 393.412 274.391 393.292 274.391 cv
388.012 269.111 li
387.892 268.991 387.892 268.871 387.892 268.751 cv
387.892 268.631 388.012 268.511 388.012 268.391 cv
388.372 268.031 li
388.492 267.911 388.612 267.911 388.612 267.791 cv
388.732 267.791 388.852 267.791 388.852 267.791 cv
388.972 267.791 389.092 267.791 389.212 267.791 cv
389.332 267.791 389.452 267.791 389.572 267.791 cv
393.412 268.991 li
393.652 269.111 393.892 269.111 394.132 269.231 cv
394.372 269.231 394.492 269.351 394.732 269.471 cv
394.972 269.471 395.212 269.591 395.332 269.591 cv
395.572 269.711 395.812 269.831 396.052 269.831 cv
395.812 269.591 395.572 269.351 395.212 269.111 cv
394.972 268.871 394.732 268.631 394.492 268.391 cv
391.372 265.271 li
391.372 265.271 391.372 265.271 391.372 265.151 cv
391.372 265.151 li
391.372 265.031 391.492 265.031 391.492 264.911 cv
391.492 264.911 391.612 264.791 391.732 264.791 cv
391.732 264.671 391.852 264.671 391.852 264.551 cv
391.972 264.551 391.972 264.551 391.972 264.551 cv
392.092 264.431 392.092 264.431 392.092 264.431 cv
392.212 264.551 li
cp
401.452 262.271 mo
401.812 262.631 402.052 262.991 402.292 263.351 cv
402.412 263.711 402.532 264.071 402.532 264.431 cv
402.532 264.791 402.412 265.151 402.292 265.511 cv
402.052 265.871 401.812 266.231 401.452 266.591 cv
401.092 266.951 400.852 267.191 400.492 267.311 cv
400.132 267.551 399.772 267.671 399.412 267.671 cv
399.052 267.671 398.692 267.551 398.332 267.431 cv
397.852 267.191 397.492 266.951 397.252 266.591 cv
393.652 262.991 li
393.532 262.991 393.652 262.871 393.652 262.871 cv
393.652 262.751 li
393.772 262.631 393.772 262.631 393.892 262.511 cv
393.892 262.391 394.012 262.391 394.132 262.391 cv
394.132 262.271 394.132 262.271 394.252 262.271 cv
394.252 262.271 394.252 262.271 394.372 262.271 cv
394.372 262.271 li
397.852 265.751 li
398.092 265.991 398.452 266.231 398.692 266.351 cv
398.932 266.471 399.172 266.591 399.412 266.591 cv
399.652 266.591 399.892 266.471 400.132 266.471 cv
400.372 266.351 400.612 266.111 400.852 265.991 cv
401.092 265.751 401.212 265.511 401.332 265.271 cv
401.452 265.031 401.452 264.791 401.452 264.551 cv
401.452 264.311 401.452 263.951 401.332 263.711 cv
401.212 263.471 400.972 263.231 400.732 262.991 cv
397.252 259.511 li
397.132 259.511 397.132 259.391 397.132 259.391 cv
397.132 259.391 397.132 259.391 397.132 259.271 cv
397.252 259.271 397.252 259.151 397.252 259.151 cv
397.252 259.151 397.372 259.031 397.492 258.911 cv
397.612 258.791 li
397.732 258.791 397.732 258.671 397.732 258.671 cv
397.852 258.671 397.852 258.671 397.852 258.671 cv
397.972 258.671 li
cp
411.292 256.391 mo
411.292 256.391 411.412 256.391 411.412 256.511 cv
411.412 256.511 411.412 256.511 411.292 256.511 cv
411.292 256.631 411.292 256.631 411.292 256.751 cv
411.172 256.751 411.172 256.871 411.052 256.871 cv
411.052 256.991 410.932 256.991 410.932 257.111 cv
410.812 257.111 410.812 257.111 410.692 257.111 cv
410.692 257.231 410.692 257.231 410.692 257.231 cv
410.572 257.231 410.572 257.111 410.572 257.111 cv
405.532 252.191 li
408.532 259.151 li
408.532 259.271 408.532 259.271 408.532 259.271 cv
408.532 259.391 li
408.532 259.391 408.532 259.511 408.412 259.511 cv
408.292 259.631 li
408.172 259.751 408.172 259.751 408.172 259.871 cv
408.052 259.871 408.052 259.871 407.932 259.871 cv
407.932 259.991 407.932 259.991 407.932 259.991 cv
407.812 259.991 407.812 259.991 407.812 259.991 cv
400.852 256.871 li
405.892 261.791 li
405.892 261.911 405.892 261.911 405.892 261.911 cv
405.892 262.031 li
405.772 262.151 li
405.772 262.271 405.652 262.271 405.652 262.391 cv
405.532 262.391 405.412 262.511 405.412 262.511 cv
405.292 262.631 405.292 262.631 405.292 262.631 cv
405.172 262.631 405.172 262.631 405.172 262.631 cv
405.052 262.631 li
399.772 257.351 li
399.652 257.231 399.652 257.111 399.652 256.991 cv
399.652 256.871 399.652 256.751 399.772 256.631 cv
400.252 256.151 li
400.372 256.151 400.492 256.031 400.492 256.031 cv
400.612 255.911 400.732 255.911 400.852 255.911 cv
400.852 255.911 400.972 255.911 401.092 255.911 cv
401.212 255.911 401.332 255.911 401.332 256.031 cv
407.212 258.551 li
407.212 258.431 li
404.812 252.671 li
404.692 252.551 404.692 252.431 404.692 252.311 cv
404.572 252.191 404.572 252.071 404.572 252.071 cv
404.692 251.951 404.692 251.831 404.692 251.831 cv
404.692 251.711 404.812 251.711 404.932 251.591 cv
405.412 251.111 li
405.412 250.991 405.412 250.991 405.532 250.991 cv
405.652 250.991 li
405.772 250.991 405.772 250.991 405.892 250.991 cv
405.892 250.991 406.012 250.991 406.012 251.111 cv
cp
f
406.612 286.271 mo
406.732 286.391 406.852 286.391 406.852 286.391 cv
406.852 286.511 406.972 286.511 406.972 286.511 cv
406.972 286.631 406.852 286.631 406.852 286.751 cv
406.732 286.751 406.732 286.871 406.612 286.991 cv
406.492 286.991 406.492 287.111 406.372 287.111 cv
406.372 287.231 406.252 287.231 406.252 287.231 cv
406.132 287.231 li
406.132 287.231 406.132 287.231 406.012 287.231 cv
404.212 286.391 li
401.812 288.671 li
402.652 290.591 li
402.652 290.591 402.772 290.591 402.772 290.711 cv
402.772 290.711 402.772 290.711 402.652 290.831 cv
402.652 290.831 402.652 290.831 402.652 290.951 cv
402.532 290.951 402.532 291.071 402.412 291.191 cv
402.292 291.191 402.292 291.311 402.172 291.311 cv
402.172 291.431 402.052 291.431 402.052 291.431 cv
402.052 291.431 401.932 291.431 401.932 291.311 cv
401.932 291.311 401.812 291.311 401.812 291.191 cv
398.452 283.871 li
398.332 283.871 398.332 283.871 398.332 283.751 cv
398.332 283.751 398.332 283.751 398.452 283.631 cv
398.452 283.631 398.452 283.511 398.572 283.511 cv
398.572 283.391 398.692 283.391 398.692 283.271 cv
398.812 283.151 398.932 283.151 398.932 283.031 cv
399.052 283.031 399.052 282.911 399.172 282.911 cv
399.292 282.911 li
399.412 282.911 li
cp
399.532 284.111 mo
399.532 284.111 li
401.332 287.951 li
403.372 285.911 li
cp
410.092 279.191 mo
410.332 279.551 410.692 279.911 410.812 280.391 cv
410.932 280.751 411.052 281.111 411.052 281.471 cv
411.052 281.831 410.932 282.191 410.812 282.551 cv
410.692 282.911 410.332 283.271 410.092 283.631 cv
409.732 283.991 409.372 284.231 409.012 284.351 cv
408.652 284.591 408.292 284.591 407.932 284.591 cv
407.572 284.711 407.212 284.591 406.852 284.351 cv
406.492 284.231 406.132 283.991 405.772 283.631 cv
402.172 280.031 li
402.172 279.911 402.172 279.911 402.172 279.911 cv
402.172 279.791 402.292 279.791 402.292 279.791 cv
402.292 279.671 402.412 279.671 402.412 279.551 cv
402.532 279.431 402.532 279.431 402.652 279.431 cv
402.652 279.311 402.772 279.311 402.772 279.311 cv
402.892 279.311 li
402.892 279.311 402.892 279.311 403.012 279.311 cv
406.492 282.791 li
406.732 283.031 406.972 283.271 407.212 283.391 cv
407.452 283.511 407.812 283.631 408.052 283.631 cv
408.292 283.631 408.532 283.511 408.772 283.391 cv
409.012 283.391 409.252 283.151 409.372 282.911 cv
409.612 282.791 409.852 282.551 409.972 282.311 cv
409.972 282.071 410.092 281.831 410.092 281.591 cv
410.092 281.231 409.972 280.991 409.852 280.751 cv
409.732 280.511 409.492 280.271 409.252 280.031 cv
405.772 276.551 li
405.772 276.431 405.772 276.431 405.772 276.431 cv
405.772 276.311 li
405.772 276.311 405.772 276.191 405.892 276.191 cv
405.892 276.071 405.892 276.071 406.012 275.951 cv
406.132 275.951 406.132 275.831 406.252 275.831 cv
406.372 275.711 li
406.372 275.711 406.372 275.711 406.492 275.711 cv
406.492 275.711 li
cp
412.012 270.791 mo
412.012 270.791 412.012 270.911 412.132 270.911 cv
412.132 271.031 li
412.132 271.151 li
412.132 271.151 412.132 271.151 412.132 271.271 cv
410.572 272.831 li
415.492 277.751 li
415.492 277.871 415.492 277.871 415.492 277.871 cv
415.492 277.991 li
415.492 277.991 415.492 278.111 415.372 278.111 cv
415.372 278.231 415.372 278.231 415.252 278.351 cv
415.132 278.351 415.132 278.471 415.012 278.471 cv
415.012 278.591 414.892 278.591 414.892 278.591 cv
414.892 278.591 414.892 278.591 414.772 278.591 cv
414.772 278.591 li
409.732 273.551 li
408.172 275.231 li
408.052 275.231 li
408.052 275.231 408.052 275.231 407.932 275.231 cv
407.932 275.231 407.932 275.231 407.812 275.231 cv
407.812 275.111 407.692 275.111 407.692 274.991 cv
407.572 274.991 407.572 274.871 407.572 274.871 cv
407.452 274.871 407.452 274.751 407.452 274.751 cv
407.452 274.631 li
407.452 274.631 407.452 274.631 407.452 274.511 cv
411.532 270.551 li
411.652 270.551 411.652 270.551 411.652 270.551 cv
411.772 270.551 li
411.892 270.671 411.892 270.671 412.012 270.791 cv
cp
422.092 271.151 mo
422.212 271.151 422.212 271.151 422.212 271.271 cv
422.212 271.271 422.212 271.271 422.212 271.391 cv
422.092 271.391 422.092 271.391 422.092 271.511 cv
422.092 271.511 421.972 271.631 421.852 271.631 cv
421.852 271.751 421.732 271.751 421.732 271.871 cv
421.612 271.871 421.612 271.871 421.612 271.871 cv
421.492 271.991 421.492 271.991 421.492 271.991 cv
421.372 271.871 li
418.852 269.351 li
416.212 271.991 li
418.732 274.511 li
418.852 274.511 418.852 274.511 418.852 274.631 cv
418.852 274.631 418.852 274.631 418.852 274.751 cv
418.732 274.751 418.732 274.751 418.732 274.871 cv
418.612 274.871 418.612 274.991 418.492 274.991 cv
418.492 275.111 418.372 275.111 418.372 275.231 cv
418.252 275.231 418.252 275.231 418.252 275.351 cv
418.132 275.351 418.132 275.351 418.132 275.351 cv
418.012 275.351 418.012 275.351 418.012 275.231 cv
412.492 269.831 li
412.492 269.711 412.492 269.711 412.492 269.711 cv
412.492 269.591 li
412.492 269.591 412.492 269.471 412.612 269.471 cv
412.612 269.351 412.732 269.351 412.732 269.231 cv
412.852 269.231 412.852 269.111 412.972 269.111 cv
412.972 268.991 413.092 268.991 413.092 268.991 cv
413.212 268.991 li
415.612 271.271 li
418.132 268.751 li
415.852 266.351 li
415.852 266.231 li
415.852 266.231 415.852 266.111 415.972 266.111 cv
415.972 265.991 416.092 265.991 416.092 265.871 cv
416.212 265.751 416.212 265.751 416.332 265.751 cv
416.332 265.631 416.452 265.631 416.452 265.631 cv
416.572 265.631 li
416.572 265.631 416.572 265.631 416.692 265.631 cv
cp
426.652 266.231 mo
426.772 266.231 426.772 266.351 426.772 266.351 cv
426.892 266.351 426.892 266.471 426.892 266.471 cv
426.892 266.591 li
426.892 266.591 426.892 266.591 426.892 266.711 cv
424.132 269.471 li
424.012 269.471 423.892 269.591 423.892 269.591 cv
423.772 269.591 423.652 269.471 423.532 269.351 cv
418.372 264.311 li
418.252 264.191 418.252 264.071 418.252 263.951 cv
418.252 263.831 418.252 263.711 418.372 263.711 cv
421.132 260.951 li
421.252 260.951 421.252 260.951 421.252 260.951 cv
421.372 260.951 li
421.492 261.071 421.492 261.071 421.612 261.191 cv
421.612 261.191 421.612 261.191 421.732 261.311 cv
421.732 261.431 li
421.732 261.431 421.732 261.431 421.732 261.551 cv
421.732 261.551 li
419.452 263.831 li
421.252 265.631 li
423.172 263.711 li
423.292 263.711 li
423.292 263.711 423.292 263.711 423.412 263.711 cv
423.412 263.711 423.412 263.711 423.532 263.711 cv
423.532 263.831 423.652 263.831 423.652 263.831 cv
423.772 263.951 423.772 263.951 423.772 264.071 cv
423.772 264.071 423.892 264.071 423.892 264.191 cv
423.892 264.191 423.892 264.191 423.892 264.311 cv
423.892 264.311 423.892 264.311 423.772 264.311 cv
421.852 266.231 li
423.892 268.271 li
426.172 265.991 li
426.292 265.991 426.292 265.991 426.292 265.991 cv
426.412 265.991 li
426.412 265.991 426.532 265.991 426.532 266.111 cv
426.532 266.111 426.652 266.111 426.652 266.231 cv
cp
432.172 260.711 mo
432.292 260.711 432.292 260.831 432.292 260.831 cv
432.292 260.951 432.292 260.951 432.292 261.071 cv
432.292 261.191 li
432.292 261.311 432.172 261.311 432.172 261.311 cv
431.932 261.671 li
431.812 261.671 431.812 261.791 431.692 261.791 cv
431.572 261.791 431.572 261.911 431.452 261.911 cv
431.332 261.911 431.212 261.911 431.092 261.911 cv
430.972 261.791 430.852 261.791 430.612 261.791 cv
425.692 260.231 li
425.332 260.111 425.092 260.111 424.852 259.991 cv
424.612 259.871 424.252 259.751 424.012 259.751 cv
424.252 259.871 424.492 260.111 424.732 260.351 cv
424.972 260.591 425.092 260.831 425.332 261.071 cv
428.812 264.431 li
428.812 264.551 428.812 264.551 428.812 264.551 cv
428.812 264.671 li
428.812 264.671 428.812 264.791 428.692 264.791 cv
428.692 264.911 428.692 264.911 428.572 265.031 cv
428.452 265.031 428.452 265.151 428.332 265.151 cv
428.332 265.271 428.332 265.271 428.212 265.271 cv
428.212 265.271 428.212 265.271 428.092 265.271 cv
428.092 265.271 li
422.812 259.991 li
422.692 259.871 422.572 259.751 422.572 259.631 cv
422.572 259.511 422.692 259.391 422.812 259.271 cv
423.172 258.911 li
423.172 258.791 423.292 258.791 423.412 258.671 cv
423.412 258.671 423.532 258.671 423.652 258.671 cv
423.652 258.671 423.772 258.671 423.892 258.671 cv
424.012 258.671 424.132 258.671 424.252 258.671 cv
428.092 259.871 li
428.332 259.991 428.572 259.991 428.812 260.111 cv
429.052 260.231 429.292 260.231 429.412 260.351 cv
429.652 260.351 429.892 260.471 430.132 260.471 cv
430.252 260.591 430.492 260.711 430.732 260.711 cv
430.492 260.471 430.252 260.231 430.012 259.991 cv
429.772 259.751 429.532 259.511 429.292 259.271 cv
426.172 256.151 li
426.052 256.151 li
426.052 256.031 426.052 256.031 426.172 256.031 cv
426.172 255.911 426.172 255.911 426.172 255.791 cv
426.292 255.791 426.292 255.671 426.412 255.671 cv
426.412 255.551 426.532 255.551 426.532 255.431 cv
426.652 255.431 426.652 255.431 426.772 255.431 cv
426.772 255.431 426.772 255.311 426.772 255.431 cv
426.892 255.431 426.892 255.431 426.892 255.431 cv
cp
432.292 250.391 mo
432.292 250.511 432.412 250.511 432.412 250.631 cv
432.412 250.631 432.532 250.631 432.532 250.751 cv
432.532 250.751 432.532 250.751 432.532 250.871 cv
432.532 250.871 432.532 250.871 432.412 250.871 cv
430.852 252.551 li
435.772 257.471 li
435.892 257.471 435.892 257.471 435.892 257.591 cv
435.892 257.591 435.892 257.591 435.892 257.711 cv
435.772 257.711 435.772 257.711 435.772 257.831 cv
435.652 257.831 435.652 257.951 435.532 257.951 cv
435.532 258.071 435.412 258.071 435.412 258.191 cv
435.292 258.191 435.292 258.191 435.292 258.311 cv
435.172 258.311 435.172 258.311 435.172 258.311 cv
435.052 258.311 435.052 258.311 435.052 258.191 cv
430.132 253.271 li
428.452 254.831 li
428.452 254.951 428.452 254.951 428.332 254.951 cv
428.332 254.951 li
428.212 254.951 428.212 254.831 428.212 254.831 cv
428.092 254.831 428.092 254.711 427.972 254.711 cv
427.852 254.591 li
427.852 254.471 427.852 254.471 427.732 254.471 cv
427.732 254.351 427.732 254.351 427.732 254.351 cv
427.732 254.231 427.852 254.231 427.852 254.231 cv
431.812 250.271 li
431.812 250.271 431.812 250.151 431.932 250.151 cv
431.932 250.151 431.932 250.151 432.052 250.151 cv
432.052 250.271 432.052 250.271 432.172 250.271 cv
432.172 250.271 432.172 250.391 432.292 250.391 cv
cp
f
437.812 279.671 mo
437.812 279.791 437.932 279.791 437.932 279.791 cv
437.932 279.911 437.932 279.911 438.052 279.911 cv
438.052 280.031 li
438.052 280.151 li
438.052 280.271 438.052 280.271 438.052 280.511 cv
437.932 280.631 437.932 280.871 437.812 280.991 cv
437.812 281.231 437.692 281.471 437.452 281.591 cv
437.332 281.831 437.212 282.071 436.972 282.311 cv
436.612 282.671 436.252 282.911 435.772 283.151 cv
435.292 283.271 434.932 283.391 434.452 283.391 cv
433.972 283.271 433.492 283.151 433.012 282.911 cv
432.652 282.671 432.172 282.311 431.692 281.831 cv
431.212 281.351 430.852 280.871 430.612 280.391 cv
430.372 279.911 430.132 279.431 430.132 278.951 cv
430.132 278.471 430.132 277.991 430.372 277.511 cv
430.492 277.151 430.852 276.671 431.212 276.311 cv
431.332 276.191 431.572 276.071 431.692 275.951 cv
431.932 275.711 432.052 275.711 432.292 275.591 cv
432.412 275.471 432.652 275.471 432.772 275.351 cv
432.892 275.351 433.012 275.351 433.132 275.351 cv
433.252 275.351 433.252 275.351 433.372 275.351 cv
433.372 275.351 li
433.492 275.351 433.492 275.471 433.492 275.471 cv
433.612 275.471 433.612 275.591 433.732 275.591 cv
433.732 275.711 433.732 275.711 433.852 275.711 cv
433.852 275.831 433.852 275.831 433.852 275.831 cv
433.972 275.951 433.972 275.951 433.972 275.951 cv
433.972 276.071 433.852 276.071 433.852 276.071 cv
433.852 276.071 433.732 276.191 433.612 276.191 cv
433.492 276.191 433.372 276.191 433.132 276.311 cv
432.892 276.311 432.772 276.431 432.532 276.551 cv
432.292 276.551 432.052 276.791 431.812 277.031 cv
431.572 277.271 431.452 277.511 431.332 277.871 cv
431.212 278.231 431.092 278.471 431.212 278.831 cv
431.212 279.191 431.332 279.551 431.572 279.911 cv
431.812 280.271 432.052 280.631 432.412 280.991 cv
432.772 281.351 433.132 281.711 433.492 281.831 cv
433.852 282.071 434.212 282.191 434.572 282.191 cv
434.932 282.311 435.172 282.191 435.532 282.071 cv
435.772 281.951 436.132 281.831 436.372 281.471 cv
436.612 281.351 436.732 281.111 436.852 280.871 cv
436.972 280.631 437.092 280.391 437.212 280.271 cv
437.212 280.031 437.212 279.911 437.212 279.791 cv
437.332 279.551 437.332 279.551 437.332 279.431 cv
437.452 279.431 li
437.572 279.431 437.572 279.431 437.692 279.551 cv
437.692 279.551 437.692 279.671 437.812 279.671 cv
cp
443.332 275.591 mo
443.332 275.591 li
443.452 275.591 443.452 275.711 443.332 275.711 cv
443.332 275.831 li
443.212 275.951 443.212 275.951 443.092 276.071 cv
442.972 276.191 442.972 276.191 442.852 276.311 cv
442.732 276.311 li
442.732 276.431 442.612 276.431 442.612 276.431 cv
442.612 276.311 442.492 276.311 442.492 276.311 cv
440.572 275.471 li
440.332 275.471 440.212 275.351 439.972 275.231 cv
439.732 275.231 439.612 275.231 439.372 275.231 cv
439.252 275.231 439.012 275.231 438.892 275.231 cv
438.652 275.351 438.532 275.471 438.292 275.711 cv
437.812 276.191 li
440.332 278.591 li
440.332 278.711 li
440.332 278.711 440.332 278.711 440.332 278.831 cv
440.332 278.831 440.212 278.831 440.212 278.951 cv
440.212 278.951 440.092 279.071 440.092 279.191 cv
439.972 279.191 439.852 279.311 439.852 279.311 cv
439.732 279.311 439.732 279.431 439.732 279.431 cv
439.612 279.431 439.612 279.431 439.612 279.431 cv
439.612 279.431 439.492 279.431 439.492 279.311 cv
434.212 274.031 li
434.092 273.911 434.092 273.791 434.092 273.671 cv
434.092 273.671 434.092 273.551 434.212 273.431 cv
435.412 272.231 li
435.532 272.111 435.652 271.991 435.772 271.871 cv
435.892 271.871 436.012 271.751 436.012 271.631 cv
436.372 271.511 436.612 271.391 436.852 271.271 cv
437.092 271.151 437.332 271.151 437.572 271.151 cv
437.812 271.151 438.052 271.271 438.292 271.271 cv
438.532 271.391 438.652 271.631 438.892 271.751 cv
439.132 271.991 439.252 272.111 439.372 272.351 cv
439.492 272.591 439.492 272.831 439.492 272.951 cv
439.492 273.191 439.492 273.431 439.492 273.671 cv
439.372 273.911 439.372 274.151 439.252 274.271 cv
439.372 274.271 439.492 274.271 439.612 274.271 cv
439.732 274.271 439.972 274.271 440.092 274.271 cv
440.212 274.271 440.452 274.271 440.572 274.391 cv
440.692 274.391 440.932 274.511 441.172 274.631 cv
442.972 275.351 li
443.092 275.351 443.212 275.471 443.212 275.471 cv
443.332 275.471 443.332 275.471 443.332 275.591 cv
cp
438.172 272.711 mo
437.932 272.471 437.692 272.351 437.452 272.231 cv
437.212 272.231 436.852 272.231 436.612 272.471 cv
436.492 272.471 436.372 272.591 436.372 272.591 cv
436.252 272.711 436.132 272.831 435.892 272.951 cv
435.292 273.671 li
437.212 275.591 li
437.932 274.751 li
438.172 274.631 438.292 274.391 438.412 274.271 cv
438.532 274.031 438.532 273.791 438.532 273.671 cv
438.532 273.431 438.532 273.311 438.532 273.071 cv
438.412 272.951 438.292 272.831 438.172 272.711 cv
cp
444.172 270.431 mo
446.332 272.591 li
446.332 272.591 446.332 272.591 446.332 272.711 cv
446.332 272.711 li
446.332 272.831 446.332 272.831 446.212 272.951 cv
446.092 273.071 li
445.972 273.191 445.972 273.191 445.852 273.311 cv
445.732 273.311 li
445.732 273.431 445.612 273.431 445.612 273.431 cv
445.612 273.431 445.612 273.311 445.492 273.311 cv
443.452 271.271 li
438.532 269.591 li
438.412 269.591 438.412 269.591 438.412 269.471 cv
438.292 269.471 438.292 269.471 438.292 269.351 cv
438.292 269.351 438.292 269.351 438.412 269.231 cv
438.412 269.231 438.532 269.111 438.532 268.991 cv
438.652 268.871 438.772 268.871 438.772 268.751 cv
438.892 268.751 438.892 268.751 439.012 268.751 cv
439.012 268.631 439.012 268.631 439.132 268.631 cv
439.132 268.631 439.132 268.631 439.252 268.751 cv
441.652 269.591 li
441.892 269.591 442.132 269.711 442.372 269.831 cv
442.612 269.951 442.852 270.071 443.092 270.071 cv
442.972 269.831 442.972 269.591 442.852 269.351 cv
442.732 269.111 442.612 268.871 442.492 268.631 cv
441.652 266.231 li
441.652 266.111 li
441.652 265.991 li
441.772 265.871 li
441.772 265.751 441.892 265.751 441.892 265.631 cv
442.012 265.511 442.132 265.511 442.252 265.391 cv
442.372 265.391 li
442.492 265.391 li
442.492 265.391 442.492 265.511 442.612 265.631 cv
cp
448.372 262.631 mo
448.732 262.871 448.972 263.231 449.092 263.471 cv
449.212 263.831 449.212 264.191 449.212 264.551 cv
449.212 264.791 449.092 265.151 448.972 265.511 cv
448.852 265.871 448.492 266.231 448.132 266.591 cv
447.532 267.191 li
449.572 269.351 li
449.692 269.351 li
449.692 269.351 449.692 269.471 449.572 269.471 cv
449.572 269.591 li
449.452 269.711 449.452 269.711 449.332 269.831 cv
449.212 269.951 li
449.092 270.071 449.092 270.071 448.972 270.071 cv
448.972 270.071 li
448.852 270.071 448.852 270.071 448.852 270.071 cv
443.572 264.791 li
443.452 264.671 443.332 264.551 443.332 264.431 cv
443.452 264.311 443.452 264.191 443.572 264.191 cv
444.772 262.871 li
444.892 262.751 445.012 262.631 445.132 262.511 cv
445.252 262.511 445.372 262.391 445.612 262.271 cv
445.732 262.151 445.972 262.031 446.212 261.911 cv
446.452 261.911 446.812 261.911 447.052 261.911 cv
447.292 261.911 447.532 262.031 447.772 262.151 cv
448.012 262.271 448.252 262.391 448.372 262.631 cv
cp
447.652 263.471 mo
447.412 263.231 447.172 263.111 446.932 262.991 cv
446.692 262.991 446.452 262.871 446.332 262.991 cv
446.092 262.991 445.852 263.111 445.732 263.231 cv
445.612 263.351 445.492 263.471 445.252 263.591 cv
444.652 264.311 li
446.932 266.591 li
447.652 265.871 li
447.772 265.631 448.012 265.511 448.132 265.271 cv
448.132 265.031 448.252 264.791 448.252 264.671 cv
448.252 264.431 448.132 264.191 448.132 264.071 cv
448.012 263.831 447.892 263.591 447.652 263.471 cv
cp
451.852 256.511 mo
451.852 256.511 451.972 256.511 451.972 256.631 cv
452.092 256.751 li
452.092 256.751 452.092 256.751 452.092 256.871 cv
452.092 256.871 452.092 256.871 451.972 256.871 cv
450.412 258.551 li
455.332 263.471 li
455.452 263.471 455.452 263.591 455.452 263.591 cv
455.452 263.711 li
455.332 263.711 455.332 263.831 455.332 263.831 cv
455.332 263.951 455.212 263.951 455.092 264.071 cv
454.972 264.191 li
454.852 264.191 454.852 264.311 454.852 264.311 cv
454.732 264.311 454.732 264.311 454.732 264.311 cv
454.612 264.311 454.612 264.311 454.612 264.311 cv
449.692 259.271 li
448.012 260.951 li
447.892 260.951 447.892 260.951 447.892 260.951 cv
447.772 260.951 447.772 260.951 447.772 260.831 cv
447.652 260.831 447.652 260.831 447.532 260.711 cv
447.412 260.591 li
447.412 260.471 li
447.292 260.471 447.292 260.351 447.292 260.351 cv
447.412 260.231 li
451.372 256.271 li
451.372 256.271 451.372 256.271 451.492 256.271 cv
451.492 256.271 451.492 256.271 451.612 256.271 cv
451.612 256.271 451.612 256.271 451.732 256.271 cv
451.732 256.391 451.852 256.391 451.852 256.511 cv
cp
460.012 253.271 mo
460.492 253.751 460.852 254.231 461.092 254.711 cv
461.332 255.191 461.572 255.671 461.572 256.151 cv
461.572 256.631 461.572 256.991 461.332 257.471 cv
461.212 257.951 460.852 258.431 460.372 258.911 cv
460.012 259.271 459.532 259.631 459.052 259.751 cv
458.692 259.991 458.212 260.111 457.732 259.991 cv
457.252 259.991 456.892 259.871 456.412 259.511 cv
455.932 259.271 455.452 258.911 454.972 258.431 cv
454.492 258.071 454.132 257.591 453.892 257.111 cv
453.652 256.631 453.532 256.151 453.412 255.671 cv
453.412 255.191 453.532 254.711 453.652 254.231 cv
453.892 253.751 454.132 253.271 454.612 252.911 cv
455.092 252.431 455.452 252.191 455.932 251.951 cv
456.412 251.711 456.772 251.711 457.252 251.711 cv
457.732 251.711 458.212 251.951 458.572 252.191 cv
459.052 252.431 459.532 252.791 460.012 253.271 cv
cp
459.292 254.111 mo
458.932 253.751 458.572 253.511 458.212 253.271 cv
457.972 253.031 457.612 252.911 457.252 252.791 cv
456.892 252.791 456.532 252.791 456.292 252.911 cv
455.932 253.031 455.572 253.271 455.212 253.511 cv
454.852 253.871 454.732 254.231 454.612 254.591 cv
454.492 254.951 454.492 255.311 454.492 255.671 cv
454.612 255.911 454.732 256.271 454.972 256.631 cv
455.212 256.991 455.452 257.351 455.692 257.591 cv
456.052 257.951 456.412 258.191 456.772 258.431 cv
457.132 258.671 457.372 258.791 457.732 258.911 cv
458.092 259.031 458.452 258.911 458.812 258.791 cv
459.172 258.791 459.412 258.551 459.772 258.191 cv
460.132 257.831 460.372 257.471 460.492 257.111 cv
460.492 256.751 460.612 256.391 460.492 256.151 cv
460.372 255.791 460.252 255.431 460.012 255.071 cv
459.892 254.711 459.532 254.351 459.292 254.111 cv
cp
f
471.772 272.711 mo
471.772 272.711 471.772 272.711 471.892 272.831 cv
471.892 272.831 471.892 272.831 471.772 272.831 cv
471.772 272.951 471.772 272.951 471.772 273.071 cv
471.652 273.071 471.652 273.191 471.532 273.191 cv
471.412 273.311 471.412 273.431 471.292 273.431 cv
471.172 273.551 li
471.052 273.551 li
471.052 273.551 470.932 273.551 470.932 273.431 cv
469.012 272.711 li
468.772 272.591 468.652 272.471 468.412 272.471 cv
468.292 272.351 468.052 272.351 467.812 272.351 cv
467.692 272.351 467.452 272.351 467.332 272.471 cv
467.092 272.471 466.972 272.591 466.852 272.831 cv
466.252 273.311 li
468.772 275.711 li
468.772 275.831 468.772 275.831 468.772 275.831 cv
468.772 275.951 li
468.652 276.071 li
468.652 276.191 468.532 276.191 468.532 276.311 cv
468.412 276.311 468.292 276.431 468.292 276.431 cv
468.292 276.551 468.172 276.551 468.172 276.551 cv
468.052 276.551 468.052 276.551 468.052 276.551 cv
467.932 276.551 li
462.652 271.271 li
462.532 271.151 462.532 271.031 462.532 270.911 cv
462.532 270.791 462.532 270.671 462.652 270.671 cv
463.852 269.351 li
463.972 269.231 464.092 269.111 464.212 269.111 cv
464.332 268.991 464.452 268.871 464.452 268.871 cv
464.812 268.631 465.052 268.511 465.292 268.391 cv
465.532 268.271 465.772 268.271 466.012 268.271 cv
466.252 268.271 466.492 268.391 466.732 268.511 cv
466.972 268.631 467.092 268.751 467.332 268.991 cv
467.572 269.111 467.692 269.351 467.812 269.471 cv
467.932 269.711 467.932 269.951 467.932 270.191 cv
467.932 270.311 467.932 270.551 467.932 270.791 cv
467.812 271.031 467.812 271.271 467.692 271.511 cv
467.812 271.391 467.932 271.391 468.052 271.391 cv
468.172 271.391 468.412 271.391 468.532 271.391 cv
468.652 271.391 468.892 271.511 469.012 271.511 cv
469.252 271.511 469.372 271.631 469.612 271.751 cv
471.412 272.471 li
471.532 272.591 471.652 272.591 471.652 272.591 cv
471.772 272.591 471.772 272.711 471.772 272.711 cv
cp
466.612 269.831 mo
466.372 269.591 466.132 269.471 465.892 269.351 cv
465.652 269.351 465.412 269.351 465.052 269.591 cv
464.932 269.591 464.812 269.711 464.812 269.831 cv
464.692 269.831 464.572 269.951 464.332 270.071 cv
463.732 270.791 li
465.652 272.711 li
466.372 271.991 li
466.612 271.751 466.732 271.511 466.852 271.391 cv
466.972 271.151 466.972 271.031 466.972 270.791 cv
467.092 270.671 466.972 270.431 466.972 270.311 cv
466.852 270.071 466.732 269.951 466.612 269.831 cv
cp
477.052 267.071 mo
477.172 267.191 477.172 267.191 477.292 267.191 cv
477.292 267.311 477.292 267.311 477.292 267.311 cv
477.292 267.431 477.292 267.431 477.292 267.551 cv
477.172 267.551 477.172 267.671 477.052 267.791 cv
476.932 267.791 476.812 267.911 476.812 267.911 cv
476.692 268.031 476.692 268.031 476.692 268.031 cv
476.572 268.031 476.572 268.031 476.572 268.031 cv
476.452 268.031 li
474.532 267.191 li
472.132 269.471 li
473.092 271.391 li
473.092 271.391 473.092 271.391 473.092 271.511 cv
473.092 271.511 473.092 271.511 473.092 271.631 cv
473.092 271.631 473.092 271.631 472.972 271.751 cv
472.972 271.751 472.852 271.871 472.852 271.991 cv
472.732 271.991 472.612 272.111 472.612 272.111 cv
472.492 272.231 472.492 272.231 472.492 272.231 cv
472.372 272.231 472.372 272.231 472.372 272.111 cv
472.252 272.111 472.252 272.111 472.252 271.991 cv
468.772 264.671 li
468.772 264.671 468.772 264.671 468.772 264.551 cv
468.772 264.551 468.772 264.551 468.772 264.431 cv
468.892 264.311 li
469.012 264.191 469.012 264.191 469.132 264.071 cv
469.252 263.951 469.252 263.951 469.372 263.831 cv
469.492 263.831 469.492 263.711 469.492 263.711 cv
469.612 263.711 469.612 263.711 469.732 263.711 cv
469.732 263.711 469.732 263.711 469.852 263.711 cv
cp
469.852 264.911 mo
469.852 264.911 li
471.772 268.751 li
473.812 266.711 li
cp
482.212 261.791 mo
482.332 261.911 482.332 261.911 482.332 262.031 cv
482.452 262.031 482.452 262.151 482.452 262.151 cv
482.452 262.271 482.332 262.271 482.332 262.391 cv
482.332 262.391 482.332 262.391 482.212 262.511 cv
481.972 262.751 li
481.972 262.871 481.852 262.871 481.732 262.871 cv
481.732 262.991 481.612 262.991 481.492 262.991 cv
481.372 262.991 481.252 262.991 481.132 262.991 cv
481.012 262.991 480.892 262.991 480.772 262.871 cv
475.732 261.311 li
475.492 261.311 475.132 261.191 474.892 261.071 cv
474.652 261.071 474.412 260.951 474.052 260.831 cv
474.292 261.071 474.532 261.311 474.772 261.431 cv
475.012 261.671 475.252 261.911 475.372 262.151 cv
478.852 265.631 li
478.972 265.631 li
478.972 265.751 478.972 265.751 478.852 265.751 cv
478.852 265.871 478.852 265.871 478.852 265.871 cv
478.732 265.991 478.732 265.991 478.612 266.111 cv
478.612 266.231 478.492 266.231 478.492 266.351 cv
478.372 266.351 478.372 266.351 478.252 266.351 cv
478.252 266.351 li
478.132 266.351 478.132 266.351 478.132 266.351 cv
472.852 261.071 li
472.732 260.951 472.612 260.831 472.732 260.711 cv
472.732 260.591 472.732 260.471 472.852 260.471 cv
473.212 259.991 li
473.332 259.991 473.332 259.871 473.452 259.871 cv
473.572 259.751 473.572 259.751 473.692 259.751 cv
473.812 259.751 473.812 259.751 473.932 259.751 cv
474.052 259.751 474.172 259.871 474.292 259.871 cv
478.132 261.071 li
478.372 261.071 478.612 261.191 478.852 261.191 cv
479.092 261.311 479.332 261.431 479.572 261.431 cv
479.692 261.551 479.932 261.551 480.172 261.671 cv
480.412 261.671 480.532 261.791 480.772 261.911 cv
480.532 261.671 480.292 261.431 480.052 261.191 cv
479.812 260.831 479.572 260.591 479.332 260.351 cv
476.212 257.351 li
476.212 257.231 476.212 257.231 476.212 257.231 cv
476.212 257.111 li
476.212 257.111 476.212 256.991 476.332 256.991 cv
476.332 256.871 476.332 256.871 476.452 256.751 cv
476.572 256.751 476.572 256.631 476.692 256.631 cv
476.692 256.511 476.692 256.511 476.812 256.511 cv
476.812 256.511 476.812 256.511 476.932 256.511 cv
476.932 256.511 li
cp
485.572 253.151 mo
486.172 253.631 486.532 254.231 486.772 254.711 cv
487.012 255.191 487.132 255.671 487.132 256.151 cv
487.132 256.631 487.012 257.111 486.772 257.591 cv
486.532 258.071 486.172 258.551 485.692 259.031 cv
484.492 260.231 li
484.372 260.351 484.252 260.351 484.252 260.351 cv
484.132 260.351 484.012 260.351 483.892 260.231 cv
478.732 255.071 li
478.612 254.951 478.612 254.951 478.612 254.831 cv
478.612 254.711 478.612 254.591 478.732 254.471 cv
480.052 253.271 li
480.532 252.791 481.012 252.431 481.492 252.191 cv
481.972 251.951 482.452 251.831 482.932 251.831 cv
483.412 251.831 483.772 251.951 484.252 252.191 cv
484.732 252.431 485.212 252.791 485.572 253.151 cv
cp
484.852 253.991 mo
484.492 253.751 484.252 253.511 483.892 253.271 cv
483.532 253.031 483.172 252.911 482.812 252.911 cv
482.452 252.911 482.092 252.911 481.732 253.151 cv
481.372 253.271 481.012 253.511 480.652 253.871 cv
479.812 254.711 li
484.252 259.151 li
485.092 258.311 li
485.452 257.951 485.692 257.591 485.812 257.351 cv
486.052 256.991 486.052 256.631 486.052 256.271 cv
486.052 255.911 485.932 255.551 485.692 255.191 cv
485.572 254.831 485.212 254.471 484.852 253.991 cv
cp
f
504.652 265.031 mo
504.652 265.151 504.772 265.151 504.772 265.151 cv
504.772 265.271 504.892 265.271 504.892 265.271 cv
504.892 265.391 504.892 265.391 504.892 265.391 cv
504.892 265.511 504.772 265.511 504.772 265.511 cv
502.012 268.271 li
502.012 268.391 501.892 268.391 501.772 268.391 cv
501.652 268.391 501.532 268.391 501.412 268.271 cv
496.372 263.111 li
496.252 262.991 496.132 262.871 496.252 262.751 cv
496.252 262.631 496.252 262.631 496.372 262.511 cv
499.012 259.751 li
499.132 259.751 li
499.132 259.751 499.132 259.751 499.252 259.751 cv
499.252 259.751 499.252 259.871 499.372 259.871 cv
499.372 259.871 499.492 259.871 499.492 259.991 cv
499.612 259.991 499.612 260.111 499.612 260.111 cv
499.732 260.231 499.732 260.231 499.732 260.231 cv
499.732 260.351 499.732 260.351 499.732 260.351 cv
499.732 260.471 li
497.452 262.631 li
499.252 264.431 li
501.172 262.511 li
501.172 262.511 501.172 262.511 501.292 262.511 cv
501.292 262.511 li
501.412 262.511 501.412 262.511 501.412 262.631 cv
501.532 262.631 501.532 262.631 501.652 262.751 cv
501.772 262.871 li
501.772 262.991 li
501.772 263.111 li
501.772 263.111 501.772 263.111 501.772 263.231 cv
499.852 265.151 li
501.892 267.191 li
504.172 264.911 li
504.172 264.911 504.172 264.791 504.292 264.791 cv
504.292 264.791 504.292 264.791 504.412 264.791 cv
504.412 264.791 504.412 264.911 504.532 264.911 cv
504.532 264.911 504.532 265.031 504.652 265.031 cv
cp
509.932 260.111 mo
510.052 260.231 li
510.052 260.231 510.052 260.231 509.932 260.351 cv
509.932 260.351 509.932 260.351 509.932 260.471 cv
509.812 260.471 509.812 260.591 509.692 260.711 cv
509.572 260.711 509.572 260.831 509.452 260.831 cv
509.452 260.951 509.332 260.951 509.332 260.951 cv
509.212 260.951 li
509.092 260.951 li
507.172 260.111 li
507.052 259.991 506.812 259.871 506.572 259.871 cv
506.452 259.751 506.212 259.751 505.972 259.751 cv
505.852 259.751 505.612 259.751 505.492 259.871 cv
505.252 259.991 505.132 260.111 505.012 260.231 cv
504.412 260.711 li
506.932 263.231 li
506.932 263.351 506.932 263.351 506.932 263.351 cv
506.932 263.471 506.812 263.471 506.812 263.471 cv
506.812 263.591 506.692 263.591 506.692 263.711 cv
506.572 263.831 506.572 263.831 506.452 263.831 cv
506.452 263.951 506.332 263.951 506.332 263.951 cv
506.212 263.951 li
506.212 263.951 506.212 263.951 506.092 263.951 cv
500.812 258.671 li
500.692 258.551 500.692 258.431 500.692 258.311 cv
500.692 258.191 500.692 258.071 500.812 258.071 cv
502.012 256.871 li
502.132 256.751 502.252 256.631 502.372 256.511 cv
502.492 256.391 502.612 256.271 502.612 256.271 cv
502.972 256.031 503.212 255.911 503.452 255.791 cv
503.692 255.791 503.932 255.671 504.172 255.791 cv
504.412 255.791 504.652 255.791 504.892 255.911 cv
505.132 256.031 505.252 256.151 505.492 256.391 cv
505.732 256.511 505.852 256.751 505.972 256.991 cv
506.092 257.111 506.092 257.351 506.092 257.591 cv
506.092 257.831 506.092 258.071 506.092 258.191 cv
505.972 258.431 505.972 258.671 505.852 258.911 cv
505.972 258.911 506.092 258.791 506.212 258.791 cv
506.452 258.791 506.572 258.791 506.692 258.791 cv
506.812 258.791 507.052 258.911 507.172 258.911 cv
507.412 259.031 507.532 259.031 507.772 259.151 cv
509.572 259.871 li
509.692 259.991 509.812 259.991 509.812 259.991 cv
509.932 260.111 509.932 260.111 509.932 260.111 cv
cp
504.772 257.231 mo
504.532 256.991 504.292 256.871 504.052 256.871 cv
503.812 256.751 503.572 256.871 503.212 256.991 cv
503.092 257.111 502.972 257.111 502.972 257.231 cv
502.852 257.351 502.732 257.471 502.492 257.591 cv
501.892 258.191 li
503.812 260.111 li
504.532 259.391 li
504.772 259.151 504.892 259.031 505.012 258.791 cv
505.132 258.551 505.132 258.431 505.132 258.191 cv
505.252 258.071 505.132 257.831 505.132 257.711 cv
505.012 257.591 504.892 257.351 504.772 257.231 cv
cp
512.572 254.591 mo
512.812 254.831 513.052 255.071 513.172 255.431 cv
513.292 255.671 513.292 256.031 513.292 256.391 cv
513.172 256.631 513.172 256.991 512.932 257.351 cv
512.812 257.591 512.572 257.951 512.332 258.191 cv
512.092 258.431 511.972 258.551 511.732 258.671 cv
511.492 258.791 511.372 258.911 511.132 259.031 cv
511.012 259.031 510.772 259.151 510.652 259.151 cv
510.532 259.151 510.412 259.271 510.412 259.271 cv
510.292 259.271 510.292 259.151 510.172 259.151 cv
510.052 259.151 510.052 259.031 509.932 258.911 cv
509.812 258.911 509.812 258.791 509.812 258.791 cv
509.692 258.791 509.692 258.671 509.692 258.671 cv
509.692 258.551 li
509.692 258.551 509.692 258.551 509.692 258.431 cv
509.812 258.431 509.812 258.431 509.932 258.431 cv
510.052 258.311 510.292 258.311 510.412 258.311 cv
510.652 258.191 510.772 258.071 511.012 257.951 cv
511.252 257.831 511.492 257.711 511.732 257.471 cv
511.852 257.351 511.972 257.111 512.092 256.991 cv
512.212 256.751 512.212 256.631 512.212 256.391 cv
512.212 256.271 512.212 256.031 512.212 255.911 cv
512.092 255.791 511.972 255.551 511.852 255.431 cv
511.732 255.311 511.492 255.191 511.372 255.071 cv
511.132 255.071 510.892 255.071 510.772 255.071 cv
510.532 255.191 510.292 255.191 510.052 255.311 cv
509.812 255.311 509.572 255.431 509.332 255.551 cv
509.092 255.671 508.852 255.671 508.612 255.791 cv
508.372 255.791 508.132 255.911 507.892 255.911 cv
507.652 255.791 507.412 255.791 507.172 255.671 cv
506.932 255.671 506.692 255.431 506.452 255.191 cv
506.212 254.951 506.092 254.711 505.972 254.471 cv
505.852 254.231 505.852 253.871 505.852 253.631 cv
505.852 253.391 505.972 253.031 506.092 252.791 cv
506.212 252.551 506.452 252.191 506.692 251.951 cv
506.812 251.831 506.932 251.711 507.172 251.591 cv
507.292 251.471 507.412 251.471 507.532 251.351 cv
507.772 251.231 507.892 251.231 508.012 251.231 cv
508.132 251.111 508.252 251.111 508.252 251.111 cv
508.372 251.111 508.372 251.111 508.372 251.111 cv
508.492 251.111 li
508.492 251.231 508.612 251.231 508.612 251.231 cv
508.732 251.351 li
508.732 251.471 508.852 251.471 508.852 251.471 cv
508.852 251.591 508.972 251.591 508.972 251.591 cv
508.972 251.711 508.972 251.711 508.972 251.711 cv
508.972 251.831 508.972 251.831 508.972 251.831 cv
508.972 251.831 508.852 251.831 508.732 251.951 cv
508.612 251.951 508.492 251.951 508.372 252.071 cv
508.132 252.071 508.012 252.191 507.892 252.191 cv
507.652 252.311 507.532 252.431 507.292 252.671 cv
507.172 252.791 507.052 252.911 506.932 253.151 cv
506.932 253.271 506.812 253.391 506.812 253.631 cv
506.812 253.751 506.812 253.871 506.932 253.991 cv
506.932 254.111 507.052 254.231 507.172 254.351 cv
507.292 254.591 507.532 254.591 507.652 254.711 cv
507.892 254.711 508.132 254.711 508.252 254.711 cv
508.492 254.711 508.732 254.591 508.972 254.471 cv
509.212 254.471 509.452 254.351 509.692 254.231 cv
509.932 254.231 510.172 254.111 510.412 253.991 cv
510.652 253.991 510.892 253.871 511.132 253.871 cv
511.372 253.871 511.612 253.991 511.852 254.111 cv
512.092 254.111 512.332 254.351 512.572 254.591 cv
cp
f
528.532 267.071 mo
528.652 267.071 528.652 267.191 528.652 267.191 cv
528.652 267.191 528.652 267.311 528.532 267.311 cv
528.532 267.431 528.532 267.431 528.412 267.551 cv
528.292 267.671 li
528.172 267.791 528.172 267.791 528.052 267.911 cv
527.932 268.031 li
527.812 268.031 li
527.812 268.151 527.812 268.151 527.692 268.151 cv
527.692 268.151 li
527.572 268.151 527.572 268.151 527.572 268.031 cv
520.372 264.671 li
520.252 264.551 520.252 264.551 520.132 264.551 cv
520.132 264.431 520.132 264.431 520.132 264.431 cv
520.132 264.311 520.132 264.311 520.252 264.191 cv
520.252 264.191 520.372 264.071 520.372 263.951 cv
520.492 263.831 520.612 263.831 520.612 263.831 cv
520.732 263.711 520.732 263.711 520.732 263.711 cv
520.852 263.711 520.852 263.711 520.852 263.711 cv
520.972 263.711 li
527.452 266.951 li
527.452 266.831 li
524.212 260.471 li
524.212 260.351 li
524.212 260.351 524.212 260.351 524.212 260.231 cv
524.212 260.231 524.212 260.111 524.332 260.111 cv
524.332 259.991 524.452 259.991 524.452 259.871 cv
524.572 259.751 524.692 259.751 524.692 259.631 cv
524.812 259.631 524.812 259.631 524.932 259.631 cv
524.932 259.631 524.932 259.631 525.052 259.631 cv
525.052 259.751 525.052 259.751 525.172 259.871 cv
cp
534.412 260.831 mo
534.532 260.831 534.532 260.951 534.652 260.951 cv
534.652 261.071 534.652 261.071 534.652 261.071 cv
534.652 261.191 534.652 261.191 534.652 261.191 cv
534.652 261.311 li
531.892 264.071 li
531.772 264.071 531.772 264.191 531.652 264.191 cv
531.532 264.191 531.412 264.071 531.292 264.071 cv
526.132 258.911 li
526.012 258.791 526.012 258.671 526.012 258.551 cv
526.012 258.431 526.132 258.431 526.132 258.311 cv
528.892 255.551 li
529.012 255.551 529.012 255.551 529.012 255.551 cv
529.132 255.551 529.132 255.551 529.132 255.671 cv
529.252 255.671 529.252 255.671 529.372 255.791 cv
529.492 255.911 li
529.492 256.031 li
529.492 256.151 li
529.492 256.151 529.492 256.151 529.492 256.271 cv
527.212 258.431 li
529.012 260.231 li
530.932 258.311 li
531.052 258.311 531.052 258.311 531.052 258.311 cv
531.172 258.311 li
531.292 258.311 li
531.292 258.431 531.412 258.431 531.412 258.551 cv
531.532 258.551 531.532 258.551 531.532 258.671 cv
531.652 258.671 531.652 258.791 531.652 258.791 cv
531.652 258.791 531.652 258.791 531.652 258.911 cv
531.652 258.911 li
529.612 260.831 li
531.772 262.871 li
534.052 260.711 li
534.052 260.591 534.052 260.591 534.052 260.591 cv
534.172 260.591 li
534.172 260.591 534.292 260.591 534.292 260.711 cv
534.412 260.711 534.412 260.711 534.412 260.831 cv
cp
539.692 256.031 mo
539.692 256.031 539.692 256.031 539.692 256.151 cv
539.692 256.151 li
539.692 256.271 539.692 256.271 539.572 256.391 cv
539.572 256.391 539.452 256.511 539.332 256.631 cv
539.212 256.751 li
539.092 256.751 539.092 256.871 539.092 256.871 cv
538.972 256.871 538.972 256.871 538.972 256.871 cv
538.852 256.871 538.852 256.871 538.852 256.871 cv
536.932 256.031 li
536.692 255.911 536.452 255.791 536.332 255.791 cv
536.092 255.671 535.972 255.671 535.732 255.671 cv
535.492 255.671 535.372 255.671 535.132 255.791 cv
535.012 255.791 534.892 255.911 534.652 256.151 cv
534.172 256.631 li
536.572 259.031 li
536.572 259.151 536.692 259.151 536.692 259.151 cv
536.692 259.151 536.692 259.271 536.572 259.271 cv
536.572 259.391 li
536.452 259.511 536.452 259.511 536.332 259.631 cv
536.212 259.751 li
536.092 259.871 536.092 259.871 535.972 259.871 cv
535.972 259.871 li
535.852 259.871 535.852 259.871 535.852 259.871 cv
530.572 254.591 li
530.452 254.471 530.332 254.351 530.332 254.231 cv
530.332 254.111 530.452 253.991 530.452 253.991 cv
531.772 252.791 li
531.892 252.551 532.012 252.431 532.132 252.431 cv
532.252 252.311 532.252 252.191 532.372 252.191 cv
532.612 251.951 532.852 251.831 533.092 251.711 cv
533.452 251.711 533.692 251.591 533.932 251.591 cv
534.172 251.591 534.412 251.711 534.532 251.831 cv
534.772 251.951 535.012 252.071 535.252 252.311 cv
535.372 252.431 535.492 252.671 535.612 252.911 cv
535.732 253.031 535.852 253.271 535.852 253.511 cv
535.852 253.751 535.852 253.871 535.732 254.111 cv
535.732 254.351 535.612 254.591 535.492 254.831 cv
535.732 254.711 535.852 254.711 535.972 254.711 cv
536.092 254.711 536.212 254.711 536.452 254.711 cv
536.572 254.711 536.692 254.831 536.932 254.831 cv
537.052 254.951 537.292 254.951 537.412 255.071 cv
539.212 255.791 li
539.332 255.911 539.452 255.911 539.572 255.911 cv
539.572 256.031 539.692 256.031 539.692 256.031 cv
cp
534.532 253.151 mo
534.292 252.911 534.052 252.791 533.812 252.671 cv
533.452 252.671 533.212 252.791 532.972 252.911 cv
532.852 252.911 532.732 253.031 532.612 253.151 cv
532.492 253.151 532.372 253.271 532.252 253.511 cv
531.652 254.111 li
533.572 256.031 li
534.292 255.311 li
534.532 255.071 534.652 254.831 534.772 254.711 cv
534.772 254.471 534.892 254.351 534.892 254.111 cv
534.892 253.991 534.892 253.751 534.772 253.631 cv
534.772 253.391 534.652 253.271 534.532 253.151 cv
cp
f
541.972 279.071 mo
542.092 279.071 542.092 279.071 542.092 279.191 cv
542.212 279.191 542.212 279.191 542.212 279.311 cv
542.212 279.311 542.212 279.311 542.092 279.431 cv
542.092 279.431 541.972 279.551 541.972 279.671 cv
541.852 279.791 541.732 279.791 541.732 279.911 cv
541.612 279.911 541.612 279.911 541.492 279.911 cv
541.492 280.031 541.492 280.031 541.492 280.031 cv
541.372 280.031 541.372 279.911 541.372 279.911 cv
539.452 279.071 li
537.052 281.471 li
538.012 283.271 li
538.012 283.391 li
538.012 283.511 li
537.892 283.631 li
537.892 283.751 537.772 283.751 537.652 283.871 cv
537.652 283.991 537.532 283.991 537.532 284.111 cv
537.412 284.111 537.412 284.111 537.292 284.111 cv
537.292 284.111 537.292 284.111 537.172 284.111 cv
537.172 283.991 537.172 283.991 537.052 283.871 cv
533.692 276.671 li
533.692 276.551 533.692 276.551 533.692 276.551 cv
533.692 276.431 533.692 276.431 533.692 276.311 cv
533.692 276.311 533.812 276.311 533.812 276.191 cv
533.812 276.191 533.932 276.071 534.052 275.951 cv
534.172 275.831 534.172 275.831 534.292 275.711 cv
534.412 275.591 li
534.532 275.591 534.532 275.591 534.532 275.591 cv
534.652 275.591 534.652 275.591 534.652 275.591 cv
cp
534.772 276.791 mo
534.772 276.791 li
536.692 280.631 li
538.612 278.591 li
cp
541.372 269.351 mo
541.372 269.471 541.372 269.471 541.492 269.591 cv
541.492 269.591 541.492 269.591 541.492 269.711 cv
541.492 269.711 541.492 269.711 541.492 269.831 cv
541.492 269.831 li
539.932 271.511 li
544.852 276.431 li
544.852 276.431 544.852 276.431 544.852 276.551 cv
544.852 276.551 544.852 276.551 544.852 276.671 cv
544.852 276.671 544.852 276.671 544.732 276.791 cv
544.732 276.791 544.732 276.911 544.612 276.911 cv
544.492 277.031 544.492 277.031 544.372 277.151 cv
544.372 277.151 544.252 277.151 544.252 277.271 cv
544.252 277.271 544.252 277.271 544.132 277.271 cv
544.132 277.271 544.132 277.271 544.132 277.151 cv
539.092 272.231 li
537.532 273.791 li
537.532 273.911 537.412 273.911 537.412 273.911 cv
537.412 273.911 537.412 273.911 537.292 273.911 cv
537.292 273.911 537.292 273.791 537.172 273.791 cv
537.052 273.671 li
536.932 273.671 536.932 273.551 536.932 273.551 cv
536.812 273.431 536.812 273.431 536.812 273.431 cv
536.812 273.311 536.812 273.311 536.812 273.311 cv
536.812 273.191 536.812 273.191 536.812 273.191 cv
540.892 269.231 li
540.892 269.111 li
541.012 269.111 541.012 269.111 541.012 269.111 cv
541.012 269.231 541.132 269.231 541.132 269.231 cv
541.252 269.231 541.252 269.351 541.372 269.351 cv
cp
545.812 264.911 mo
545.932 265.031 li
545.932 265.151 546.052 265.151 546.052 265.151 cv
546.052 265.271 546.052 265.271 546.052 265.271 cv
545.932 265.391 li
544.372 266.951 li
549.292 271.991 li
549.412 271.991 li
549.412 272.111 549.412 272.111 549.292 272.111 cv
549.292 272.231 549.292 272.231 549.292 272.231 cv
549.172 272.351 549.172 272.351 549.052 272.471 cv
549.052 272.591 548.932 272.591 548.932 272.711 cv
548.812 272.711 548.812 272.711 548.692 272.711 cv
548.692 272.711 548.692 272.831 548.692 272.711 cv
548.572 272.711 548.572 272.711 548.572 272.711 cv
543.532 267.791 li
541.972 269.351 li
541.972 269.351 541.972 269.351 541.852 269.351 cv
541.852 269.471 541.852 269.471 541.852 269.351 cv
541.732 269.351 541.732 269.351 541.612 269.351 cv
541.612 269.351 541.612 269.231 541.492 269.231 cv
541.492 269.111 541.372 269.111 541.372 268.991 cv
541.372 268.991 541.252 268.991 541.252 268.871 cv
541.252 268.871 541.252 268.871 541.252 268.751 cv
541.252 268.751 541.252 268.751 541.372 268.751 cv
545.332 264.671 li
545.332 264.671 545.332 264.671 545.452 264.671 cv
545.452 264.671 li
545.572 264.671 545.572 264.671 545.692 264.791 cv
545.692 264.791 545.692 264.911 545.812 264.911 cv
cp
558.172 263.111 mo
558.292 263.111 li
558.292 263.231 558.292 263.231 558.172 263.231 cv
558.172 263.351 558.172 263.351 558.172 263.351 cv
558.052 263.471 558.052 263.471 557.932 263.591 cv
557.932 263.711 557.812 263.711 557.812 263.831 cv
557.692 263.831 557.692 263.831 557.572 263.831 cv
557.572 263.831 557.572 263.951 557.572 263.831 cv
557.452 263.831 557.452 263.831 557.452 263.831 cv
552.412 258.791 li
552.412 258.911 li
555.412 265.871 li
555.412 265.991 li
555.412 266.111 li
555.412 266.111 555.412 266.231 555.292 266.231 cv
555.292 266.231 555.292 266.351 555.172 266.351 cv
555.172 266.471 555.052 266.471 555.052 266.591 cv
554.932 266.591 554.932 266.591 554.932 266.591 cv
554.812 266.591 554.812 266.711 554.812 266.711 cv
554.692 266.711 554.692 266.591 554.692 266.591 cv
547.732 263.591 li
552.772 268.511 li
552.772 268.631 552.772 268.631 552.772 268.631 cv
552.772 268.751 li
552.652 268.871 li
552.652 268.991 552.532 268.991 552.532 269.111 cv
552.412 269.111 552.292 269.231 552.292 269.231 cv
552.292 269.351 552.172 269.351 552.172 269.351 cv
552.052 269.351 552.052 269.351 552.052 269.351 cv
552.052 269.351 552.052 269.351 551.932 269.351 cv
546.652 264.071 li
546.532 263.951 546.532 263.831 546.532 263.711 cv
546.532 263.591 546.532 263.471 546.652 263.351 cv
547.132 262.871 li
547.252 262.871 547.372 262.751 547.372 262.631 cv
547.492 262.631 547.612 262.631 547.732 262.631 cv
547.732 262.511 547.852 262.511 547.972 262.631 cv
548.092 262.631 548.212 262.631 548.332 262.751 cv
554.092 265.271 li
554.092 265.151 li
551.692 259.391 li
551.572 259.271 551.572 259.151 551.572 259.031 cv
551.572 258.911 551.452 258.791 551.572 258.791 cv
551.572 258.671 551.572 258.551 551.572 258.551 cv
551.692 258.431 551.692 258.311 551.812 258.311 cv
552.292 257.831 li
552.292 257.711 552.292 257.711 552.412 257.711 cv
552.532 257.591 li
552.652 257.591 552.652 257.711 552.772 257.711 cv
552.772 257.711 552.892 257.711 552.892 257.831 cv
cp
560.452 260.831 mo
560.572 260.831 li
560.572 260.951 560.572 260.951 560.452 260.951 cv
560.452 261.071 560.452 261.071 560.452 261.191 cv
560.332 261.191 560.332 261.311 560.212 261.311 cv
560.212 261.431 560.092 261.431 560.092 261.551 cv
559.972 261.551 559.972 261.551 559.852 261.551 cv
559.852 261.671 559.852 261.671 559.852 261.671 cv
559.732 261.551 559.732 261.551 559.732 261.551 cv
554.212 256.031 li
554.212 255.911 554.212 255.911 554.212 255.911 cv
554.212 255.791 554.212 255.791 554.332 255.791 cv
554.332 255.671 554.332 255.671 554.452 255.551 cv
554.572 255.431 554.572 255.431 554.692 255.431 cv
554.692 255.311 554.692 255.311 554.812 255.311 cv
554.812 255.311 554.812 255.311 554.932 255.311 cv
554.932 255.311 li
cp
560.332 250.391 mo
560.452 250.511 li
560.452 250.631 560.452 250.631 560.572 250.631 cv
560.572 250.751 560.572 250.751 560.572 250.751 cv
560.452 250.871 li
558.892 252.431 li
563.812 257.471 li
563.932 257.471 li
563.932 257.591 563.932 257.591 563.812 257.591 cv
563.812 257.711 563.812 257.711 563.812 257.711 cv
563.692 257.831 563.692 257.951 563.572 257.951 cv
563.572 258.071 563.452 258.071 563.452 258.191 cv
563.332 258.191 563.332 258.191 563.212 258.191 cv
563.212 258.191 563.212 258.311 563.212 258.191 cv
563.092 258.191 563.092 258.191 563.092 258.191 cv
558.052 253.271 li
556.492 254.831 li
556.492 254.831 556.492 254.831 556.372 254.951 cv
556.372 254.951 556.372 254.951 556.252 254.831 cv
556.252 254.831 556.252 254.831 556.132 254.831 cv
556.132 254.831 556.132 254.711 556.012 254.711 cv
556.012 254.591 555.892 254.591 555.892 254.471 cv
555.892 254.471 555.772 254.471 555.772 254.351 cv
555.772 254.351 555.772 254.351 555.772 254.231 cv
555.772 254.231 555.772 254.231 555.892 254.231 cv
559.852 250.271 li
559.852 250.151 559.852 250.151 559.972 250.151 cv
559.972 250.151 li
560.092 250.151 560.092 250.271 560.212 250.271 cv
560.212 250.271 560.212 250.391 560.332 250.391 cv
cp
f
577.372 269.591 mo
577.372 269.591 li
577.372 269.711 577.372 269.711 577.372 269.711 cv
577.372 269.831 577.252 269.831 577.252 269.831 cv
577.252 269.951 577.132 269.951 577.132 270.071 cv
577.012 270.191 577.012 270.191 576.892 270.191 cv
576.892 270.311 576.772 270.311 576.772 270.311 cv
576.652 270.311 li
576.532 270.311 li
571.612 265.271 li
574.612 272.351 li
574.612 272.471 li
574.612 272.471 574.612 272.471 574.492 272.591 cv
574.492 272.711 li
574.372 272.711 574.372 272.831 574.252 272.831 cv
574.252 272.951 574.132 272.951 574.132 272.951 cv
574.132 273.071 574.012 273.071 574.012 273.071 cv
573.892 273.071 li
573.892 273.071 573.892 273.071 573.772 273.071 cv
566.812 270.071 li
571.852 274.991 li
571.852 275.111 li
571.852 275.111 571.852 275.111 571.852 275.231 cv
571.852 275.231 571.852 275.351 571.732 275.351 cv
571.732 275.471 571.732 275.471 571.612 275.591 cv
571.492 275.591 571.492 275.711 571.372 275.711 cv
571.372 275.711 571.372 275.831 571.252 275.831 cv
571.252 275.831 571.252 275.831 571.132 275.831 cv
571.132 275.831 li
565.852 270.551 li
565.732 270.431 565.612 270.311 565.612 270.191 cv
565.612 270.071 565.732 269.951 565.852 269.831 cv
566.212 269.351 li
566.332 269.231 566.452 269.231 566.572 269.111 cv
566.692 269.111 566.692 269.111 566.812 269.111 cv
566.932 268.991 567.052 268.991 567.052 269.111 cv
567.172 269.111 567.292 269.111 567.412 269.231 cv
573.172 271.631 li
570.772 265.871 li
570.772 265.751 570.652 265.631 570.652 265.511 cv
570.652 265.391 570.652 265.271 570.652 265.271 cv
570.652 265.151 570.652 265.031 570.772 265.031 cv
570.772 264.911 570.772 264.791 570.892 264.791 cv
571.372 264.311 li
571.372 264.191 571.492 264.191 571.492 264.191 cv
571.612 264.071 571.612 264.071 571.732 264.071 cv
571.732 264.071 571.852 264.071 571.852 264.191 cv
571.972 264.191 571.972 264.191 572.092 264.311 cv
cp
583.012 263.591 mo
583.132 263.711 li
583.252 263.711 583.252 263.831 583.252 263.831 cv
583.252 263.831 583.252 263.951 583.132 263.951 cv
583.132 264.071 583.012 264.191 582.892 264.191 cv
582.892 264.311 582.772 264.431 582.772 264.431 cv
582.652 264.431 582.652 264.551 582.532 264.551 cv
582.532 264.551 582.532 264.551 582.412 264.551 cv
582.412 264.551 li
580.492 263.591 li
578.092 265.991 li
579.052 267.911 li
579.052 268.031 579.052 268.031 579.052 268.031 cv
579.052 268.151 578.932 268.151 578.932 268.271 cv
578.932 268.271 578.812 268.391 578.692 268.391 cv
578.692 268.511 578.572 268.631 578.452 268.631 cv
578.452 268.631 578.452 268.751 578.332 268.751 cv
578.212 268.631 li
578.212 268.631 578.212 268.511 578.092 268.511 cv
574.732 261.191 li
574.732 261.071 li
574.732 260.951 li
574.732 260.951 574.732 260.831 574.852 260.831 cv
574.852 260.711 574.972 260.591 575.092 260.591 cv
575.092 260.471 575.212 260.351 575.332 260.351 cv
575.332 260.231 575.452 260.231 575.452 260.231 cv
575.452 260.111 575.572 260.111 575.572 260.111 cv
575.692 260.111 575.692 260.231 575.692 260.231 cv
cp
575.812 261.311 mo
575.812 261.311 li
577.732 265.271 li
579.652 263.231 li
cp
584.932 261.911 mo
584.932 262.031 584.932 262.031 584.932 262.031 cv
584.932 262.151 li
584.932 262.151 584.932 262.271 584.812 262.271 cv
584.812 262.391 584.812 262.391 584.692 262.511 cv
584.572 262.511 584.572 262.631 584.452 262.631 cv
584.452 262.751 584.332 262.751 584.332 262.751 cv
584.212 262.751 li
578.692 257.231 li
578.572 257.111 li
578.572 257.111 578.572 257.111 578.692 256.991 cv
578.692 256.991 578.692 256.991 578.692 256.871 cv
578.812 256.871 578.812 256.751 578.932 256.751 cv
578.932 256.631 579.052 256.511 579.052 256.511 cv
579.172 256.511 579.172 256.391 579.292 256.391 cv
579.292 256.391 li
579.412 256.391 579.412 256.391 579.412 256.511 cv
cp
587.932 253.271 mo
588.412 253.751 588.772 254.351 589.012 254.831 cv
589.252 255.311 589.372 255.791 589.372 256.271 cv
589.372 256.751 589.252 257.231 589.012 257.711 cv
588.772 258.191 588.412 258.671 587.932 259.151 cv
586.732 260.351 li
586.612 260.471 586.612 260.471 586.492 260.471 cv
586.372 260.471 586.252 260.471 586.132 260.351 cv
581.092 255.191 li
580.972 255.071 580.852 254.951 580.852 254.951 cv
580.852 254.831 580.972 254.711 580.972 254.591 cv
582.292 253.391 li
582.772 252.791 583.252 252.551 583.732 252.311 cv
584.212 252.071 584.692 251.951 585.172 251.951 cv
585.652 251.951 586.132 252.071 586.612 252.311 cv
587.092 252.551 587.452 252.911 587.932 253.271 cv
cp
587.092 254.111 mo
586.852 253.871 586.492 253.631 586.132 253.391 cv
585.772 253.151 585.412 253.031 585.052 253.031 cv
584.692 253.031 584.332 253.031 583.972 253.271 cv
583.612 253.391 583.252 253.631 582.892 253.991 cv
582.172 254.831 li
586.612 259.271 li
587.332 258.431 li
587.692 258.071 588.052 257.711 588.172 257.351 cv
588.292 257.111 588.412 256.751 588.412 256.391 cv
588.292 256.031 588.172 255.671 588.052 255.311 cv
587.812 254.951 587.572 254.471 587.092 254.111 cv
cp
f
607.012 265.511 mo
607.012 265.511 607.012 265.511 607.012 265.631 cv
607.012 265.631 li
607.012 265.751 607.012 265.751 606.892 265.871 cv
606.772 265.991 li
606.652 266.111 606.652 266.111 606.532 266.231 cv
606.412 266.231 li
606.412 266.351 606.292 266.351 606.292 266.351 cv
606.292 266.351 606.292 266.231 606.172 266.231 cv
601.252 261.311 li
604.252 268.271 li
604.252 268.391 604.252 268.391 604.252 268.391 cv
604.252 268.511 li
604.132 268.511 604.132 268.631 604.132 268.631 cv
604.012 268.751 604.012 268.751 604.012 268.751 cv
603.892 268.871 603.892 268.871 603.772 268.991 cv
603.652 268.991 li
603.652 269.111 603.532 269.111 603.532 269.111 cv
603.532 269.111 603.532 269.111 603.412 269.111 cv
596.572 265.991 li
601.492 271.031 li
601.492 271.031 601.492 271.031 601.612 271.031 cv
601.612 271.031 601.612 271.151 601.492 271.151 cv
601.492 271.271 li
601.372 271.391 601.372 271.391 601.252 271.511 cv
601.132 271.631 601.132 271.631 601.012 271.631 cv
601.012 271.751 601.012 271.751 600.892 271.751 cv
600.892 271.751 600.892 271.751 600.772 271.751 cv
600.772 271.751 li
595.492 266.471 li
595.372 266.351 595.252 266.231 595.252 266.111 cv
595.372 265.991 595.372 265.871 595.492 265.751 cv
595.972 265.271 li
595.972 265.271 596.092 265.151 596.212 265.151 cv
596.332 265.031 596.332 265.031 596.452 265.031 cv
596.572 265.031 596.692 265.031 596.692 265.031 cv
596.812 265.031 596.932 265.031 597.052 265.151 cv
602.812 267.671 li
600.412 261.791 li
600.412 261.671 600.292 261.551 600.292 261.431 cv
600.292 261.311 600.292 261.191 600.292 261.191 cv
600.292 261.071 600.292 260.951 600.412 260.951 cv
600.412 260.831 600.412 260.831 600.532 260.711 cv
601.012 260.231 li
601.132 260.111 601.132 260.111 601.132 260.111 cv
601.252 260.111 601.252 260.111 601.372 260.111 cv
601.492 260.111 li
601.612 260.111 601.612 260.111 601.732 260.231 cv
cp
612.652 259.511 mo
612.772 259.631 612.772 259.631 612.772 259.631 cv
612.892 259.751 612.892 259.751 612.892 259.751 cv
612.892 259.871 612.892 259.871 612.772 259.991 cv
612.772 259.991 612.652 260.111 612.652 260.231 cv
612.532 260.231 612.412 260.351 612.412 260.351 cv
612.292 260.471 612.292 260.471 612.172 260.471 cv
612.172 260.471 li
612.052 260.471 612.052 260.471 612.052 260.471 cv
610.132 259.631 li
607.732 261.911 li
608.692 263.831 li
608.692 263.831 608.692 263.831 608.692 263.951 cv
608.692 263.951 608.692 263.951 608.692 264.071 cv
608.692 264.071 608.572 264.071 608.572 264.191 cv
608.572 264.191 608.452 264.311 608.332 264.431 cv
608.212 264.551 li
608.092 264.671 608.092 264.671 607.972 264.671 cv
607.972 264.671 607.972 264.671 607.852 264.551 cv
607.852 264.551 607.852 264.431 607.732 264.431 cv
604.372 257.111 li
604.372 257.111 604.372 257.111 604.372 256.991 cv
604.372 256.991 604.372 256.991 604.372 256.871 cv
604.372 256.871 604.372 256.751 604.492 256.751 cv
604.492 256.631 604.612 256.631 604.732 256.511 cv
604.732 256.391 604.852 256.271 604.972 256.271 cv
605.092 256.151 li
605.212 256.151 605.212 256.151 605.212 256.151 cv
605.332 256.151 605.332 256.151 605.332 256.151 cv
cp
605.452 257.351 mo
605.452 257.351 li
607.372 261.191 li
609.292 259.151 li
cp
616.612 255.431 mo
616.612 255.551 616.732 255.551 616.732 255.671 cv
616.732 255.671 616.732 255.671 616.732 255.791 cv
616.852 255.791 616.852 255.791 616.852 255.911 cv
616.732 255.911 616.732 255.911 616.732 255.911 cv
614.212 258.551 li
614.092 258.551 614.092 258.551 613.972 258.671 cv
613.852 258.671 613.732 258.551 613.612 258.431 cv
608.332 253.151 li
608.332 253.151 608.332 253.151 608.212 253.031 cv
608.212 253.031 608.212 253.031 608.332 253.031 cv
608.332 252.911 608.332 252.911 608.332 252.791 cv
608.452 252.791 608.452 252.671 608.572 252.671 cv
608.572 252.551 608.692 252.551 608.692 252.431 cv
608.812 252.431 608.812 252.431 608.932 252.431 cv
608.932 252.311 608.932 252.311 609.052 252.311 cv
609.052 252.431 li
613.972 257.351 li
616.132 255.311 li
616.252 255.191 616.252 255.311 616.252 255.311 cv
616.372 255.311 616.372 255.311 616.372 255.311 cv
616.492 255.431 616.492 255.431 616.612 255.431 cv
cp
f
625.132 271.511 mo
625.252 271.511 625.252 271.631 625.252 271.631 cv
625.372 271.631 625.372 271.751 625.372 271.751 cv
625.372 271.871 li
625.372 271.871 625.492 271.871 625.492 271.991 cv
625.492 271.991 625.372 272.111 625.372 272.351 cv
625.372 272.471 625.252 272.591 625.252 272.831 cv
625.132 273.071 625.012 273.191 624.892 273.431 cv
624.772 273.671 624.532 273.911 624.292 274.151 cv
623.932 274.511 623.572 274.751 623.092 274.991 cv
622.732 275.111 622.252 275.231 621.772 275.111 cv
621.412 275.111 620.932 274.991 620.452 274.751 cv
619.972 274.511 619.492 274.151 619.012 273.671 cv
618.532 273.191 618.172 272.711 617.932 272.231 cv
617.692 271.751 617.572 271.271 617.572 270.791 cv
617.452 270.311 617.572 269.831 617.692 269.351 cv
617.932 268.991 618.172 268.511 618.532 268.151 cv
618.772 268.031 618.892 267.791 619.132 267.671 cv
619.252 267.551 619.492 267.431 619.612 267.431 cv
619.852 267.311 619.972 267.311 620.092 267.191 cv
620.332 267.191 620.452 267.191 620.572 267.191 cv
620.692 267.191 li
620.692 267.191 620.692 267.191 620.812 267.191 cv
620.812 267.191 620.812 267.311 620.932 267.311 cv
620.932 267.311 621.052 267.311 621.052 267.431 cv
621.172 267.551 li
621.172 267.671 621.292 267.671 621.292 267.671 cv
621.292 267.791 621.292 267.791 621.292 267.791 cv
621.292 267.911 li
621.172 267.911 621.172 267.911 620.932 268.031 cv
620.812 268.031 620.692 268.031 620.452 268.031 cv
620.332 268.151 620.092 268.151 619.852 268.271 cv
619.612 268.391 619.492 268.631 619.252 268.871 cv
618.892 269.111 618.772 269.351 618.652 269.711 cv
618.532 269.951 618.532 270.311 618.532 270.671 cv
618.652 271.031 618.772 271.391 618.892 271.751 cv
619.132 272.111 619.492 272.471 619.852 272.831 cv
620.212 273.191 620.572 273.431 620.932 273.671 cv
621.292 273.911 621.532 274.031 621.892 274.031 cv
622.252 274.031 622.612 274.031 622.852 273.911 cv
623.212 273.791 623.452 273.671 623.812 273.311 cv
623.932 273.071 624.172 272.951 624.292 272.711 cv
624.412 272.471 624.412 272.231 624.532 271.991 cv
624.532 271.871 624.652 271.631 624.652 271.511 cv
624.652 271.391 624.652 271.391 624.772 271.271 cv
624.772 271.271 li
624.892 271.271 li
624.892 271.271 625.012 271.271 625.012 271.391 cv
625.012 271.391 625.132 271.391 625.132 271.511 cv
cp
628.852 263.591 mo
629.332 264.071 629.692 264.551 629.932 265.031 cv
630.172 265.511 630.412 265.991 630.412 266.471 cv
630.412 266.951 630.412 267.431 630.172 267.911 cv
630.052 268.271 629.692 268.751 629.212 269.231 cv
628.852 269.591 628.372 269.951 628.012 270.191 cv
627.532 270.311 627.052 270.431 626.572 270.311 cv
626.212 270.311 625.732 270.191 625.252 269.951 cv
624.772 269.591 624.292 269.231 623.812 268.751 cv
623.332 268.391 623.092 267.911 622.732 267.431 cv
622.492 266.951 622.372 266.471 622.372 265.991 cv
622.252 265.511 622.372 265.031 622.492 264.551 cv
622.732 264.071 623.092 263.591 623.452 263.231 cv
623.932 262.751 624.292 262.511 624.772 262.271 cv
625.252 262.151 625.612 262.031 626.092 262.031 cv
626.572 262.031 627.052 262.271 627.532 262.511 cv
627.892 262.751 628.372 263.111 628.852 263.591 cv
cp
628.132 264.431 mo
627.772 264.071 627.412 263.831 627.172 263.591 cv
626.812 263.351 626.452 263.231 626.092 263.231 cv
625.732 263.111 625.492 263.111 625.132 263.231 cv
624.772 263.351 624.412 263.591 624.052 263.831 cv
623.812 264.191 623.572 264.551 623.452 264.911 cv
623.332 265.271 623.332 265.631 623.452 265.991 cv
623.452 266.351 623.572 266.591 623.812 266.951 cv
624.052 267.311 624.292 267.671 624.652 267.911 cv
624.892 268.271 625.252 268.511 625.612 268.751 cv
625.972 268.991 626.332 269.111 626.572 269.231 cv
626.932 269.351 627.292 269.231 627.652 269.231 cv
628.012 269.111 628.252 268.871 628.612 268.511 cv
628.972 268.151 629.212 267.791 629.332 267.431 cv
629.452 267.191 629.452 266.831 629.332 266.471 cv
629.332 266.111 629.092 265.751 628.852 265.391 cv
628.732 265.031 628.372 264.791 628.132 264.431 cv
cp
637.012 260.591 mo
637.132 260.711 637.132 260.711 637.132 260.831 cv
637.252 260.831 637.252 260.951 637.252 260.951 cv
637.252 261.071 637.132 261.071 637.132 261.191 cv
637.132 261.191 637.132 261.191 637.012 261.311 cv
636.772 261.551 li
636.772 261.551 636.652 261.671 636.532 261.671 cv
636.532 261.791 636.412 261.791 636.292 261.791 cv
636.172 261.791 636.052 261.791 635.932 261.791 cv
635.812 261.791 635.692 261.671 635.572 261.671 cv
630.532 260.111 li
630.292 260.111 630.052 259.991 629.692 259.871 cv
629.452 259.751 629.212 259.751 628.972 259.631 cv
628.852 259.631 li
629.092 259.871 629.332 259.991 629.572 260.231 cv
629.812 260.471 630.052 260.711 630.292 260.951 cv
633.652 264.431 li
633.772 264.431 633.772 264.431 633.772 264.431 cv
633.772 264.551 633.772 264.551 633.772 264.551 cv
633.652 264.551 633.652 264.671 633.652 264.671 cv
633.532 264.791 633.532 264.791 633.412 264.911 cv
633.412 265.031 633.292 265.031 633.292 265.031 cv
633.172 265.151 633.172 265.151 633.172 265.151 cv
633.052 265.151 633.052 265.151 633.052 265.151 cv
632.932 265.151 632.932 265.151 632.932 265.151 cv
627.652 259.871 li
627.532 259.751 627.532 259.631 627.532 259.511 cv
627.532 259.391 627.532 259.271 627.652 259.151 cv
628.012 258.791 li
628.132 258.791 628.132 258.671 628.252 258.671 cv
628.372 258.551 628.372 258.551 628.492 258.551 cv
628.612 258.551 628.612 258.551 628.732 258.551 cv
628.852 258.551 628.972 258.551 629.092 258.671 cv
633.052 259.871 li
633.292 259.871 633.412 259.991 633.652 259.991 cv
633.892 260.111 634.132 260.111 634.372 260.231 cv
634.612 260.351 634.732 260.351 634.972 260.471 cv
635.212 260.471 635.332 260.591 635.572 260.591 cv
635.332 260.471 635.092 260.231 634.852 259.871 cv
634.612 259.631 634.372 259.391 634.132 259.151 cv
631.012 256.031 li
631.012 255.911 li
631.012 255.911 631.012 255.791 631.132 255.791 cv
631.132 255.671 631.132 255.671 631.252 255.551 cv
631.372 255.431 631.372 255.431 631.492 255.431 cv
631.492 255.311 631.612 255.311 631.612 255.311 cv
631.732 255.311 li
cp
637.012 250.511 mo
637.132 250.511 637.132 250.511 637.132 250.631 cv
637.252 250.631 637.252 250.751 637.252 250.751 cv
637.252 250.871 li
635.572 252.551 li
640.612 257.471 li
640.612 257.591 640.612 257.591 640.612 257.591 cv
640.612 257.711 li
640.492 257.831 li
640.492 257.951 640.372 257.951 640.372 258.071 cv
640.252 258.071 640.252 258.191 640.132 258.191 cv
640.012 258.311 li
639.892 258.311 li
639.892 258.311 639.892 258.311 639.772 258.311 cv
634.852 253.271 li
633.172 254.951 li
633.052 254.951 li
633.052 254.951 632.932 254.951 632.932 254.831 cv
632.812 254.831 632.812 254.831 632.812 254.711 cv
632.692 254.711 632.692 254.591 632.572 254.591 cv
632.572 254.471 li
632.572 254.351 li
632.572 254.231 li
636.532 250.271 li
636.652 250.271 li
636.772 250.271 li
636.892 250.271 li
636.892 250.391 637.012 250.391 637.012 250.511 cv
cp
f
655.972 267.671 mo
655.972 267.791 655.972 267.791 655.972 267.791 cv
655.972 267.911 li
655.972 267.911 655.972 268.031 655.852 268.031 cv
655.852 268.151 655.732 268.151 655.732 268.271 cv
655.612 268.271 655.612 268.391 655.492 268.391 cv
655.492 268.511 655.372 268.511 655.372 268.511 cv
655.252 268.511 li
655.252 268.511 655.252 268.511 655.132 268.511 cv
650.212 263.471 li
653.212 270.551 li
653.212 270.551 653.212 270.551 653.212 270.671 cv
653.212 270.671 653.212 270.671 653.212 270.791 cv
653.092 270.791 653.092 270.791 653.092 270.911 cv
652.972 271.031 li
652.852 271.151 652.852 271.151 652.732 271.151 cv
652.732 271.271 652.612 271.271 652.612 271.271 cv
652.492 271.271 li
645.532 268.151 li
650.452 273.191 li
650.452 273.191 650.572 273.191 650.572 273.311 cv
650.572 273.311 650.572 273.311 650.452 273.431 cv
650.452 273.431 650.452 273.431 650.452 273.551 cv
650.332 273.551 650.332 273.671 650.212 273.671 cv
650.212 273.791 650.092 273.911 650.092 273.911 cv
649.972 273.911 649.972 274.031 649.852 274.031 cv
649.852 274.031 li
649.732 274.031 649.732 274.031 649.732 273.911 cv
644.452 268.631 li
644.332 268.511 644.212 268.391 644.332 268.271 cv
644.332 268.151 644.332 268.151 644.452 268.031 cv
644.932 267.551 li
644.932 267.431 645.052 267.431 645.172 267.311 cv
645.292 267.311 645.292 267.191 645.412 267.191 cv
645.532 267.191 645.652 267.191 645.772 267.191 cv
645.772 267.311 645.892 267.311 646.012 267.311 cv
651.772 269.831 li
651.892 269.831 li
649.372 263.951 li
649.372 263.831 649.252 263.711 649.252 263.711 cv
649.252 263.591 649.252 263.471 649.252 263.351 cv
649.252 263.351 649.252 263.231 649.372 263.111 cv
649.372 263.111 649.492 262.991 649.492 262.871 cv
649.972 262.391 li
650.092 262.391 650.092 262.391 650.212 262.271 cv
650.212 262.271 650.212 262.271 650.332 262.271 cv
650.452 262.271 li
650.572 262.391 650.572 262.391 650.692 262.511 cv
cp
658.252 265.511 mo
658.252 265.511 li
658.252 265.631 li
658.252 265.631 658.252 265.751 658.132 265.751 cv
658.132 265.871 658.012 265.871 658.012 265.991 cv
657.892 265.991 657.892 266.111 657.772 266.111 cv
657.772 266.231 657.652 266.231 657.652 266.231 cv
657.532 266.231 li
657.532 266.231 657.532 266.231 657.412 266.231 cv
652.012 260.711 li
651.892 260.711 651.892 260.711 651.892 260.591 cv
651.892 260.591 651.892 260.591 651.892 260.471 cv
652.012 260.471 652.012 260.471 652.012 260.351 cv
652.132 260.351 652.132 260.231 652.252 260.231 cv
652.252 260.111 652.372 260.111 652.372 259.991 cv
652.492 259.991 652.492 259.991 652.492 259.871 cv
652.612 259.871 652.612 259.871 652.612 259.871 cv
652.612 259.871 652.732 259.871 652.732 259.991 cv
cp
661.372 259.391 mo
661.612 259.631 661.852 259.871 661.972 260.231 cv
661.972 260.471 662.092 260.831 662.092 261.191 cv
661.972 261.431 661.852 261.791 661.732 262.151 cv
661.612 262.391 661.372 262.751 661.132 262.991 cv
660.892 263.231 660.652 263.351 660.532 263.471 cv
660.292 263.591 660.172 263.711 659.932 263.831 cv
659.812 263.831 659.572 263.951 659.452 263.951 cv
659.332 263.951 659.212 264.071 659.212 264.071 cv
659.092 264.071 658.972 263.951 658.972 263.951 cv
658.852 263.951 658.852 263.831 658.732 263.711 cv
658.612 263.711 658.612 263.591 658.612 263.591 cv
658.492 263.591 658.492 263.471 658.492 263.471 cv
658.492 263.351 li
658.612 263.231 658.612 263.231 658.732 263.231 cv
658.852 263.111 659.092 263.111 659.212 263.111 cv
659.452 262.991 659.572 262.871 659.812 262.751 cv
660.052 262.631 660.292 262.511 660.532 262.271 cv
660.652 262.151 660.772 261.911 660.892 261.791 cv
661.012 261.551 661.012 261.431 661.012 261.191 cv
661.012 261.071 661.012 260.831 661.012 260.711 cv
660.892 260.591 660.772 260.351 660.652 260.231 cv
660.412 260.111 660.292 259.991 660.052 259.871 cv
659.932 259.871 659.692 259.871 659.452 259.871 cv
659.332 259.991 659.092 259.991 658.852 260.111 cv
658.612 260.111 658.372 260.231 658.132 260.351 cv
657.892 260.471 657.652 260.471 657.412 260.591 cv
657.172 260.591 656.932 260.711 656.692 260.711 cv
656.452 260.711 656.212 260.591 655.972 260.471 cv
655.732 260.471 655.492 260.231 655.252 259.991 cv
655.012 259.751 654.892 259.511 654.772 259.271 cv
654.652 259.031 654.652 258.671 654.652 258.431 cv
654.652 258.191 654.772 257.831 654.892 257.591 cv
655.012 257.351 655.252 256.991 655.492 256.751 cv
655.612 256.631 655.732 256.511 655.852 256.391 cv
656.092 256.271 656.212 256.271 656.332 256.151 cv
656.452 256.031 656.692 256.031 656.812 256.031 cv
656.932 255.911 657.052 255.911 657.052 255.911 cv
657.172 255.911 657.172 255.911 657.172 255.911 cv
657.292 255.911 li
657.292 256.031 657.292 256.031 657.412 256.031 cv
657.412 256.031 657.412 256.151 657.532 256.151 cv
657.532 256.271 657.652 256.271 657.652 256.271 cv
657.652 256.391 657.772 256.391 657.772 256.391 cv
657.772 256.511 657.772 256.511 657.772 256.511 cv
657.772 256.631 657.772 256.631 657.772 256.631 cv
657.652 256.631 657.652 256.631 657.532 256.751 cv
657.412 256.751 657.292 256.751 657.172 256.871 cv
656.932 256.871 656.812 256.991 656.572 256.991 cv
656.452 257.111 656.212 257.231 656.092 257.471 cv
655.972 257.591 655.852 257.711 655.732 257.951 cv
655.732 258.071 655.612 258.191 655.612 258.431 cv
655.612 258.551 655.612 258.671 655.732 258.791 cv
655.732 258.911 655.852 259.031 655.972 259.151 cv
656.092 259.391 656.332 259.391 656.452 259.511 cv
656.692 259.511 656.812 259.511 657.052 259.511 cv
657.292 259.511 657.532 259.391 657.772 259.271 cv
658.012 259.271 658.252 259.151 658.492 259.031 cv
658.732 259.031 658.972 258.911 659.212 258.791 cv
659.452 258.791 659.692 258.791 659.932 258.791 cv
660.172 258.791 660.412 258.791 660.652 258.911 cv
660.892 258.911 661.132 259.151 661.372 259.391 cv
cp
667.132 255.191 mo
667.252 255.311 li
667.252 255.311 667.252 255.311 667.372 255.431 cv
667.372 255.431 667.372 255.431 667.372 255.551 cv
667.372 255.551 667.372 255.551 667.372 255.671 cv
667.372 255.671 667.372 255.791 667.372 255.911 cv
667.252 256.151 667.252 256.271 667.132 256.511 cv
667.012 256.631 667.012 256.871 666.772 257.111 cv
666.652 257.351 666.532 257.591 666.292 257.831 cv
665.932 258.191 665.452 258.431 665.092 258.551 cv
664.612 258.791 664.252 258.791 663.772 258.791 cv
663.292 258.791 662.812 258.671 662.332 258.431 cv
661.972 258.191 661.492 257.831 661.012 257.351 cv
660.532 256.871 660.172 256.391 659.932 255.911 cv
659.692 255.431 659.452 254.951 659.452 254.471 cv
659.452 253.991 659.452 253.511 659.692 253.031 cv
659.812 252.551 660.172 252.191 660.532 251.831 cv
660.652 251.591 660.892 251.471 661.012 251.351 cv
661.252 251.231 661.372 251.111 661.612 251.111 cv
661.732 250.991 661.972 250.871 662.092 250.871 cv
662.212 250.871 662.332 250.751 662.452 250.751 cv
662.572 250.751 662.572 250.751 662.572 250.871 cv
662.692 250.871 662.692 250.871 662.692 250.871 cv
662.812 250.871 662.812 250.871 662.812 250.991 cv
662.932 250.991 662.932 250.991 663.052 251.111 cv
663.052 251.111 663.052 251.231 663.172 251.231 cv
663.172 251.351 li
663.172 251.351 663.292 251.471 663.172 251.471 cv
663.172 251.471 663.172 251.471 663.172 251.591 cv
663.172 251.591 663.052 251.591 662.932 251.591 cv
662.812 251.711 662.692 251.711 662.452 251.711 cv
662.212 251.831 662.092 251.831 661.852 251.951 cv
661.612 252.071 661.372 252.311 661.132 252.431 cv
660.892 252.791 660.652 253.031 660.652 253.391 cv
660.532 253.631 660.412 253.991 660.532 254.351 cv
660.532 254.711 660.652 255.071 660.892 255.431 cv
661.132 255.791 661.372 256.151 661.732 256.511 cv
662.092 256.871 662.452 257.111 662.812 257.351 cv
663.172 257.591 663.532 257.711 663.892 257.711 cv
664.252 257.711 664.492 257.711 664.852 257.591 cv
665.092 257.471 665.452 257.231 665.692 256.991 cv
665.932 256.751 666.052 256.511 666.172 256.271 cv
666.292 256.031 666.412 255.911 666.412 255.671 cv
666.532 255.551 666.532 255.311 666.532 255.191 cv
666.652 255.071 666.652 254.951 666.652 254.951 cv
666.772 254.951 li
666.892 254.951 666.892 254.951 666.892 254.951 cv
667.012 255.071 667.012 255.071 667.132 255.191 cv
cp
f
grestore
3.17162 5.35083 mo
3.17162 5.11083 3.41162 4.87083 3.77162 4.87083 cv
693.532 4.87083 li
693.892 4.87083 694.132 5.11083 694.132 5.35083 cv
694.132 303.431 li
694.132 303.671 693.892 303.911 693.532 303.911 cv
3.77162 303.911 li
3.41162 303.911 3.17162 303.671 3.17162 303.431 cv
cp
4.25162 303.431 mo
3.77162 302.831 li
693.532 302.831 li
693.052 303.431 li
693.052 5.35083 li
693.532 5.83083 li
3.77162 5.83083 li
4.25162 5.35083 li
cp
.149752 .107332 .088716 0 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/HUBKFC+CIDFont+F1*1 uf
/HUBKFC+CIDFont+F1 uf
/HIBBAA+CIDFont+F1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
